[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d Nus Hangs"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-F11-4/main[image:https://travis-ci.org/CS2103-AY1819S1-F11-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]] https://coveralls.io/github/CS2103-AY1819S1-F11-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-F11-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/ad9658a1eccc44ffb117fb932e9be66b[link\u003d\"https://app.codacy.com/app/Happytreat/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103-AY1819S1-F11-4/main\u0026utm_campaign\u003dBadge_Grade_Dashboard\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop Schedule Manager application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* It is a Java application written by developers of F11-4, to target small to mid-size study/interest groups in NUS."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* What\u0027s different from https://github.com/se-edu/addressbook-level4[Address Book level 4]:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** More specific functions added"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "** More test cases, including automated GUI testing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \"NUS Hangs\" is a morph product from Address Book 4 and all credits goes to its developers at https://github.com/se-edu/[se-edu]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Done by team F11-4"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "souless94": 1,
      "-": 38
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": "\timplementation group: \u0027com.opencsv\u0027, name: \u0027opencsv\u0027 ,version: \u00274.3.2\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "\timplementation group: \u0027org.jsoup\u0027, name: \u0027jsoup\u0027 ,version: \u00271.11.3\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": "\timplementation group: \u0027commons-io\u0027, name: \u0027commons-io\u0027, version: \u00272.6\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "souless94"
        },
        "content": "    archiveName \u003d \u0027nus Hangs.jar\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        \u0027site-name\u0027: \u0027NUS Hangs\u0027,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-F11-4/main\u0027,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "souless94"
        },
        "content": "task copyTimetablePage(type: Copy) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "souless94"
        },
        "content": "    from \u0027docs/onlineTimetable.html\u0027"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "souless94": 7,
      "Happytreat": 2,
      "-": 243
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "Nus Hangs was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team and F11-4 CS2103 team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d\u003d SIM MING HUI MELODIES"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::Happytreat.png[width\u003d\"200\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/happytreat[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Model, Storage, UI and making sure team is on track and updated with each other\u0027s progress."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d\u003d TAN ZHI WEI"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "image::zhiwei94.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/ZhiWei94[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Documentation."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d\u003d CHIA WEN KAI"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "image::souless94.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/souless94[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Testing and Logic."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d\u003d TANG WEE JIE LESLIE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "image::aspiringdevslog.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/aspiringdevslog[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Scheduling and Tracking."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d\u003d NG YUAN YUN NIGEL"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "image::nigelngyy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/nigelngyy[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Testing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 9,
      "souless94": 1,
      "-": 44
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-F11-4/main/issues if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* *Email us* : You can also reach us at `e0201044@comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 1,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d NUS Hangs - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-F11-4/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "By: `Team F11-4`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": ". *JDK `9`* or later."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ". Open link:https://github.com/CS2103-AY1819S1-F11-4/main/tree/master/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson.java`] and link:https://github.com/CS2103-AY1819S1-F11-4/main/tree/master/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:https://github.com/CS2103-AY1819S1-F11-4/main/tree/master/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:https://github.com/CS2103-AY1819S1-F11-4/main/tree/master/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:https://github.com/CS2103-AY1819S1-F11-4/main/tree/master/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "`Main` has only one class called link:https://github.com/CS2103-AY1819S1-F11-4/main/tree/master/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AppChangedEvent` when the NUS Hangs Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "*API* : link:https://github.com/CS2103-AY1819S1-F11-4/main/tree/master/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:https://github.com/CS2103-AY1819S1-F11-4/main/tree/master/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:https://github.com/CS2103-AY1819S1-F11-4/main/tree/master/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "link:https://github.com/CS2103-AY1819S1-F11-4/main/tree/master/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "image::ModelComponentClassUpdatedOOPDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "*API* : link:https://github.com/CS2103-AY1819S1-F11-4/main/tree/master/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the NUS Hangs Address Book data."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "image::updatedstoragewithgroup.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "*API* : link:https://github.com/CS2103-AY1819S1-F11-4/main/tree/master/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "* can save NUS Hangs data in xml format when app closes and load it back when app is reopened."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "souless94"
        },
        "content": "Classes used by multiple components are in the `seedu.Erium.commons` package."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003d\u003d\u003d Timetable Feature"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d\u003d Reason for implementation"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "souless94"
        },
        "content": "The objective of the `add_timetable` feature is to to add data entries of a timetable into NUS Hangs. But it is hard to visualise the adding of the entries so we allowed user to add directly all the entries from a csv file. For `edit_timetable` , it is for User who just want to edit entries without going to find the timetable. For `download_timetable`, it is to allow the user to share their timetable to their friends."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d\u003d How to implement"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "souless94"
        },
        "content": "For `add_timetable` , we create a `timetable` class in `person` first, then we create a `timetableData` class with method to create a String [][] Matrix from the data from the csv file. Then we create a timetableString to which contains information on the entries about the `timetable` and store it in the xml file of the person in the addressbook."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "souless94"
        },
        "content": "The current `timetable` commands are:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "souless94"
        },
        "content": "* `add_timetable` -- adds a timetable from the csv file to the person."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "souless94"
        },
        "content": "* `delete_timetable` -- delete a timetable from the person and creates a default timetable in person. It will also find the timetable csv file of the person and deletes it."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "souless94"
        },
        "content": "* `edit_timetable` -- edit a timetable timeslot in the person"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "souless94"
        },
        "content": "* `download_timetable` -- downloads a timetable into a csv file into a stored folder location from the person."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "souless94"
        },
        "content": "These operations are handled by the `logic` component and uses the `person` in `model` to do the execution."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "souless94"
        },
        "content": "Given below is an activity diagram."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "souless94"
        },
        "content": "image::timetableworkflow.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "souless94"
        },
        "content": "Given below is an example usage scenario and how the `add_timetable` behaves at each step."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "souless94"
        },
        "content": "Step 1: The user launches the application for the first time. The NUS Hangs will initialise the person with the timetable with the details which was stored using Storage."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "souless94"
        },
        "content": "Step 2:  user finds a timetable of first `person` in the stored location which is called 495011161 timetable.csv. Using this command, User does not need to find the timetable. As shown in the diagram below its easy to see what event the person has."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "souless94"
        },
        "content": "image::addTimetable-step-2.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "souless94"
        },
        "content": "Step 3: The user executes `add_timetable 1` to add the timetable of first `person` in stored folder to NUS hangs. A new `timetable` will be created containing the data of the `timetable` of first `person` in stored folder. The `timetable` of first `person` will be replaced by this new `timetable`."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "souless94"
        },
        "content": "The `timetable` is then added to storage as a String which contains all of the data. This is to allow the app to save time in storage."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "souless94"
        },
        "content": "The following sequence diagram shows how `add_timetable` works."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "souless94"
        },
        "content": "image::addtimetablediagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "souless94"
        },
        "content": "* **Alternative 1 :** adds the timetable via a csv file."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "souless94"
        },
        "content": "** Pros: Easier for user to visualise and edit his timetable"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "souless94"
        },
        "content": "** Cons: Hard to implement. No choice other than to edit his timetable from the stored folder defined."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "souless94"
        },
        "content": "* **Alternative 2 (current choice) :** adds the timetable via a csv file from other locations."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "souless94"
        },
        "content": "** Pros: Easier for user to visualise and edit his timetable and allows user a choice on where to edit his timetable."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "souless94"
        },
        "content": "** Cons: Hard to implement, and user has to know how to get file location of a file."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "souless94"
        },
        "content": "* **Alternative 3:** User knows how to edit via the xml file of the person."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "souless94"
        },
        "content": "** Pros: Easier to implement"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "souless94"
        },
        "content": "** Cons: User must know how to edit via the xml file of the person, and harder for User to visualise."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the add_timetable commands"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "souless94"
        },
        "content": "* **Alternative 1 (current choice):** Use a String [][] Matrix to store entries of the timetable."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "souless94"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project. Better intuition to access entries of the matrix (matrix[i][j]) Which makes `edit_timetable` easier to implement."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "souless94"
        },
        "content": "** Cons: Slower Time efficiency because using 2 for loops to fill the Matrix with the data. Unable to use functions in ArrayList."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "souless94"
        },
        "content": "* **Alternative 2:** Use ArrayList\u003cArrayList\u003cString\u003e\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "souless94"
        },
        "content": "** Pros: Faster Time efficiency because using 1 for loops to fill the Matrix with the data. Able to use functions in ArrayList"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "souless94"
        },
        "content": "** Cons: Harder for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project. Less intuition to access entries of the matrix (matrix.get(i).get(j))."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d\u003d Security Mechanism"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "The main objectives of the security mechanism includes:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* Preventing unauthorised usage of the application"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* Preventing unauthorised access and editing rights to the data stored within the application"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "The following activity diagram illustrates how the workflow is restricted through the security mechanism."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ".Activity Diagram of Security Mechanism"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "image::SecurityMechanismActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "To prevent unauthorised access (read, edit and other commands) of application users are required to login to the application. Each users would only be able to access data created by themselves or data which they have been granted rights to access."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "To meet this end, various functions are implemented."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*Account Creation and Login* [implemented in v1.1, incomplete]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "The first step in securing the system is to restrict access to unauthorised users. This is accomplished by setting up `create` and `login` functions."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "- `create`: creates an account"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "- `login`: login to account"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Both functions are handled by the logic component, make use of the model component and is eventually managed through the storage component."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "The username is stored as a key in a hashmap while the password is encrypted and stored as the value. By using a hashmap to store the account login credentials, it becomes easy to implement the create and login function."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ".Sequence Diagram of Create Command"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "image::CreateCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ".Sequence Diagram of Login Command"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "image::LoginCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*To be implemented: *"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "convert hashmap storage into XML and vice-versa"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*Password Encryption* [implemented in v1.2, to be improved]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "To prevent unauthorised users from getting the password by looking at the .xml files, the password is encrypted before storage. This is done by implementing Java Cryptography module."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*Login Status Check* [to be implemented in v1.3]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Next, there is a need to check if user is logged in before executing any entered commands. This is done by implementing a check function in the AddressBookParser."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Step 1: A new user launches the application for the first time. The welcome page would prompt the user to create an account and refer to `help` function for more details."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "[LeslieTODO: to be updated - add image]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "image::SecurityMechanism-Step01-Diagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Step 2: The user follows the prompt to create an account, supplying a username and password."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "[LeslieTODO: to be updated - add image]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "image::SecurityMechanism-Step02-Diagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Step 2a: The user supplies a duplicate username and is prompted to choose another."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "[LeslieTODO: to be updated - add image]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "image::SecurityMechanism-Step02a-Diagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Step 2b: The user supplies a unique username and the account is successfully created."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "[LeslieTODO: to be updated - add image]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "image::SecurityMechanism-Step02b-Diagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Step 3: The user is prompted to login."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "[LeslieTODO: to be updated - add image]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "image::SecurityMechanism-Step03-Diagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Step 3a: The user supplies the wrong login credentials."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "[LeslieTODO: to be updated - add image]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "image::SecurityMechanism-Step03a-Diagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Step 3b: The user supplies the right login credentials."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "[LeslieTODO: to be updated - add image]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "image::SecurityMechanism-Step03b-Diagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Step 4: The user now have access to most of the commands."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "[LeslieTODO: to be updated - add image]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "image::SecurityMechanism-Step04-Diagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "In version 1.1, the implementation is up to step 3b."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "In version 1.2, the user password is encrypted to prevent loss of password."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "In version 1.3, step 4 would be implemented."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "In version 2.0, encryption would be extended to other essential data stored within the system."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Create and Login"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*Alternative 1 (current choice):* create stores data in a hashmap."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "- hashmap does not allows duplicate keys, making it easy to implement"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "- [LeslieTODO: to be updated]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*Alternative 2:*"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "- [LeslieTODO: to be updated]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "- [LeslieTODO: to be updated]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "[LeslieTODO: to be updated: ]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How encryption executes"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*Alternative 1 (current choice):* a function call to encryption before storing password data into hashmap. when logging in, a function call encrypts the user entered password before comparing to stored password in hashmap"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "- hashmap does not allows duplicate keys, making it easy to implement"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "- [LeslieTODO: to be updated]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003d\u003d\u003d Group Feature"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "The `Group` class extends the `Entity` abstract class just like a `Person` class does. An `Entity` contains an abstract method `isSame` that is necessary for the class to be used in `UniqueList\u003cT extends Entity\u003e`. `Group` class is an immutable class that is contained inside `Model`."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "`Group` features make use of `Storage` to load information on groups added by the user before the UI is closed. `XmlAdaptedGroup` class helps the convert groups detail from xml files to the `AddressBook` when `MainApp` starts and similarly convert `Group` objects into xml files."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "`Group` features also updates the Group Panel inside the `UI` using a predicate."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "[MelodiesTODO: Add diagram showing how Group class interacts with Storage, UI, Model and Logic]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "The current group commands added are:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "* `add_group` -- adds a group with an optional description"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "* `delete_group` -- deletes a group and all references from its members to it"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "* `edit_group` -- edit name/description of a group, maintaining uniqueness in group names"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "* `find_group` -- search for groups using keywords that must match exactly a word in Group name (TODO v1.4: Edit to find_group keyword matches substring of a word in group name or description)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "* `register` -- register a member into an existing group and include a reference to the group in the member (Person class)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "* `delete_member` -- delete an existing member from an existing group and remove reference to that group in the member"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "* `view_group` -- view the existing members in the group and is updated whenever any member is added or deleted."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "* `list [index]` -- lists all the groups the person at [index] is currently in."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "These functions and their parsers are handled in `Logic`, makes use of and updates `Model` and `Storage` and displaying the updated result on the `UI`."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Given below is an example usage scenario and how `register` behaves at each stop."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Step 1: The user launches the application. (Assuming that the user has already added a group and person.) `VersionedAddressBook` will be loaded with the final addressbook state before the application is closed. Lists of groups and persons added previously will be loaded from storage xml file into `Model` using `XmlAdaptedPerson` and `XmlAdaptedGroup` classes. The updated lists will be displayed in the `UI`."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Step 2:The user enters the index of the person and name of the group he wants to add the person into. `RegisterParser` creates a new `RegisterCommand` object with the Person and Group that is involved which checks whether the person and group already exist (else throwing `CommandException`)."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Step 3: `RegisterCommand` adds the person as a member in the group and adds a reference to the group inside the person\u0027s `List\u003cGroup\u003e`. Since `Group` and `Person` are immutable classes, a new object has to be created in this step."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Step 4: `Model` is updated of the new `Group` and `Person`. `FilteredPersonList` and `FilteredGroupList` is also updated to display the new groups and persons in the `UI`. A successful message is also displayed to the user below the UI\u0027s command box."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "[MelodiesTODO: Elaborate on how connection to UI is created.]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ".Sequence Diagram of RegisterCommand (Logic component)"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "image::RegisterCommandLogicSequenceDiagram.png[width\u003d\"750\"]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ".Sequence Diagram of RegisterCommand (Model component)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "image::RegisterCommandModelSequenceDiagram.png[width\u003d\"750\"]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to implement `Group` class"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "*Alternative 1 (current choice):* `Group` as an immutable class."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Pros: Immutable objects are good Map keys and Set elements, since these typically do not change once created. Immutability makes it easier to write, use and reason about the code."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Cons: Doing so might restrict the way one can call the class and its methods. It may be slower as you have to create new objects with every command."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "*Alternative 2:* Setter methods for Groups"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Pros: Easier and less code for methods involving groups. Faster as do not have to create new objects each time you change a Group (e.g. edit its description or group members)."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Cons: Miss out on the advantages of immutable object (above). Good practice to use immutable objects."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Interactions between person and groups"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Deleting a person from a group will affect the person\u0027s reference to that group and vice versa (similar for adding and editing)."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "*Alternative 1 (current choice):* Having a `UniqueList\u003cGroups\u003e` in `Person` and `UniqueList\u003cPerson\u003e` in `Group`."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Pros: Easy to retrieve groups from Person and persons from Group. Existing `UniqueList` class available (since already used in `Model`)."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Cons: Have to update both lists in most group commands (e.g. registering a new member in a group). Issue of enforcing referential integrity - defensive programming."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "*Alternative 2* Just update the list of groups in `Model` and have person refer to that list of group as to whether it is a member of the group."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Pros: Less issues with enforcing referential integrity (see alternative 1)."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Cons: Can be more expensive to look for groups for a particular person."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Person Feature"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "The \u0027Person\u0027 class extends the `Entity` abstract class and it is contained within \u0027Model\u0027."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Person\u0027 feature make use of \u0027Timetable\u0027 and \u0027Group\u0027 class to assign respective information to each instance of a person."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "The current person implementation are:"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "* \u0027add\u0027 -- add any person with the choice of adding address, phone, email and tags"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "* \u0027find\u0027 -- finds all persons in NusHangs, whose contain keywords provided by prefix(es)"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram shows how \u0027find\u0027 feature works:"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindFeature1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How should each specific \u0027find\u0027 feature work"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "*Alternative 1 (Current Choice) :* Use prefixes for specific search (e.g. find n/alex bernice t/friends)"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "Pros: Higher flexibility. Greater control of search range"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "Cons: Harder to implement"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "*Alternative 2 :* Create a class for each information (e.g. find_address)"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "Pros: Easy to implement, with specific search focus"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "Cons: Repetitive code base with less flexibility"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "The link:https://github.com/CS2103-AY1819S1-F11-4/main/tree/master/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "The files in link:https://github.com/CS2103-AY1819S1-F11-4/main/tree/master/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "The files in link:https://github.com/CS2103-AY1819S1-F11-4/main/tree/master/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Modifying the template files in link:https://github.com/CS2103-AY1819S1-F11-4/main/tree/master/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ".  Update the version number in link:https://github.com/CS2103-AY1819S1-F11-4/main/tree/master/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "souless94"
        },
        "content": "eryone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "souless94"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "souless94"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "souless94"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ".We target:"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ". Small to medium scale interest groups in NUS"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ". Groups who find organising a common / least conflicted dtime slot to meet a hassle"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Automate the process of organising meetings and finding least conflicted time slot for the group in a way faster than manually checking everyone\u0027s timetables."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "souless94"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "souless94"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "souless94"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "souless94"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "souless94"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "souless94"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "souless94"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "souless94"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "souless94"
        },
        "content": "|`* *` |user |hide timetable by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "souless94"
        },
        "content": "|`* * *` |user  |Add my new Timetable  |I can plan for the week"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "souless94"
        },
        "content": "|`* * *` |user  |Delete a timetable |Remove the timetable i no longer need"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "souless94"
        },
        "content": "|`* * *` |user  |View my timetable  |I can see when i am free for the week"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "souless94"
        },
        "content": "|`* * *` |user  |Have \u003c\u003cstandardised,standardised\u003e\u003e Date,time,time zone format  |I am clear on the meeting time and dates"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "souless94"
        },
        "content": "|`* *` |user  |view timetable in \u003c\u003chorizontal_mode,horizontal mode\u003e\u003e or \u003c\u003cvertical_mode,vertical mode\u003e\u003e |I can view my timetable faster for the mode i am familiar with"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "souless94"
        },
        "content": "|`* *` |user  |Upload my timetable"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "souless94"
        },
        "content": "In excel format"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "souless94"
        },
        "content": " |I do not need to key in manually my timetable"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "souless94"
        },
        "content": "|`* * *` |Organiser of the group  |See if there are any available time slots which are not in conflict with everyone’s time table."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "souless94"
        },
        "content": " |I can plan or attend an activity accordingly"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "souless94"
        },
        "content": "|`* *` |Organiser of the group  |See the time slot with the least number of conflicts if there are no time slots available for everyone"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "souless94"
        },
        "content": " |I can ensure maximum participation if it is not possible for everyone to make it"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "souless94"
        },
        "content": " |`* *` |Organiser of the group  |See all of the time slots listed in order in terms of number of conflicts."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "souless94"
        },
        "content": " |I can pick the best slots if maximum participation isn’t required."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "souless94"
        },
        "content": " |`* *` |Organiser of the group  |See the time slot with the least number of conflicts given a set of specific time slots."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "souless94"
        },
        "content": " |I can ensure maximum participation with the additional constraint"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "souless94"
        },
        "content": " |`* *` |user  |See the people whose time table have conflicts with the time slot with the least number of conflicts."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "souless94"
        },
        "content": " |I can adjust my time table if I am one of the people and increase participation"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "souless94"
        },
        "content": "|`* * *` |Organiser of the group  |Choose to create either open or closed group"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "souless94"
        },
        "content": " | Dont need to reject people because they know if they can join the group"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "souless94"
        },
        "content": " |`* *` |Organiser of the group  |Book venues based on decide free time slot"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "souless94"
        },
        "content": " |I can have a venue to hold my event"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "souless94"
        },
        "content": "  |`* *` |member of a group  |Sync with the real-time (almost) information to get updated time and venues"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "souless94"
        },
        "content": " |I am always updated with the latest timetable of everyone in the group"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "souless94"
        },
        "content": "  |`* *` |member of a group  |Notify organiser or other members of change of timetable/clashes"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "souless94"
        },
        "content": " |To update the timings of future possible meetings/RSVP"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "souless94"
        },
        "content": "   |`* *` |member of a group  |Have a list of groups i am currently in"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "souless94"
        },
        "content": " |I can remember what groups i am in"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "souless94"
        },
        "content": "  |`* *` |Organiser of the group  |Be notified of each members’ changes in available time slot"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "souless94"
        },
        "content": " |I can decide how and what to plan for the upcoming meeting"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "souless94"
        },
        "content": "  |`* * *` |Organiser of the group  |Be able to ‘close’ or finalise the planning"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "souless94"
        },
        "content": " |So that no changes can be made thereafter"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "souless94"
        },
        "content": " |`* * *` |user  |I want to be able to retrieve my password back"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "souless94"
        },
        "content": " |I will still be able to log in, even in urgent cases"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "souless94"
        },
        "content": " |`* *` |user  |I want to be able to export the information from the server"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "souless94"
        },
        "content": " |So that I can print, convert or edit in another file"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "souless94"
        },
        "content": " |`* * *` |Organiser of the group  |I want to dismiss members who are no longer affiliated to the group"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "souless94"
        },
        "content": " |So that the time slot available is up to date, to ensure maximum participation"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "souless94"
        },
        "content": "  |`* *` |user  |I want to easily change my password"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "souless94"
        },
        "content": " |To keep my account details secure"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "souless94"
        },
        "content": "   |`* *` |user  |I want to view my meeting on all my devices"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "souless94"
        },
        "content": " |I have a back up in the event I lost access to one of my devices"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "souless94"
        },
        "content": "  |`* *` |user  |The system to be password protected"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "souless94"
        },
        "content": " |My information will not be shared with everyone"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "souless94"
        },
        "content": " |`* *` |Organiser of the group  |I want to send an invite link"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "souless94"
        },
        "content": " |So that I can easily coordinate the meeting timing with my group members"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "souless94"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "souless94"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `NUS Hangs` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: help"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "souless94"
        },
        "content": "1. User logins to System and prompts to add a timetable"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem shows the help menu"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: add friend"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "1.\tUser logins to System and requests help to add a friend"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "2.\tSystem shows him how to add a friend"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "3.\tUser input add command accordingly"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "4.\tSystem displays friend is added successfully"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "souless94"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 3a. User enters invalid input."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 3a1.System shows an error message."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: Find friend by Name"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "1.\tUser logins to System and requests help to find a friend"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem shows how to find a friend"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "3.\tUser inputs command accordingly"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "souless94"
        },
        "content": "4.\tSystem shows friend details"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "souless94"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 3a. User enters invalid input."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 3a1.System shows an error message."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 4a.System cannot find friend."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: List all friends"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "1.\tUser logins to System and requests help to list all friends"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem shows a list of all friends"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "souless94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: Delete a friend"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User logins to System and requests help to delete a friend"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem shows how to delete a friend"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "3.\tUser enters input accordingly"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "4.\tSystem asks user for confirmation."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "souless94"
        },
        "content": "5.\tUser confirms his choice."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "souless94"
        },
        "content": "6.\tSystem shows friend is deleted successfully."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "souless94"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 3a. User enters invalid input."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 3a1.System shows an error message."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 4a. Friend is not in the System."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 4a1.System shows an error message."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 5a. User does not confirm the deletion of the friend"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "souless94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: Edit a friend"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User logins to System and requests help to edit a friend"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem shows how to edit a friend"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "3.\tUser enters input accordingly"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "4.\tSystem asks user for confirmation."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "souless94"
        },
        "content": "5.\tUser confirms his choice."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "souless94"
        },
        "content": "6.\tSystem shows friend is edited successfully."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "souless94"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 3a. User enters invalid input."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 3a1.System shows an error message."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 4a. Friend is not in the System."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 4a1.System shows an error message."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 5a. User does not confirm the editing of the friend"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: List all groups a friend have"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "1.\tUser logins to System and requests help to list all groups a friend have"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem shows a list of all groups a friend have"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "souless94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: add a timetable"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "1.\tUser logins to System and requests help to add a timetable"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem shows how to add a timetable"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "souless94"
        },
        "content": "3.\tUser enters inputs accordingly"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "souless94"
        },
        "content": "4.\tSystem shows his timetable and ask user for confirmation."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "5.\tUser confirms the addition of his timetable into the System."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "souless94"
        },
        "content": "6.\tSystem shows his timetable is added successfully."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "souless94"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 3a. User enters invalid input."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 3a1.System shows an error message."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 3b. User adds timetable via a link and there is no internet."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 3b1.System shows there is no internet connection."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 4a.User does not confirm the addition of the timetable into the System."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: edit a timetable"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "souless94"
        },
        "content": "1.\tUser logins to System and requests help to edit a timetable"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem shows how to edit a timetable"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "souless94"
        },
        "content": "3.\tUser enters inputs accordingly"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "souless94"
        },
        "content": "4.\tSystem shows his timetable and ask user for confirmation."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "souless94"
        },
        "content": "5.\tUser confirms the edit of his timetable into the System."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "souless94"
        },
        "content": "6.\tSystem shows his timetable is edit successfully."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "souless94"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 3a. User enters invalid input."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 3a1.System shows an error message."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 4a.User does not confirm the addition of the timetable into the System."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "souless94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: download a timetable"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "souless94"
        },
        "content": "1.\tUser logins to System and requests help to download a timetable"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem shows how to download a timetable"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "souless94"
        },
        "content": "3.\tUser enters inputs accordingly"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "souless94"
        },
        "content": "4.\tSystem shows his timetable and ask user for confirmation."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "souless94"
        },
        "content": "5.\tUser confirms the edit of his timetable into the System."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "souless94"
        },
        "content": "6.\tSystem shows his timetable is edit successfully."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "souless94"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 3a. User enters invalid input."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 3a1.System shows an error message."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 4a.User does not confirm the download of the timetable"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "souless94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: Delete a timetable"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User logins to System and requests help to delete a timetable"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem shows how to delete a timetable"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "3.\tUser enters input accordingly"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "4.\tSystem asks user for confirmation."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "souless94"
        },
        "content": "5.\tUser confirms his choice."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "souless94"
        },
        "content": "6.\tSystem shows the timetable is deleted successfully."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "souless94"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 3a. User enters invalid input."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 3a1.System shows an error message."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 4a. Timetable is not in the System."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 4a1.System shows an error message."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 5a. User does not confirm the deletion of the timetable"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "souless94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: check available time slot of the group"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "1.\tUser logins to System and requests help to see available time slots"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.  System shows how to find available time slot of the group"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "souless94"
        },
        "content": "3.\tUser enters inputs accordingly"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "souless94"
        },
        "content": "4.\tSystem asks if user wants to see the time slots listed in descending order in terms of the number of conflict if there are no available time slots."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "souless94"
        },
        "content": "5.\tSystem shows time slots listed in descending order in terms of the number of conflict"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "souless94"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 3a. User enters invalid input."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 3a1.System shows an error message."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 4a. Group or Person or both is not in the System."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 4a1.System shows an error message."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "souless94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case:create a group"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "1.\tUser logins to System and requests help to create a group"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem shows how to create a group"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "souless94"
        },
        "content": "3.\tUser adds inputs accordingly"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "souless94"
        },
        "content": "4.\tSystem shows group is created successfully"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "souless94"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 3a. User enters invalid input."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 3a1.System shows an error message."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "souless94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: Find group by Name"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "1.\tUser logins to System and requests help to find a group"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem shows how to find a group"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "souless94"
        },
        "content": "3.\tUser inputs accordingly"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "souless94"
        },
        "content": "4.\tSystem shows group details"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "souless94"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 3a. User enters invalid input."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 3a1.System shows an error message."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 4a.System cannot find group."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "souless94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: List all groups"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "1.\tUser logins to System and requests help to list all groups"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem shows a list of all groups"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "souless94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: Delete a group"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User logins to System and requests help to delete a group"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem shows how to delete a group"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "3.\tUser enters input accordingly"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "4.\tSystem asks user for confirmation."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "souless94"
        },
        "content": "5.\tUser confirms his choice."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "souless94"
        },
        "content": "6.\tSystem shows group is deleted successfully."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "souless94"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 3a. User enters invalid input."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 3a1.System shows an error message."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 4a. Group is not in the System."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 4a1.System shows an error message."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 5a. User does not confirm the deletion of the group"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "souless94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: Edit a group"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User logins to System and requests help to edit a group"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem shows how to edit a group"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "3.\tUser enters input accordingly"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "4.\tSystem asks user for confirmation."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "souless94"
        },
        "content": "5.\tUser confirms his choice."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "souless94"
        },
        "content": "6.\tSystem shows group is edited successfully."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "souless94"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 3a. User enters invalid input."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 3a1.System shows an error message."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 4a. Group is not in the System."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 4a1.System shows an error message."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 5a. User does not confirm the editing of the group"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "souless94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: List all members a group have"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "1.\tUser logins to System and requests help to list all members a group have"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem shows a list of all members a group have"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "souless94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: add a member to a group"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User logins to System and requests help to add a member to a group"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem shows how to add a member to a group"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "3.\tUser enters input accordingly"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "souless94"
        },
        "content": "4.\tSystem shows a member is added to a group successfully."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "souless94"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 3a. User enters invalid input."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 3a1.System shows an error message."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 3b. Group or member is not in the System."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 3b1.System shows an error message."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 3c.Group is closed"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "souless94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d\u003d Use case: Create an Account"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "souless94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "1.\tNew user prompted to create an account"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "2.\tUser enters create account command as prompted"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "3.  System displays account creation success message"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* 2a. User enters a duplicate username (username already in use)"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "+"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** 2a1.System prompts user to choose a different username"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "+"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d\u003d Use case: Login to Account"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "1.\tUser attempts to enter command"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "2.\tSystem detects that user is not logged in"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "3.  System prompts user to either create account or login to existing account"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "4.  User enters login command"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "5.  System displays login success message"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "souless94"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* 1a. System detects that user is not logged in"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** 1a1.System prompts user to login"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* 3a. User does not have an account"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "souless94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** 3a1.User enters create account command [the continuation of this extension can be found on *create an account* use case]"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Use case ends prematurely"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* 3b. User have an account"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Use case resumes at step 4"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* 4a. User enters wrong credentials (username and password combination does not match)"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "+"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** 4a1.System prompts user on login fail and to try again"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "+"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Use case resumes at step 4"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Use case: reset password"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "souless94"
        },
        "content": "1.\tUser enters command to reset password"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "souless94"
        },
        "content": "2.\tSystem prompts user to answer the security question"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "souless94"
        },
        "content": "3.\tAfter successfully answering the security question, system prompts user to choose a new password"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 1a. User enters username that does not exist in the system"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "souless94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 1a1.System prompts user to enter username again"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "souless94"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "souless94"
        },
        "content": "* 2a. User entered wrong security answer"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "souless94"
        },
        "content": "** 2a1.System prompts user to enter security answer again"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "souless94"
        },
        "content": ".  \tTime zone,Time,Date format is standardised and is shown before user adds timetable."
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 140,
      "souless94": 442,
      "Happytreat": 91,
      "-": 744
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d NUS Hangs - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-F11-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team F11-4`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "NUS Hangs is for those who *Wants to find a convenient time slot for the people who are joining his/her event*. More importantly, NUS Hangs is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast,NUS Hangs can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for Nus Hangs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all person"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* *`add_group`*: `add_group n/Family d/This is a family group description` : adds a group named \"Family\" with the following description."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* *`delete_group`*: `delete_group n/Family` : deletes the Family group from NUS Hang."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `n/NAME_OF_FRIEND`, `NAME_OF_FRIEND` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [i/INDEX_OF_TIMETABLE]` can be used as `n/John Doe i/1` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/GROUPNAME INDEX`, `INDEX n/GROUPNAME` is also acceptable."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d common"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "souless94"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Person"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add` (ZhiWei)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Short form/Alias: `a`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* Inputs in square brackets are optional"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/Nancy t/friend t/neighbour`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/James t/friend e/james@example.com t/classmates`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "* `a n/Joji t/Singer`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Short form/Alias: `l`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all groups a person is in : `list` (Melodies)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all groups the person specified by his PERSON_INDEX is in. +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list PERSON_INDEX`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "(Remember to `list` first)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* List the groups that the person at the specified `INDEX` is currently in. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* `list 1`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "(lists all the groups that the person at index 1 is added to previously)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Short form/Alias: `e`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "souless94"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "souless94"
        },
        "content": "[fl/STORED_LOCATION] [t/TAG]...`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "souless94"
        },
        "content": "*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "souless94"
        },
        "content": "* `edit 1 fl/C:\\Users\\admin\\Downloads\\cs2103\\tiredAndSadness` +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "souless94"
        },
        "content": "Edits the stored location of the 1st person to be `C:/Users/admin/Downloads/cs2103/tiredAndSadness/` respectively."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Finding a person : `find` (ZhiWei)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Finds all persons in NusHangs, whose contain keywords provided by prefix(es). +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find [n/NAME...] [p/PHONE_NUMBER...] [e/EMAIL...] [a/ADDRESS...] [t/TAG...]`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Inputs in square brackets are optional"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords and the prefix does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* All information of a person will be searched, provided by the prefix"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `Hans Bo` will return `Hans Gruber` and `Bo Yang`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* `find n/alex` +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names with `alex`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* `find n/Betsy Tim John` +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `find n/alex bernice t/friends` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having `alex` and `bernice` in name and `friends` in tags"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `find a/tampines p/12345678 87654321` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having `Tampines` in address and `12345678` \u0026 `87654321` in phone"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Short form/Alias: `ds`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d Timetable(Wen Kai)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Adding a timetable: `add_timetable`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Short form/Alias: `at`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "souless94"
        },
        "content": "User to download timetable template first before using download_timetable INDEX and change csv at the location. +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Reload page by clicking on another person and then click on the person again +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "souless94"
        },
        "content": "Or right click on timetable and select the reload page option."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "souless94"
        },
        "content": "Format: `add_timetable INDEX [fl/FILE_LOCATION]`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "souless94"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "souless94"
        },
        "content": "* timings are start time of the event. Eg. if timetable shows 0800, it means the event is from 0800 to 0900."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "souless94"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "souless94"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "souless94"
        },
        "content": "Example (user does not provide a file path):"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "souless94"
        },
        "content": "* `add_timetable 1`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "souless94"
        },
        "content": "* add_timetable will add timetable from the given csv file from the person specified by the `INDEX` from file location if file location is present. If not, NUSHangs will throw an error message if the file cannot be found from the given (typed) file path"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "souless94"
        },
        "content": "* Will not be able to add if timetable is not present in the stored location of person specified by `INDEX`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "souless94"
        },
        "content": "Example (user provides a file path):"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "souless94"
        },
        "content": "* `add_timetable 1 fl/C:\\Users\\timetable\\timetable.csv`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "souless94"
        },
        "content": "* FOR WINDOWS:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "souless94"
        },
        "content": "** `add_timetable fl/C:\\Users\\timetable\\timetable.csv` (absolute pathing) or"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "souless94"
        },
        "content": "** `add_timetable fl/timetable.csv` (relative pathing - if you save the .csv file in the same directory as the .jar file)."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "souless94"
        },
        "content": "* FOR MAC:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "souless94"
        },
        "content": "** `add_timetable 1 fl//FILEPATH` (absolute pathing - note the double slashes) or"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "souless94"
        },
        "content": "** `add_timetable 1 fl/timetable.csv` (relative pathing)."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "souless94"
        },
        "content": "* add_timetable will add timetable from the given csv file."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "souless94"
        },
        "content": "* the first row and first column should be left alone"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "souless94"
        },
        "content": "* can only edit in given rows and columns of the timetable."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "souless94"
        },
        "content": "* any invalid timetable will be ignored."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "souless94"
        },
        "content": "* example of correctly formatted timetable is given below"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "souless94"
        },
        "content": "image::add_timetable_fl.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a timetable: `edit_timetable`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Short form/Alias: `et`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "souless94"
        },
        "content": "Edits a timetable timeslot of the timetable from the person specified by the `INDEX`. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "souless94"
        },
        "content": "Format: `edit_timetable INDEX day/DAY timing/TIMING [m/DETAILS]`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "souless94"
        },
        "content": "* timings are in 24h format from 0800 to 2300."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "souless94"
        },
        "content": "* timings are start time of the event. Eg. if timetable shows 0800, it means the event is from 0800 to 0900."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "souless94"
        },
        "content": "* Existing values will be overwritten by the input details."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "souless94"
        },
        "content": "* days are days of a week in *full name(case insensitive)* from Monday to Friday."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "souless94"
        },
        "content": "* edit the timetable at the specified `INDEX`."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "souless94"
        },
        "content": "* can only edit 1 hour timeslot at a time."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "souless94"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "souless94"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "souless94"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "souless94"
        },
        "content": "* `edit_timetable 1 day/wednesday timing/0900 m/do cs2103`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Download timetable : `download_timetable`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Short form/Alias: `dlt`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "souless94"
        },
        "content": "Download a timetable from the person specified by the `INDEX` to the stored folder from the person specified by the `INDEX` as a csv file.  +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "souless94"
        },
        "content": "Format: `download_timetable INDEX `"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "souless94"
        },
        "content": "* Download the timetable at the specified `INDEX`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "souless94"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "souless94"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "souless94"
        },
        "content": "* Will not download if there is a file with same filename as the filename of the timetable from the person specified by the `INDEX`."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "souless94"
        },
        "content": "* Will not download if there is no such folder to download the timetable csv file given by the file location from the person specified by the `INDEX`."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "souless94"
        },
        "content": "* `download_timetable 1` +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Deleting a timetable : `delete_timetable`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Short form/Alias: `dt`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "souless94"
        },
        "content": "delete csv file of the timetable from stored location from the person specified by the `INDEX` and adds a default timetable to the person specified by the `INDEX`.Resets the timetable of the person if there is no timetable in the stored location from the person specified by the `INDEX`. +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "souless94"
        },
        "content": "Format: `delete_timetable INDEX`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "souless94"
        },
        "content": "* Deletes the timetable at the specified `INDEX`."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "souless94"
        },
        "content": "* The index refers to the index number shown in the displayed timetable list."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "souless94"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "souless94"
        },
        "content": "* `list_timetable` +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "souless94"
        },
        "content": "`delete_timetable 2` +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "souless94"
        },
        "content": "Deletes the 2nd timetable in the address book."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "souless94"
        },
        "content": "* `find_timetable Betsy` +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "souless94"
        },
        "content": "`delete_timetable 1` +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "souless94"
        },
        "content": "Deletes the 1st timetable in the results of the `find_timetable` command."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d Groups (Melodies)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Adding a group: `add_group`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Short form/Alias: `ag`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Add a group to the System +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add_group n/GROUPNAME [d/GROUPDESCRIPTION]`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "(`d/GROUPDESCRIPTION` is optional)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "* `add_group n/happyfriends d/a group of happy friends`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "* `add_group n/Bestfriends"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003d\u003d\u003d Editing a group : `edit_group`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Short form/Alias: `eg`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Edit a group\u0027s details. OLDGROUPNAME must be entered. There must be at least 1 field non-empty. +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "If field is empty, system assumes that the field remains unedited."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Format: `edit_group OLDGROUPNAME [n/NEWGROUPNAME] [d/NEWGROUPDESCRIPTION]`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "souless94"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "* `add_group n/happyfriends d/a group of happy friends`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit_group happyfriends n/sadfriends d/sad because of cs2103`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "(Changes the name of group from \"happyfriends\" to \"sadfriends\" and description)"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit_group sadfriends d/very very miserable`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "(Changes only description.)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Locating group by name: `find_group`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Short form/Alias: `fg`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "Find groups whose names contain any of the given keywords +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "souless94"
        },
        "content": "Format: `find_group KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `family` will match `Family`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "souless94"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the group name is searched."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Family` will not match `Families`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "souless94"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "souless94"
        },
        "content": "* `find_group John` +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Returns `john family` and `John House`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "souless94"
        },
        "content": "* `find_group Betsy Tim John` +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "souless94"
        },
        "content": "Returns any group having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Deleting a group : `delete_group`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Short form/Alias: `dg`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Delete a group in the system by name +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Format: `delete_group n/GROUPNAME`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "* Deletes the group with the specified `GROUPNAME`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "souless94"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "* `delete_group n/happyfriends`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a person to group : `register`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Short form/Alias: `r`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person using the person index to a group if group exists +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `register PERSON_INDEX n/GROUP_NAME`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "*Remember to `list` before using register command.*"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "* Adds the person at the specified `PERSON_INDEX`. The index refers to the index number shown in the displayed person panel. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "* Adds this person to the group with GROUPNAME."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "souless94"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "`register 1 n/happyfriends `"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "(Adds the first person in the displayed person panel to the group happyfriends)"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d List all persons of a group : `view_group`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Short form/Alias: `vg`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "shows a list of all persons in a group +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Format: `view_group n/GROUP_NAME`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "* List all persons of a group at the specified `GROUPNAME`."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "souless94"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "* ` view_group n/happyfriends`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "(lists the person added to group happyfriends in the displayed person list)"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Delete a person from group : `delete_member`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Short form/Alias: `dm`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "Delete a person from a group using person index displayed with `view_group`. +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete_member PERSON_INDEX n/GROUP_NAME`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "* `view_group` command should be performed before the `delete_member` command."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "* The PERSON_INDEX is the index of the displayed person list AFTER `view_group` command is performed."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "souless94"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "* `view_group n/happyfriends`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "* `delete_member 1 n/happyfriends`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "(deletes the 1st person displayed in `view_group` command.)"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Time slots (Nigel)"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003d\u003d\u003d List all time slots of a group at which everyone is available : `view_slots_all`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Short form/Alias: `va`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "List all of the available time slots in a group +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Format: `view_slots_all n/GROUP_NAME`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "* List all time slots in a group at which all person in the group is available at the specified `GROUPNAME`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "souless94"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "* `view_slots_all n/happyfriends`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d List all time slots of a group in descending order of availability: `view_slots_ranked`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "Short form/Alias: `vr`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "List all time slots of a group in descending order of availability: +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `view_slots_ranked n/GROUP_NAME`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "* List all time slots of a group in descending order of availability at the specified `GROUPNAME`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "souless94"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "* `view_slots_ranked n/happyfriends`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Security (Leslie)"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d Create an account: `create`"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "souless94"
        },
        "content": "Create an account in the system. The password and security answer are both case sensitive. +"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Format: `create u/USERNAME pw/PASSWORD`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "(Coming soon: Stores account details after closing and reopening app)"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "souless94"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* `create u/sampleUser pw/dontUseWeakPassword`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Login to an account : `login`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "souless94"
        },
        "content": "Login into the system. +"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Users are required to login to execute most commands of the NUS Hangs"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Format: `login u/USERNAME pw/PASSWORD`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "souless94"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* `login u/username pw/dontUseWeakPassword`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d\u003d\tEncrypt timetable data"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "Encrypts password so that it will not be stored as plain text."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "This function runs when dealing with user\u0027s password."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d\u003d Changing password: `update_pw `  `[coming in v2.0]`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "souless94"
        },
        "content": "Change the user password, requires user to be logged in first. +"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "souless94"
        },
        "content": "Format: `update_pw c/CURRENT_PASSWORD n/NEW_PASSWORD`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "souless94"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "souless94"
        },
        "content": "* `update_pw c/password n/newpass`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d\u003d get Security question password : `get` `[coming in v2.0]`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "souless94"
        },
        "content": "Shows the security question . +"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "souless94"
        },
        "content": "Format: `get`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d\u003d\tReset password  : `reset` `[coming in v2.0]`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "souless94"
        },
        "content": "Resets a password by answering the security question correctly. +"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "souless94"
        },
        "content": "Format: `reset a/SECURITY_ANSWER n/NEW_PASSWORD`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "souless94"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "souless94"
        },
        "content": "* `reset a/Near the moon`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d\u003d\tChanging security question and answer : `update_sq` `[coming in v2.0]`"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "souless94"
        },
        "content": "Change the user security question and answer, requires user to be logged in first. +"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "souless94"
        },
        "content": "Format: `update_sq c/CURRENT_PASSWORD [n/NEWSECURITY_QUESTION]  [a/SECURITY_ANSWER]`"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "souless94"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "souless94"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "souless94"
        },
        "content": "****"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "souless94"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "souless94"
        },
        "content": "* `update_pw c/password n/why me? a/because it is cs2103`"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003d\u003d\u003d\tSuggest, Requesting new password `[coming in v2.0]`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "souless94"
        },
        "content": "* *help* : `help`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "* *add*: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…` *Inputs in square brackets are optional* +"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "* *edit*: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [fl/STORED_LOCATION] [t/TAG]…` +"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 1 p/91234567 e/johndoe@example.com`"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "* *find*: `find [n/NAME…] [p/PHONE_NUMBER…] [e/EMAIL…] [a/ADDRESS…] [t/TAG…]` +"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find a/tampines p/12345678 87654321`"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "* *delete*: `delete INDEX` +"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 1`"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "* *list*: Listing all persons +"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "eg. `list`"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "* *list PERSON_INDEX*: List all the groups the person is in +"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `list 1`"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "* *undo*"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "* *redo*"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "* *history*: Lists all the commands that you have entered in reverse chronological order."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "* *add_timetable*: `add_timetable INDEX [fl/FILE_LOCATION]` +"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "souless94"
        },
        "content": "e.g. `add_timetable 1 fl/C:\\Users\\timetable\\timetable.csv`"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "* *edit_timetable*: `edit_timetable INDEX day/DAY timing/TIMING [m/DETAILS]` +"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "souless94"
        },
        "content": "e.g. `edit_timetable 1 day/wednesday timing/1800 m/do cs2103`"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "souless94"
        },
        "content": "* *download_timetable* : `download_timetable INDEX` +"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "souless94"
        },
        "content": "e.g. `download_timetable 1`"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "souless94"
        },
        "content": "* *delete_timetable* : `delete_timetable INDEX` +"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "souless94"
        },
        "content": "e.g. `delete_timetable 3`"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "* *add_group*: `add_group n/GROUPNAME [d/GROUPDESCRIPTION]`` +"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add_group n/happyfriends d/a group of happy friends`"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "* *edit_group* : `edit_group OLDGROUPNAME [n/NEWGROUPNAME] [d/NEWGROUPDESCRIPTION]` +"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit_group happyfriends n/sadfriends d/sad because of cs2103`"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "* *find_group* : `find_group KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find_group Family Friends`"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "* *delete_group* : `delete n/GROUPNAMR` +"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete_group Family`"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "* *view_group* : View a group\u0027s members `view_group n/GROUPNAME`+"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `view_group Family`"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "* *register* `register PERSON_INDEX n/GROUP_NAME` +"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `register 1 n/Family`"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "* *delete_member*: Always use view_group before doing delete_member +"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "`delete_member PERSON_INDEX n/GROUP_NAME` +"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `view_group n/Family` +"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "`delete_member 1 n/Family`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "* *view_slots_all*: `view_slots_all n/GROUP_NAME`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "* *view_slots_ranked*: `view_slots_ranked n/GROUP_NAME`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *create* : `create u/USERNAME pw/PASSWORD` +"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "e.g. `create u/user pw/strongpass`"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *login* : `login u/USERNAME pw/PASSWORD` +"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "e.g. `login u/user pw/strongpass`"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 19,
      "souless94": 216,
      "Happytreat": 62,
      "-": 366
    }
  },
  {
    "path": "docs/team/aspiringdevslog.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *Major enhancement*: added *the ability to create account and login*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** What it does: prevents unauthorised users from accessing the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Justification: This feature secures the application by preventing unauthorised users from accessing it."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *Minor enhancement*: *added an encrypt function*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** What it does: encrypts password before storage to prevent compromising of password information."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003daspiringdevslog"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Set up issues tracker on Github:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "**** Created labels"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "**** Created project board"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "**** Set up milestones and deadlines"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "***"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 59
    }
  },
  {
    "path": "docs/team/happytreat.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Sim Ming Hui Melodies (Happytreat) - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/Happytreat.png"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: NUS Hangs"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "NUS Hangs is a desktop Schedule Manager application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface). It is a Java application written by developers of F11-4, to target small/mid-size interest/sttudy groups in NUS."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: Created a group class and added corresponding group functions:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. add_group, delete_group, edit_group, register, delete_member, find_group, view_group."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: The group class allows users to categorise persons into groups and facilitate free time slot allocation."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "*** add_group: Add a new group which will appear in the right group panel of UI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "*** delete_group: Delete an existing group and remove all current members from that group."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "*** edit_group: Edit an existing group\u0027s name/description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*** register: Register an existing person as a member of the group."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*** delete_member: Delete an existing member of the group."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "*** find_group: Find a group based on its name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "*** view_group: View all members of the group in UI."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product\u0027s functionality significantly because a user can now better organise his contacts into groups and easily coordinate common time slots to meet."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future.The implementation too was challenging as it required changes to existing commands:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "*** The integration of Group and Person Class. For instance, delete_group requires the group to be deleted and all reference to the group in all Persons registered to be deleted. https://github.com/CS2103-AY1819S1-F11-4/main/pull/92[#92]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Changes in the UI and Storage components. For instance, the GroupPanel has to be created to show and update all groups. Group Data have to stored after the app closes inside addressbook.xml and reloaded into the app as Group objects once the user reopens the app."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: Enhance `list` command to list both groups and persons. Added a `list INDEX` command to show all the groups that the person at INDEX is currently in."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: Created short hands/short forms for most commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: Refactored UniquePersonList into UniqueList\u003cT\u003e for different classes: Groups, Person and Timetable."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: Created an Abstract class Entity which Group and Person extends from to allow for polymorphism: Refactored the ModelManager and AddressBook function to include Polymorphism. E.g. addPerson() --\u003e add() which performs add on Group or Person class based on polymorphism."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dhappytreat[Functional and Test code]]  _{give links to collated code files}_"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.1` - `v1.3` (3 releases) on GitHub"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "*** Edited the badges: Codacy badge, Coverage and Build status on README.adoc."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage by \u003e4% (Pull requests https://github.com/CS2103-AY1819S1-F11-4/main/pull/80[#80], https://github.com/CS2103-AY1819S1-F11-4/main/pull/123[#123], https://github.com/CS2103-AY1819S1-F11-4/main/pull/146[#146])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "*** Edit the Model OOP Class Diagram in Dev Guide to include Group classes: https://github.com/CS2103-AY1819S1-F11-4/main/pull/202[#202]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "*** Edit the Storage Class Diagram in Dev Guide to include Group class: https://github.com/CS2103-AY1819S1-F11-4/main/pull/200[#200]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S1-F11-4/main/pull/71[#71])"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "*** Some parts of the group feature I added was adopted by several other teammates (https://github.com/CS2103-AY1819S1-F11-4/main/pull/160[#160])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "*** Create a CommandUtil.java with many common functions reused by different commands including those in AB4 and those used by other teammates."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dgroup]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dgroup]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 28,
      "Happytreat": 8,
      "-": 30
    }
  },
  {
    "path": "docs/team/nigelngyy.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 72
    }
  },
  {
    "path": "docs/team/souless94.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 72
    }
  },
  {
    "path": "docs/team/zhiwei94.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhiWei94"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dzhiwei94[Functional and Test code]]  _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 71,
      "ZhiWei94": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing NUS Hangs ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample NUS Hangs AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty NUS Hangs \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    + \"AddressBook\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty NUS Hangs \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    + \"AddressBook\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        logger.info(\"Starting NUS Hangs \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping NUS Hangs ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 1,
      "souless94": 1,
      "Happytreat": 8,
      "-": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_INVALID_DAY \u003d \"Days are in full name, from Monday to Friday\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_INVALID_TIMING \u003d \"timings are in 24h format and is from 0800 to 2300\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_INVALID_DAY_AND_TIMING \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "        MESSAGE_INVALID_DAY + \"\\n\" + MESSAGE_INVALID_TIMING;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_EXTENSION \u003d \"timetable can only be in csv\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_NO_MATCH_TO_EXISTING_GROUP \u003d \"There is no match to an existing group.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_GROUPS_LISTED_OVERVIEW \u003d \"%1$d groups listed!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_TIMETABLE_NOT_FOUND \u003d \"timetable to be added is not found\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static final String MESSAGE_USER_NOT_LOGGED_IN \u003d \"Please login or create an account to continue.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static final String MESSAGE_USER_ALREADY_LOGGED_IN \u003d \"User is already logged in.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_IS_FILE_DIRECTORY \u003d \"timetable cannot be a file directory(folder)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 2,
      "souless94": 8,
      "Happytreat": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/GroupPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Represents a selection change in the Group List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class GroupPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final Group newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public GroupPanelSelectionChangedEvent(Group newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public Group getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    // # TODO: Add Test in LogicManagerTest"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    ObservableList\u003cGroup\u003e getFilteredGroupList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public LogicManager(Model model, boolean setLoginStatus) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        addressBookParser \u003d new AddressBookParser(setLoginStatus);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return model.getFilteredGroupList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 7,
      "Happytreat": 6,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Inputs in square brackets are optional\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"Ash \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"Mary Jane \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        CommandUtil.addTargetToModelIfNoDuplicates(model, toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 3,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddGroupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class AddGroupCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_group\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"ag\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new group. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + PREFIX_NAME + \"GROUP NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"OPTIONAL DESCRIPTION]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added group successfully.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"This group already exists in the address book\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final Group newGroup;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Creates an CreateGroupCommand to create the specified {@code Group}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public AddGroupCommand(Group group) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        newGroup \u003d group;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        CommandUtil.addTargetToModelIfNoDuplicates(model, newGroup);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, newGroup));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                || (other instanceof AddGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                \u0026\u0026 newGroup.equals(((AddGroupCommand) other).newGroup));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTimetableCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static java.util.Objects.isNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TIMETABLE_NOT_FOUND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.EditTimetableCommand.createUpdatedPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": " * adds timetable to person"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class AddTimetableCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_timetable\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"at\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "        COMMAND_WORD + \": adds timetable to the person identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"by the index number used in the displayed person list.\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"[\" + PREFIX_FILE_LOCATION + \"FILE_LOCATION] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + PREFIX_FILE_LOCATION"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"C:/Users/wen kai/Downloads/y4s1/cs2103/project2/data/timetable/495011161 timetable\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_ADD_TIMETABLE_SUCCESS \u003d \"timetable added successfully: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_INVALID_TIMETABLE_SIZE \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \"timetable to be added is wrong: \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"timetable should have in total rows: 8 , columns : 17 \\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private static final String timings \u003d \"correctTimings : \\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "        + \"0800,0900,1000,1100 \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "        + \"1200,1300,1400,1500,1600 \\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "        + \"1700,1800,1900,2000,2100,2200,2300 \\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private static final String days \u003d \"correctDays: {Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_INVALID_TIMETABLE \u003d \"timetable to be added is wrong: \\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "        + \"does not have correct timings in first row and correct days in first column in the csv file \\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "        + timings + \"\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "        + days + \"\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final String newFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public AddTimetableCommand(Index index, String newFilePath) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.newFilePath \u003d newFilePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person personToEdit \u003d CommandUtil.retrievePersonFromIndex(model, index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String filePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (newFilePath \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "            filePath \u003d personToEdit.getStoredLocation();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "souless94"
        },
        "content": "            filePath \u003d newFilePath.replace(\"\\\\\", \"/\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "souless94"
        },
        "content": "        boolean doesFileExists \u003d new File(filePath).exists();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (doesFileExists) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "souless94"
        },
        "content": "            Timetable timetable \u003d new Timetable(filePath,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "souless94"
        },
        "content": "                personToEdit.getTimetable().getTimetableDataString(), 2, null, null, null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "            if (!timetable.isValid()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "souless94"
        },
        "content": "                if (!timetable.isCorrectSize()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    throw new CommandException(MESSAGE_INVALID_TIMETABLE_SIZE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "souless94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "souless94"
        },
        "content": "                if (!timetable.hasCorrectFirstRowsAndColumns()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    throw new CommandException(MESSAGE_INVALID_TIMETABLE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "souless94"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    throw new CommandException("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "souless94"
        },
        "content": "                        MESSAGE_INVALID_TIMETABLE + MESSAGE_INVALID_TIMETABLE_SIZE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "souless94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "souless94"
        },
        "content": "            Person updatedPerson \u003d createUpdatedPerson(personToEdit, timetable, filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "souless94"
        },
        "content": "            for (Group group : personToEdit.getGroups()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "souless94"
        },
        "content": "                CommandUtil.replacePersonInGroup(model, group, personToEdit, updatedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            model.update(personToEdit, updatedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "souless94"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "souless94"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String.format(MESSAGE_ADD_TIMETABLE_SUCCESS, updatedPerson.getStoredLocation()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new CommandException(MESSAGE_TIMETABLE_NOT_FOUND);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (newFilePath \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "souless94"
        },
        "content": "                || (other instanceof AddTimetableCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "souless94"
        },
        "content": "                \u0026\u0026 index.equals(((AddTimetableCommand) other).index))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "souless94"
        },
        "content": "                \u0026\u0026 isNull(((AddTimetableCommand) other).newFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "souless94"
        },
        "content": "            || (other instanceof AddTimetableCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "souless94"
        },
        "content": "            \u0026\u0026 index.equals(((AddTimetableCommand) other).index))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "souless94"
        },
        "content": "            \u0026\u0026 newFilePath.equals(((AddTimetableCommand) other).newFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "souless94": 118,
      "Happytreat": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Entity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.UniqueList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "//@@author Happytreat"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Contains helper methods for commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class CommandUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Retrieves the group with index in displayed Group list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static Group retrieveGroupFromName(Model model, Name groupName) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // Make sure that group exists"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        List\u003cGroup\u003e lastShownList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group groupToBeEdited \u003d new Group(groupName, \"\"); //do not know description and groupMembers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!lastShownList.contains(groupToBeEdited)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_MATCH_TO_EXISTING_GROUP);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return lastShownList.get(lastShownList.indexOf(groupToBeEdited)); //retrieves original group"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Retrieves the person with index in displayed Group list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static Person retrievePersonFromIndex(Model model, Index targetIndex)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Delete {@code groupToDelete} from {@code personToUpdate} group list and updates model of new"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * {@code personToUpdate}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static void updatePersonDeleteGroupFromGroupList(Model model, Group groupToDelete,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person personToUpdate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        List\u003cGroup\u003e editedGroupList \u003d new ArrayList\u003c\u003e(personToUpdate.getGroups());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        editedGroupList.remove(groupToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person newPerson \u003d personToUpdate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        newPerson.setGroups(editedGroupList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.update(personToUpdate, newPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Remove {@code oldPerson} from {@code group} and instead adds {@code newPerson}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static void replacePersonInGroup (Model model, Group group, Person oldPerson, Person newPerson)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        UniqueList\u003cPerson\u003e groupMembers \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group groupToEdit \u003d retrieveGroupFromName(model, group.getName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groupMembers.setElements(groupToEdit.getGroupMembers());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groupMembers.setElement(oldPerson, newPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group editedGroup \u003d new Group(groupToEdit.getName(), groupToEdit.getDescription(), groupMembers);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.update(groupToEdit, editedGroup);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Remove {@code oldGroup} from {@code person} and instead adds {@code newGroup}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static void replaceGroupInPerson (Model model, Person person, Group oldGroup, Group newGroup)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        List\u003cGroup\u003e groupList \u003d new ArrayList\u003c\u003e(person.getGroups());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groupList.remove(oldGroup);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groupList.add(newGroup);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        UniqueList\u003cGroup\u003e uniqueGroupList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.setElements(groupList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person newPerson \u003d new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                person.getTags(), uniqueGroupList, person.getStoredLocation(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                person.getTimetable().generateTimetableDataString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.update(person, newPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Adds {@code target} to model if there it has not been added before."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static void addTargetToModelIfNoDuplicates(Model model, Entity target)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (model.has(target)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (target instanceof Person) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                throw new CommandException(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (target instanceof Group) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                throw new CommandException(AddGroupCommand.MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.add(target);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Happytreat": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CreateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.model.person.Accounts;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.storage.UserAccountStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "//@@author aspiringdevslog"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": " * Creates a user for address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "public class CreateCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New user added successfully!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Username already exist.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private static boolean createIsSuccessful \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    //TODO: update MESSAGE_USAGE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates an account in NUS Hangs. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            + PREFIX_USERNAME + \"username \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            + PREFIX_PASSWORD + \"password \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * Creates an CreateCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public CreateCommand(Accounts account) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        Accounts newAccount \u003d account;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        if (!UserAccountStorage.checkDuplicateUser(account.getUsername())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            UserAccountStorage.addNewAccount(account.getUsername(), account.getPassword());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            createIsSuccessful \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            createIsSuccessful \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public boolean getCreateIsSuccessful() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        return createIsSuccessful;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        if (createIsSuccessful \u003d\u003d true) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_FAILURE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.UniqueList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.exceptions.NotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book and delete it as"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": " * member from all groups that it is in."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    //@@author Happytreat"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person personToDelete \u003d CommandUtil.retrievePersonFromIndex(model, targetIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        File timetableToBeDeleted \u003d new File(personToDelete.getStoredLocation());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (timetableToBeDeleted.exists()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            timetableToBeDeleted.delete();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        for (Group group : personToDelete.getGroups()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Group groupToUpdate \u003d CommandUtil.retrieveGroupFromName(model, group.getName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            groupToUpdate \u003d deleteMemberFromGroup(groupToUpdate, personToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            model.update(group, groupToUpdate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.delete(personToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @return updated group that has {@code personToDelete} deleted from its member list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public Group deleteMemberFromGroup(Group groupToBeEdited, Person personToDelete)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            UniqueList\u003cPerson\u003e newGroupMembers \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            newGroupMembers.setElements(groupToBeEdited.getGroupMembers());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            newGroupMembers.remove(personToDelete);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return new Group(groupToBeEdited.getName(), groupToBeEdited.getDescription(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                newGroupMembers);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        } catch (NotFoundException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 3,
      "Happytreat": 56,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteGroupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.exceptions.NotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class DeleteGroupCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_group\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"dg\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes an existing group. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + PREFIX_NAME + \"GROUP NAME \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted group successfully: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final Group groupToBeDeleted;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Creates an CreateGroupCommand to create the specified {@code Group}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public DeleteGroupCommand(Group group) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groupToBeDeleted \u003d group;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Group groupDeleted \u003d CommandUtil.retrieveGroupFromName(model, groupToBeDeleted.getName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            model.delete(groupDeleted);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            deleteGroupFromMembers(model, groupDeleted);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            model.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, groupDeleted.getName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        } catch (NotFoundException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_MATCH_TO_EXISTING_GROUP);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Update model with a new {@code Person} with {@code groupDeleted} deleted from list of groups"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * for every member in {@code groupDeleted}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private static void deleteGroupFromMembers(Model model, Group groupDeleted) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assert groupDeleted !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        List\u003cPerson\u003e membersToEdit \u003d new ArrayList\u003c\u003e(groupDeleted.getGroupMembers());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        for (Person member : membersToEdit) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            CommandUtil.updatePersonDeleteGroupFromGroupList(model, groupDeleted, member);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                || (other instanceof DeleteGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                \u0026\u0026 groupToBeDeleted.equals(((DeleteGroupCommand) other).groupToBeDeleted));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteMemberCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.UniqueList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Delete an existing member of an existing group in the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class DeleteMemberCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_member\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"dm\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete an existing member of an existing group \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"Parameters: INDEX of person in view_group displayed list (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"[\" + PREFIX_NAME + \" GROUP NAME]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + PREFIX_NAME + \"Family \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MISSING_GROUP_NAME \u003d \"Please enter group name.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private static final String MESSAGE_EDIT_GROUP_SUCCESS \u003d \"Deleted member from group: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private static final String NO_MEMBER_WITH_GIVEN_INDEX \u003d \"Please input the correct index of person to delete. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"(Index from view_group displayed list.)\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final Name groupName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @param groupName of the group in the filtered group list to edit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @param index of the person to be added to the group."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public DeleteMemberCommand(Name groupName, Index index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(groupName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group groupToBeEdited \u003d CommandUtil.retrieveGroupFromName(model, groupName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Pair\u003cGroup, Person\u003e pair \u003d deleteMemberFromGroup(groupToBeEdited, index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Group editedGroup \u003d pair.getKey();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            model.update(groupToBeEdited, editedGroup);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            //Update person to have group removed from Person\u0027s grouplist"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Person member \u003d pair.getValue();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            CommandUtil.updatePersonDeleteGroupFromGroupList(model, editedGroup, member);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Predicate\u003cPerson\u003e predicateShowAllMembers \u003d person -\u003e editedGroup.getGroupMembers().contains(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            model.updateFilteredPersonList(predicateShowAllMembers);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_GROUP_SUCCESS, editedGroup));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new CommandException(NO_MEMBER_WITH_GIVEN_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Creates and returns a {@code group} with a member deleted {@code indexToDelete}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * in {@code groupToBeEdited}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private static Pair\u003cGroup, Person\u003e deleteMemberFromGroup(Group groupToBeEdited, Index index)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            assert groupToBeEdited !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            UniqueList\u003cPerson\u003e newGroupMembers \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            newGroupMembers.setElements(groupToBeEdited.getGroupMembers());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Person personToDelete \u003d groupToBeEdited.getGroupMembers().get(index.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            newGroupMembers.remove(personToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return new Pair\u003c\u003e(new Group(groupToBeEdited.getName(), groupToBeEdited.getDescription(), newGroupMembers),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    personToDelete);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!(other instanceof DeleteMemberCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteMemberCommand e \u003d (DeleteMemberCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return groupName.equals(e.groupName)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                \u0026\u0026 index.equals(e.index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteTimetableCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.UniqueList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": " * deletes the timetable the person have and gives the person a default timetable"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class DeleteTimetableCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_timetable\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"dt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "        COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \": delete timetable from stored location and adds a default timetable to the person identified\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"by the index number used in the displayed person list. \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"resets the timetable of the person if there is no timetable in the stored location\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \" \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"Parameters : INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_DELETE_TIMETABLE_SUCCESS \u003d \"delete and reset timetable successfully\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_RESET_TIMETABLE_SUCCESS \u003d \"reset timetable successfully\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_DELETE_TIMETABLE_FAILURE \u003d \"timetable was not deleted, but reset successfully\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public DeleteTimetableCommand(Index index) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person personToDeleteTimetable \u003d CommandUtil.retrievePersonFromIndex(model, index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File toBeDeleted \u003d new File(personToDeleteTimetable.getStoredLocation());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person updatedPerson \u003d createPersonWithNewTimetable(personToDeleteTimetable);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "        for (Group group : personToDeleteTimetable.getGroups()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "            CommandUtil.replacePersonInGroup(model, group, personToDeleteTimetable, updatedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.update(personToDeleteTimetable, updatedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (toBeDeleted.exists()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": "            toBeDeleted.delete();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": "            if (!toBeDeleted.exists()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "                return new CommandResult("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    String.format(MESSAGE_DELETE_TIMETABLE_SUCCESS, updatedPerson));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": "                throw new CommandException(MESSAGE_DELETE_TIMETABLE_FAILURE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String.format(MESSAGE_RESET_TIMETABLE_SUCCESS, updatedPerson));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * it creates a new person with a default timetable while not changing other details of person"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private Person createPersonWithNewTimetable(Person personToDeleteTimetable) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assert personToDeleteTimetable !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Name updatedName \u003d personToDeleteTimetable.getName();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Phone updatedPhone \u003d personToDeleteTimetable.getPhone();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Email updatedEmail \u003d personToDeleteTimetable.getEmail();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Address updatedAddress \u003d personToDeleteTimetable.getAddress();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d personToDeleteTimetable.getTags();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String storedLocation \u003d personToDeleteTimetable.getStoredLocation();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "souless94"
        },
        "content": "        UniqueList\u003cGroup\u003e uniqueGroupList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "souless94"
        },
        "content": "        uniqueGroupList.setElements(personToDeleteTimetable.getGroups());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "souless94"
        },
        "content": "            uniqueGroupList, storedLocation, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "souless94"
        },
        "content": "            || (other instanceof DeleteTimetableCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "souless94"
        },
        "content": "            \u0026\u0026 index.equals(((DeleteTimetableCommand) other).index));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 104,
      "Happytreat": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DownloadTimetableCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": " * download a timetable to a specific location"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class DownloadTimetableCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"download_timetable\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"dlt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "        COMMAND_WORD + \": download timetable from the person identified \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"there must not be a file with same filename\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"as the person timetable filename \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \" in the download folder location \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"Parameters : INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_DOWNLOAD_TIMETABLE_SUCCESS \u003d \"timetable downloaded successfully to : \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_TIMETABLE_IS_PRESENT \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \"there is a csv file with same name as your timetable filename at: \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_PATH_DOWNLOAD \u003d \"That is not a valid file path,\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "        + \" as there is no such folder present: \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * location of the download is gotten from the person"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @param index of the person to download timetable from"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public DownloadTimetableCommand(Index index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToDownloadTimetable \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetableToDownload \u003d new File(personToDownloadTimetable.getStoredLocation());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "        boolean doesFileExists \u003d timetableToDownload.exists();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "        boolean doesFolderExists \u003d new File(timetableToDownload.getParent()).exists();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (!doesFolderExists) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "souless94"
        },
        "content": "                MESSAGE_INVALID_FILE_PATH_DOWNLOAD + timetableToDownload.getParent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (doesFileExists) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": "                MESSAGE_TIMETABLE_IS_PRESENT + personToDownloadTimetable.getStoredLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Timetable timetable \u003d personToDownloadTimetable.getTimetable();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "souless94"
        },
        "content": "        timetable.downloadTimetableAsCsv();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "souless94"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "souless94"
        },
        "content": "            String.format(MESSAGE_DOWNLOAD_TIMETABLE_SUCCESS)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + personToDownloadTimetable.getStoredLocation());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "souless94"
        },
        "content": "            || (other instanceof DownloadTimetableCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "souless94"
        },
        "content": "            \u0026\u0026 index.equals(((DownloadTimetableCommand) other).index));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 84,
      "Happytreat": 3,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.UniqueList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "        COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"[\" + PREFIX_FILE_LOCATION + \"FILE_LOCATION] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person personToEdit \u003d CommandUtil.retrievePersonFromIndex(model, index);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!personToEdit.isSame(editedPerson) \u0026\u0026 model.has(editedPerson)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        for (Group group : editedPerson.getGroups()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            CommandUtil.replacePersonInGroup(model, group, personToEdit, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.update(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit} edited with"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static Person createEditedPerson(Person personToEdit,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "souless94"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String storedLocation \u003d editPersonDescriptor.getStoredLocation()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .orElse(personToEdit.getStoredLocation());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String timetableString \u003d personToEdit.getTimetable().getTimetableDataString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        UniqueList\u003cGroup\u003e uniqueGroupList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.setElements(personToEdit.getGroups());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "souless94"
        },
        "content": "            uniqueGroupList, storedLocation, timetableString);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "souless94"
        },
        "content": "        private String storedLocation;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        private List\u003cGroup\u003e groupList;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "souless94"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "souless94"
        },
        "content": "         * Copy constructor. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "souless94"
        },
        "content": "            setStoredLocation(toCopy.storedLocation);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            setGroupList(toCopy.groupList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return CollectionUtil"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "souless94"
        },
        "content": "                .isAnyNonNull(name, phone, email, address, tags, storedLocation);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "souless94"
        },
        "content": "        public void setStoredLocation(String storedLocation) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "souless94"
        },
        "content": "            this.storedLocation \u003d storedLocation;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "souless94"
        },
        "content": "        public Optional\u003cString\u003e getStoredLocation() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return Optional.ofNullable(storedLocation);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void setGroupList(List\u003cGroup\u003e groupList) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            this.groupList \u003d groupList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public Optional\u003cList\u003cGroup\u003e\u003e getGroupList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return Optional.ofNullable(groupList);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "souless94"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of {@code tags} is used"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "souless94"
        },
        "content": "         * internally."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "souless94"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "souless94"
        },
        "content": "         * modification is attempted. Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags))"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "souless94"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 35,
      "Happytreat": 24,
      "-": 204
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditGroupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.UniqueList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "//@@author Happytreat"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Edits the details of an existing group in the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class EditGroupCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_group\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"eg\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"by the name of group. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"Parameters: Current name\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NEW NAME]\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"PHONE]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" MyGroup \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + PREFIX_NAME + \"Family \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + PREFIX_DESCRIPTION + \"A family group\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_EDIT_GROUP_SUCCESS \u003d \"Edited Group: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"This group already exists in the address book.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final Name oldName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final EditGroupDescriptor editGroupDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @param oldName of the group in the filtered group list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @param editGroupDescriptor details to edit the person with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public EditGroupCommand(Name oldName, EditGroupDescriptor editGroupDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(oldName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(editGroupDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.oldName \u003d oldName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.editGroupDescriptor \u003d new EditGroupDescriptor(editGroupDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group groupToBeEdited \u003d CommandUtil.retrieveGroupFromName(model, oldName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group editedGroup \u003d createEditedGroup(groupToBeEdited, editGroupDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!groupToBeEdited.isSame(editedGroup) \u0026\u0026 model.has(editedGroup)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        for (Person person : editedGroup.getGroupMembers()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            CommandUtil.replaceGroupInPerson(model, person, groupToBeEdited, editedGroup);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.update(groupToBeEdited, editedGroup);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_GROUP_SUCCESS, editedGroup));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Creates and returns a {@code Group} with the details of {@code groupToBeEdited}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * edited with {@code editGroupDescriptor}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private static Group createEditedGroup(Group groupToBeEdited, EditGroupDescriptor editGroupDescriptor) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assert groupToBeEdited !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Name updatedName \u003d editGroupDescriptor.getName().orElse(groupToBeEdited.getName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String updatedDescription \u003d editGroupDescriptor.getDescription().orElse(groupToBeEdited.getDescription());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        UniqueList\u003cPerson\u003e newGroupMembers \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        List\u003cPerson\u003e memberList \u003d editGroupDescriptor.getGroupMembers().orElse(groupToBeEdited.getGroupMembers());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        newGroupMembers.setElements(memberList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new Group(updatedName, updatedDescription, newGroupMembers);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!(other instanceof EditGroupCommand)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // state check - to change TO DO"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand e \u003d (EditGroupCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return oldName.equals(e.oldName)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                \u0026\u0026 editGroupDescriptor.equals(e.editGroupDescriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Stores the details to edit the group with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * corresponding field value of the group."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static class EditGroupDescriptor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        private List\u003cPerson\u003e memberList;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public EditGroupDescriptor() {}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public EditGroupDescriptor(EditGroupDescriptor toCopy) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (toCopy.getName().isPresent()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                setName(toCopy.name);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (toCopy.getDescription().isPresent()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                setDescription(toCopy.description);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (toCopy.getGroupMembers().isPresent()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                setGroupMembers(toCopy.memberList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, description);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void setDescription(String description) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void setGroupMembers(List\u003cPerson\u003e memberList) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            this.memberList \u003d memberList;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public Optional\u003cList\u003cPerson\u003e\u003e getGroupMembers() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return Optional.ofNullable(memberList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (!(other instanceof EditGroupDescriptor)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            EditGroupDescriptor e \u003d (EditGroupDescriptor) other;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    \u0026\u0026 getGroupMembers().equals(e.getGroupMembers());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 196
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditTimetableCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static java.util.Objects.isNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.UniqueList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": " * edits a particular cell in timetable of a person"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class EditTimetableCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_timetable\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"et\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "        COMMAND_WORD + \": edit timetable for the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"by the index number used in the displayed person list.\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"if no details is entered, make the details blank \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"for the timeslot in the timetable\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \" \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"Parameters : INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + PREFIX_DAY + \"DAY\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + PREFIX_TIMING + \"TIMING \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + PREFIX_DETAILS + \"DETAILS \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + PREFIX_DAY + \"Wednesday \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + PREFIX_TIMING + \"1700 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"[\" + PREFIX_DETAILS + \"]\" + \"do cs2103\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_EDIT_TIMETABLE_SUCCESS \u003d \"timetable edited successfully\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final String timing;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final String details;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public EditTimetableCommand(Index index, String day, String timing, String details) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToEdit \u003d CommandUtil.retrievePersonFromIndex(model, index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String filePath \u003d personToEdit.getStoredLocation();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Timetable timetable \u003d new Timetable(filePath,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "souless94"
        },
        "content": "            personToEdit.getTimetable().getTimetableDataString(), 3, day, timing, details);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person updatedPerson \u003d createUpdatedPerson(personToEdit, timetable, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "souless94"
        },
        "content": "        for (Group group : personToEdit.getGroups()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "souless94"
        },
        "content": "            CommandUtil.replacePersonInGroup(model, group, personToEdit, updatedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "souless94"
        },
        "content": "        model.update(personToEdit, updatedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "souless94"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "souless94"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TIMETABLE_SUCCESS, updatedPerson));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * it updates the timetableData of the person. Creates and returns a {@code Person} with the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * details of {@code personToEdit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static Person createUpdatedPerson(Person personToEdit, Timetable timetable,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Name updatedName \u003d personToEdit.getName();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Phone updatedPhone \u003d personToEdit.getPhone();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Email updatedEmail \u003d personToEdit.getEmail();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Address updatedAddress \u003d personToEdit.getAddress();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String storedLocation \u003d filePath;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String timetableString \u003d timetable.getTimetableDataString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "souless94"
        },
        "content": "        UniqueList\u003cGroup\u003e uniqueGroupList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "souless94"
        },
        "content": "        uniqueGroupList.setElements(personToEdit.getGroups());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "souless94"
        },
        "content": "            uniqueGroupList, storedLocation, timetableString);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (day \u003d\u003d null \u0026\u0026 timing \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "souless94"
        },
        "content": "                || (other instanceof EditTimetableCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "souless94"
        },
        "content": "                \u0026\u0026 index.equals(((EditTimetableCommand) other).index))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "souless94"
        },
        "content": "                \u0026\u0026 isNull(((EditTimetableCommand) other).day)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "souless94"
        },
        "content": "                \u0026\u0026 isNull(((EditTimetableCommand) other).timing)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "souless94"
        },
        "content": "                \u0026\u0026 details.equals(((EditTimetableCommand) other).details);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "souless94"
        },
        "content": "            || (other instanceof EditTimetableCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "souless94"
        },
        "content": "            \u0026\u0026 index.equals(((EditTimetableCommand) other).index))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "souless94"
        },
        "content": "            \u0026\u0026 day.equals(((EditTimetableCommand) other).day)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "souless94"
        },
        "content": "            \u0026\u0026 timing.equals(((EditTimetableCommand) other).timing)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "souless94"
        },
        "content": "            \u0026\u0026 details.equals(((EditTimetableCommand) other).details);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 124,
      "Happytreat": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all person in the address book \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"(Prefix Search/ Case-Insensitive) and displays them as a list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"alex \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"99272758 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"charlotte@example.com \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"Tampines \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends family\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/alex bernice e/lidavid@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public final List\u003cString\u003e nameKeywords;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public final List\u003cString\u003e phoneKeywords;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public final List\u003cString\u003e addressKeywords;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public final List\u003cString\u003e emailKeywords;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public final List\u003cString\u003e tagKeywords;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(List\u003cString\u003e nameKeywords, List\u003cString\u003e phoneKeywords, List\u003cString\u003e addressKeywords,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                       List\u003cString\u003e emailKeywords, List\u003cString\u003e tagKeywords) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nameKeywords \u003d nameKeywords;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phoneKeywords \u003d phoneKeywords;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressKeywords \u003d addressKeywords;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailKeywords \u003d emailKeywords;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagKeywords \u003d tagKeywords;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                nameKeywords, addressKeywords, phoneKeywords, emailKeywords, tagKeywords, \"all\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 nameKeywords.equals(((FindCommand) other).nameKeywords) // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 phoneKeywords.equals(((FindCommand) other).phoneKeywords)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressKeywords.equals(((FindCommand) other).addressKeywords)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 emailKeywords.equals(((FindCommand) other).emailKeywords)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagKeywords.equals(((FindCommand) other).tagKeywords));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 2,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindGroupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class FindGroupCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find_group\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"fg\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all groups whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" family\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final NameContainsKeywordsPredicate\u003cGroup\u003e predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public FindGroupCommand(NameContainsKeywordsPredicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.updateFilteredGroupList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                String.format(Messages.MESSAGE_GROUPS_LISTED_OVERVIEW, model.getFilteredGroupList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                || (other instanceof FindGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindGroupCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Lists all persons and groups in the address book to the user if no further parameter given."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Lists all groups that a person is enrolled in if index of person is inputted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * #TODO: Edit User Guide list function"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons and groups.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private static final String MESSAGE_SUCCESS_LIST_GROUPS \u003d \"Listed all groups the person is in.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private Index index \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public ListCommand() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public ListCommand(Index index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (index \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            model.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Person personListed \u003d model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Predicate\u003cPerson\u003e predicateShowPerson \u003d person -\u003e person \u003d\u003d personListed;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Predicate\u003cGroup\u003e predicateShowGroups \u003d group -\u003e personListed.getGroups().contains(group);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            model.updateFilteredPersonList(predicateShowPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            model.updateFilteredGroupList(predicateShowGroups);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_LIST_GROUPS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 36,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.model.person.Accounts;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.storage.UserAccountStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "//@@author aspiringdevslog"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": " * Creates a user for address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "public class LoginCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Login successful!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private static boolean loginIsSuccessful \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    //TODO: update MESSAGE_USAGE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        COMMAND_WORD + \": Login to NUS Hangs to access various features. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            + PREFIX_USERNAME + \"username \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            + PREFIX_PASSWORD + \"password \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private static final String MESSAGE_FAILURE \u003d \"Login failed! \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        + \"Please check your username and/or password.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    //TODO: throw exception message"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * Login"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public LoginCommand(Accounts account) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        if (!UserAccountStorage.checkDuplicateUser(account.getUsername())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            loginIsSuccessful \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        } else if (UserAccountStorage.checkPasswordMatch(account.getUsername(), account.getPassword())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            loginIsSuccessful \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            AddressBookParser.updateLoggedOnStatus(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            loginIsSuccessful \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        if (loginIsSuccessful \u003d\u003d true) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_FAILURE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public boolean getLoginIsSuccessful() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        return loginIsSuccessful;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RegisterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.UniqueList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.exceptions.DuplicateElementException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Adds an existing person to an existing group in the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class RegisterCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"register\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add an existing person to a group \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"[\" + PREFIX_NAME + \" GROUP NAME]\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + PREFIX_NAME + \"Family \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MISSING_GROUP_NAME \u003d \"Please enter group name.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private static final String MESSAGE_EDIT_GROUP_SUCCESS \u003d \"Added member to group: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the group.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final Name groupName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @param groupName of the group in the filtered group list to edit"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @param index of the person to be added to the group."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public RegisterCommand(Name groupName, Index index) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(groupName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group groupToBeEdited \u003d CommandUtil.retrieveGroupFromName(model, groupName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person personToAdd \u003d CommandUtil.retrievePersonFromIndex(model, index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Pair pair \u003d addMemberToGroup(groupToBeEdited, personToAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Group editedGroup \u003d (Group) pair.getKey();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Person updatedPersonToAdd \u003d (Person) pair.getValue();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            model.update(groupToBeEdited, editedGroup);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            model.update(personToAdd, updatedPersonToAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            model.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_GROUP_SUCCESS, updatedPersonToAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        } catch (DuplicateElementException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Creates and returns a {@code group} with a new member {@code personToAdd}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * in {@code groupToBeEdited}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Adds {@code groupToBeEdited} into the list of groups inside {@code personToAdd}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Returns the updated group and updated person."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private static Pair\u003cGroup, Person\u003e addMemberToGroup(Group groupToBeEdited, Person personToAdd)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throws DuplicateElementException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assert groupToBeEdited !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        List\u003cGroup\u003e groupList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groupList.add(groupToBeEdited);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groupList.addAll(personToAdd.getGroups());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        personToAdd.setGroups(groupList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        UniqueList\u003cPerson\u003e newGroupMembers \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        newGroupMembers.setElements(groupToBeEdited.getGroupMembers());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        newGroupMembers.add(personToAdd);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group newGroup \u003d new Group(groupToBeEdited.getName(), groupToBeEdited.getDescription(), newGroupMembers);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new Pair(newGroup, personToAdd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!(other instanceof RegisterCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        RegisterCommand e \u003d (RegisterCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return groupName.equals(e.groupName)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                \u0026\u0026 index.equals(e.index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewGroupAllAvailableTimeslotCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all time slots at which everyone is available"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewGroupAllAvailableTimeslotCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view_slots_all\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"va\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": View the time slots of a group \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"where everyone is available at\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \" GROUP NAME]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"Family \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all time slots which everyone is available at:\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name groupName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param groupName of the group to find the available timeslots of its members"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewGroupAllAvailableTimeslotCommand(Name groupName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(groupName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Group group \u003d CommandUtil.retrieveGroupFromName(model, groupName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + group.listAllAvailableTimeslots());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 2,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewGroupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Lists all members of the group entered to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class ViewGroupCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view_group\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"vg\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": View group members of a group\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"[\" + PREFIX_NAME + \" GROUP NAME]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            + PREFIX_NAME + \"Family \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all members:\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final Name groupName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @param groupName of the group to list its members"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public ViewGroupCommand(Name groupName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(groupName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group group \u003d CommandUtil.retrieveGroupFromName(model, groupName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Predicate\u003cPerson\u003e predicateShowAllGroupMembers \u003d person -\u003e group.getGroupMembers().contains(person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Predicate\u003cGroup\u003e predicateShowGroupOnly \u003d g -\u003e group.equals(g);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.updateFilteredGroupList(predicateShowGroupOnly);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.updateFilteredPersonList(predicateShowAllGroupMembers);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!(other instanceof ViewGroupCommand)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ViewGroupCommand e \u003d (ViewGroupCommand) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return groupName.equals(e.groupName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewGroupRankedAvailableTimeslotCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all time slots in descending order in terms of availablility"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewGroupRankedAvailableTimeslotCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view_slots_ranked\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String ALIAS \u003d \"vr\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": View the time slots of a group in descending order \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"in terms of availability\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \" GROUP NAME]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"Family \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all time slots in descending order of availability:\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name groupName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param groupName of the group to find the available timeslots of its members"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewGroupRankedAvailableTimeslotCommand(Name groupName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(groupName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Group group \u003d CommandUtil.retrieveGroupFromName(model, groupName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + group.listRankedAvailableTimeslots());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 2,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand and returns an"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "            ArgumentTokenizer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "                .tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).orElse(\"\u003cno input\u003e\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).orElse(\"\u003cno input\u003e\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).orElse(\"\u003cno input\u003e\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList, null,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "            null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 14,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddGroupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Parses input arguments and creates a new AddGroupCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class AddGroupCommandParser implements Parser\u003cAddGroupCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddGroupCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * and returns an AddGroupCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public AddGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).orElse(\"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group group \u003d new Group(name, description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new AddGroupCommand(group);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Happytreat": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTimetableCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.AddTimetableCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": " * Parses input arguments and creates a new AddTimetableCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class AddTimetableCommandParser implements Parser\u003cAddTimetableCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTimetableCommand and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * returns an AddTimetableCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public AddTimetableCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "            ArgumentTokenizer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "                .tokenize(args, PREFIX_FILE_LOCATION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String newFilePath \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTimetableCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "                pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FILE_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "            newFilePath \u003d ParserUtil"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "                .parseLocation(argMultimap.getValue(PREFIX_FILE_LOCATION).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return new AddTimetableCommand(index, newFilePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_USER_ALREADY_LOGGED_IN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_USER_NOT_LOGGED_IN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddTimetableCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CreateCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.DeleteMemberCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteTimetableCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DownloadTimetableCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.EditTimetableCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindGroupCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ViewGroupAllAvailableTimeslotCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ViewGroupCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ViewGroupRankedAvailableTimeslotCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private static boolean userIsLoggedOn \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public AddressBookParser(boolean setLoggedOn) { // for test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.userIsLoggedOn \u003d setLoggedOn;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public AddressBookParser() { // default constructor"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static void updateLoggedOnStatus(boolean status) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        userIsLoggedOn \u003d status;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        if (userIsLoggedOn) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case AddTimetableCommand.ALIAS:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "            case AddTimetableCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "souless94"
        },
        "content": "                return new AddTimetableCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case DeleteTimetableCommand.ALIAS:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "souless94"
        },
        "content": "            case DeleteTimetableCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "souless94"
        },
        "content": "                return new DeleteTimetableCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case DownloadTimetableCommand.ALIAS:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "souless94"
        },
        "content": "            case DownloadTimetableCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "souless94"
        },
        "content": "                return new DownloadTimetableCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case EditTimetableCommand.ALIAS:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            case EditTimetableCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "                return new EditTimetableCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case AddCommand.ALIAS:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case EditCommand.ALIAS:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case DeleteCommand.ALIAS:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case AddGroupCommand.ALIAS:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case AddGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                return new AddGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case DeleteMemberCommand.ALIAS:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            case DeleteMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteMemberCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case DeleteGroupCommand.ALIAS:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case DeleteGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                return new DeleteGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case EditGroupCommand.ALIAS:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case EditGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                return new EditGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case FindGroupCommand.ALIAS:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case FindGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                return new FindGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case ViewGroupCommand.ALIAS:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case ViewGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                return new ViewGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case RegisterCommand.ALIAS:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case RegisterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                return new RegisterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case ViewGroupRankedAvailableTimeslotCommand.ALIAS:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            case ViewGroupRankedAvailableTimeslotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ViewGroupRankedAvailableTimeslotCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case ViewGroupAllAvailableTimeslotCommand.ALIAS:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            case ViewGroupAllAvailableTimeslotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ViewGroupAllAvailableTimeslotCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HistoryCommand();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                return new UndoCommand();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            case ListCommand.ALIAS:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "                return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                return new RedoCommand();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            case CreateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "                return new CreateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "                throw new ParseException(MESSAGE_USER_ALREADY_LOGGED_IN);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "                return new UndoCommand();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "                return new RedoCommand();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            case CreateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "                return new CreateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "                return new LoginCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "                throw new ParseException(MESSAGE_USER_NOT_LOGGED_IN);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 53,
      "souless94": 10,
      "Happytreat": 30,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": " * Stores mapping of prefixes to their respective arguments. Each key may be associated with"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": " * multiple argument values. Values for a given key are stored in a list, and the insertion ordering"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": " * is maintained. Keys are unique, but the list of argument values may contain duplicate argument"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": " * values, i.e. the same argument value can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map. If the map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * previously contained a mapping for the key, the new value is appended to the list of existing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Returns all values of {@code prefix}. If the prefix does not exist or has no values, this"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * will return an empty list. Modifying the returned list will not affect the underlying data"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * spaces."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 15,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pw/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final Prefix PREFIX_FILE_LOCATION \u003d new Prefix(\"fl/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final Prefix PREFIX_DAY \u003d new Prefix(\"day/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final Prefix PREFIX_TIMING \u003d new Prefix(\"timing/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final Prefix PREFIX_DETAILS \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 3,
      "souless94": 6,
      "Happytreat": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CreateCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.logic.commands.CreateCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.model.person.Accounts;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "//@@author aspiringdevslog"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": " * Parses input arguments and creates a new CreateCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "public class CreateCommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * and returns an CreateCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public CreateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        String username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        String password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        Accounts account \u003d new Accounts(username, password);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        return new CreateCommand(account);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteGroupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Parses input arguments and creates a new CreateGroupCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class DeleteGroupCommandParser implements Parser\u003cDeleteGroupCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateGroupCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * and returns an CreateGroupCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public DeleteGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group group \u003d new Group(name, \"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new DeleteGroupCommand(group);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteMemberCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.DeleteMemberCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Parses input arguments and creates a new DeleteMemberCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class DeleteMemberCommandParser implements Parser\u003cDeleteMemberCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RegisterCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * and returns an RegisterCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public DeleteMemberCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Name groupName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    DeleteMemberCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            groupName \u003d (ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    DeleteMemberCommand.MISSING_GROUP_NAME));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new DeleteMemberCommand(groupName, index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteTimetableCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.DeleteTimetableCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": " * Parses input arguments and creates a new DeleteTimetableCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class DeleteTimetableCommandParser implements Parser\u003cDeleteTimetableCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTimetableCommand and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * returns an DeleteTimetableCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public DeleteTimetableCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return new DeleteTimetableCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTimetableCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "                pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DownloadTimetableCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.DownloadTimetableCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": " * Parses input arguments and creates a new DownloadTimetableCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class DownloadTimetableCommandParser implements Parser\u003cDownloadTimetableCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DownloadTimetableCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * and returns an DownloadTimetableCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public DownloadTimetableCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    .format(MESSAGE_INVALID_COMMAND_FORMAT, DownloadTimetableCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "                pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return new DownloadTimetableCommand(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand and returns an"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "            ArgumentTokenizer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "                .tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    PREFIX_FILE_LOCATION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "            editPersonDescriptor"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "                .setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "            editPersonDescriptor"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "                .setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "            editPersonDescriptor"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "                .setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "            editPersonDescriptor"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "                .setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FILE_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": "            editPersonDescriptor"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": "                .setStoredLocation("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    ParserUtil.parseLocation(argMultimap.getValue(PREFIX_FILE_LOCATION).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "souless94"
        },
        "content": "            tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 26,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditGroupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand.EditGroupDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "//@@author Happytreat"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Parses input arguments and creates a new EditGroupCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class EditGroupCommandParser implements Parser\u003cEditGroupCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditGroupCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * and returns an EditGroupCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public EditGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Name oldName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            oldName \u003d ParserUtil.parseName(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditGroupCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupDescriptor editGroupDescriptor \u003d new EditGroupDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            editGroupDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            editGroupDescriptor.setDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!editGroupDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new ParseException(EditGroupCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new EditGroupCommand(oldName, editGroupDescriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditTimetableCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.EditTimetableCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": " * Parses input arguments and creates a new EditTimetableCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class EditTimetableCommandParser implements Parser\u003cEditTimetableCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTimetableCommand and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * returns an EditTimetableCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public EditTimetableCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "            ArgumentTokenizer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "                .tokenize(args, PREFIX_DAY, PREFIX_TIMING, PREFIX_DETAILS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTimetableCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "                pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DAY, PREFIX_TIMING)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTimetableCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "        ParserUtil.checkBothDayAndTiming(argMultimap.getValue(PREFIX_DAY).get(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "            argMultimap.getValue(PREFIX_TIMING).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String day \u003d ParserUtil.parseDay(argMultimap.getValue(PREFIX_DAY).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String timing \u003d ParserUtil.parseTiming(argMultimap.getValue(PREFIX_TIMING).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String details \u003d \" \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DETAILS).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "            details \u003d ParserUtil.parseDetails(argMultimap.getValue(PREFIX_DETAILS).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return new EditTimetableCommand(index, day, timing, details);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindGroupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.FindGroupCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Parses input arguments and creates a new FindGroupCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class FindGroupCommandParser implements Parser\u003cFindGroupCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * and returns an FindGroupCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public FindGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new FindGroupCommand(new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(trimmedArgs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                return new ListCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX, pe));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Happytreat": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LoginCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.model.person.Accounts;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "//@@author aspiringdevslog"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "public class LoginCommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * and returns an CreateCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public LoginCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        String username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        String password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        Accounts account \u003d new Accounts(username, password);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        return new LoginCommand(account);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FILE_EXTENSION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_IS_FILE_DIRECTORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "import org.apache.commons.io.FilenameUtils;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "import org.apache.commons.lang3.ArrayUtils;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.timetable.TimetableData;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * whitespaces will be trimmed. Parses {@code oneBasedIndex} into an {@code Index} and returns"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * it. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * will be trimmed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    //TODO: need to implement exceptions"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static String parseUsername(String username) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        String trimmedName \u003d username.trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    //TODO: need to implement exceptions"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static String parsePassword(String password) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        String trimmedName \u003d password.trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses a {@code String location} into an {@code String location}. Leading and trailing"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static String parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "souless94"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String fileExtension \u003d FilenameUtils.getExtension(trimmedLocation);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (\"csv\".equals(fileExtension)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "souless94"
        },
        "content": "            File timetable \u003d new File(trimmedLocation);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "souless94"
        },
        "content": "            if (timetable.isDirectory()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "souless94"
        },
        "content": "                throw new ParseException(MESSAGE_IS_FILE_DIRECTORY);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_FILE_EXTENSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetable \u003d new File(trimmedLocation);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return timetable.getAbsolutePath().replace(\"\\\\\", \"/\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses a {@code String day} into an {@code String day}. Leading and trailing whitespaces will"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * be trimmed. checks if day is any of the days in a week."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @throws ParseException if the given {@code day} is invalid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static String parseDay(String day) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "souless94"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String trimmedDay \u003d day.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String[] validDays \u003d new TimetableData(null, null, 1, null, null, null)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .getDaysInLowerCase();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (ArrayUtils.contains(validDays, trimmedDay.toLowerCase())) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return trimmedDay;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_DAY);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses a {@code String timing} into an {@code String timing}. Leading and trailing"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * whitespaces will be trimmed. checks if timings are in 24h format and is from 0800 to 2300."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @throws ParseException if the given {@code timing} is invalid."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static String parseTiming(String timing) throws ParseException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "souless94"
        },
        "content": "        requireNonNull(timing);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String trimmedTiming \u003d timing.trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String[] validTiming \u003d new TimetableData(null, null, 1, null, null, null)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .getTimings();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (ArrayUtils.contains(validTiming, trimmedTiming)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return trimmedTiming;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_TIMING);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses a {@code String details} into an {@code String details}. Leading and trailing"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @throws ParseException if the given {@code details} is invalid."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static String parseDetails(String details) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "souless94"
        },
        "content": "        requireNonNull(details);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses {@code String timing,String day} Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * checks if timings are in 24h format and is from 0800 to 2300 and checks if day is any of the"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * days in a week."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @throws ParseException if the given {@code timing} is invalid."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static void checkBothDayAndTiming(String day, String timing) throws ParseException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String trimmedDay \u003d day.trim();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String[] validDays \u003d new TimetableData(null, null, 1, null, null, null)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .getDaysInLowerCase();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String trimmedTiming \u003d timing.trim();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String[] validTiming \u003d new TimetableData(null, null, 1, null, null, null)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .getTimings();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (!ArrayUtils.contains(validDays, trimmedDay.toLowerCase())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "souless94"
        },
        "content": "            \u0026\u0026 !ArrayUtils.contains(validTiming, trimmedTiming)) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_DAY_AND_TIMING);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 23,
      "souless94": 109,
      "-": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RegisterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Parses input arguments and creates a new RegisterCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class RegisterCommandParser implements Parser\u003cRegisterCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RegisterCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * and returns an RegisterCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public RegisterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Name groupName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    RegisterCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            groupName \u003d (ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    RegisterCommand.MISSING_GROUP_NAME));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new RegisterCommand(groupName, index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewGroupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.ViewGroupCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Parses input arguments and creates a new ViewGroupCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class ViewGroupCommandParser implements Parser\u003cViewGroupCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewGroupCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * and returns an ViewGroupCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public ViewGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new ViewGroupCommand(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/security/Encrypt.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "package seedu.address.logic.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import com.google.common.hash.Hashing;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "//@@author aspiringdevslog"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": " * Encrypts data before saving"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "public class Encrypt {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * Encrypts a given string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static String encryptString(String plainString) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        String encryptedString \u003d Hashing.sha256()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            .hashString(plainString, StandardCharsets.UTF_8)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "            .toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        return encryptedString;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static String decryptString(String encryptedString) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        return encryptedString.replace(\"encrypt123456\", \"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": " * Wraps all data at the address-book level Duplicates are not allowed (by .isSamePerson"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": " * comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final UniqueList\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final UniqueList\u003cGroup\u003e groups;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        persons \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groups \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    //@@author Happytreat"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}. {@code key} must exist in the address"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void remove(Entity key) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (key instanceof Group) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            groups.remove((Group) key);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        } else if (key instanceof Person) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            persons.remove((Person) key);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Adds {@code key} from this {@code AddressBook}. {@code key} must exist in the address"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void add(Entity key) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (key instanceof Group) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            groups.add((Group) key);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        } else if (key instanceof Person) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            persons.add((Person) key);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Returns true if an entity with the same identity as {@code key} exists in the address"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean has(Entity key) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(key);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (key instanceof Group) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return groups.contains((Group) key);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        } else if (key instanceof Person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return persons.contains((Person) key);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Replaces the given entity {@code target} in the list with {@code edited}. {@code"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * target} must exist in the address book. The identity of {@code edited} must not"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * be the same as another existing entity in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void update(Entity target, Entity edited) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(edited);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (target instanceof Group \u0026\u0026 edited instanceof Group) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            groups.setElement((Group) target, (Group) edited);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        } else if (target instanceof Person \u0026\u0026 edited instanceof Person) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            persons.setElement((Person) target, (Person) edited);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Replaces the contents of the group list with {@code group}. {@code groups} must not contain"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * duplicate group."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.groups.setElements(groups);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}. {@code persons} must not"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * contain duplicate persons."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.persons.setElements(persons);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        setGroups(newData.getGroupList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                + \"and \" + groups.asUnmodifiableObservableList().size() + \"groups\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return groups.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 6,
      "Happytreat": 119,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Entity.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "//@@author Happytreat"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * API for entity in Model such as Person and Group."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public abstract class Entity {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**Returns true if both entity has the same identity fields.*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public abstract boolean isSame(Object other);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    Predicate\u003cGroup\u003e PREDICATE_SHOW_ALL_GROUPS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Deletes the given Entity which must exist in the address book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Uses Polymorphism to determine which method to call"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void delete(Entity target);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Adds the given Entity which must not have existed in the address book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Uses Polymorphism to determine which method to call"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void add(Entity target);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Return true if an Entity as the same identity exists in the address book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Uses Polymorphism to determine which method to call"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean has(Entity target);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Updates the given Entity which must exist in the address book."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Uses Polymorphism to determine which method to call"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void update(Entity target, Entity edited);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /** Returns an unmodifiable view of the filtered group list */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    ObservableList\u003cGroup\u003e getFilteredGroupList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Updates the filter of the filtered group list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 25,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "//@@author Happytreat"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Uses Polymorphism Uses Polymorphism to determine which method to call"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final FilteredList\u003cGroup\u003e filteredGroups;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        logger.fine("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            \"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        filteredGroups \u003d new FilteredList\u003c\u003e(versionedAddressBook.getGroupList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void delete(Entity target) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        versionedAddressBook.remove(target);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void add(Entity target) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        versionedAddressBook.add(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        //updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean has(Entity target) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return versionedAddressBook.has(target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void update(Entity target, Entity edited) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        versionedAddressBook.update(target, edited);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person/Group List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} and {@code Group} backed by the"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * internal list of {@code versionedAddressBook}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredGroups);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        filteredGroups.setPredicate(predicate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 154,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    ObservableList\u003cGroup\u003e getGroupList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UniqueList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.exceptions.DuplicateElementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.exceptions.NotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "//@@author Happytreat"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * A generic list of type that extends from Entity class that enforces uniqueness between its elements"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * An element is considered unique by comparing using {@code Entity#isSame(Object)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * As such, adding and updating of elements uses Entity#isSame(Object) for equality so as to ensure that"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * the element being added or updated is unique in terms of identity in the UniqueList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * However, the removal of a element uses equal function"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * to ensure that the element with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * @see Entity#isSame(Object)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class UniqueList\u003cT extends Entity\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public UniqueList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Returns true if the list contains an equivalent element as the given argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSame);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new DuplicateElementException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setElement(T target, T edited) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new NotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!target.isSame(edited) \u0026\u0026 contains(edited)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new DuplicateElementException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        internalList.set(index, edited);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new NotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setElements(UniqueList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Replaces the contents of this list with {@code T}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * {@code T} must not contain duplicate elements."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setElements(List\u003cT\u003e elements) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireAllNonNull(elements);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!elementsAreUnique(elements)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new DuplicateElementException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        internalList.setAll(elements);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                || (other instanceof UniqueList// instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueList) other).internalList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Returns true if {@code T} contains only unique elements."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private boolean elementsAreUnique(List\u003cT\u003e elements) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        for (int i \u003d 0; i \u003c elements.size() - 1; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            for (int j \u003d i + 1; j \u003c elements.size(); j++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                if (elements.get(i).isSame(elements.get(j))) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Happytreat": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/model/accounts/Accounts.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": " * Represents an account"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "public class Accounts {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public Accounts(String username, String password) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        requireAllNonNull(username, password);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public void setUsername(String inputUsername) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        this.username \u003d inputUsername;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public void setPassword(String inputPassword) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        this.password \u003d inputPassword;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/DuplicateElementException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Signals that the operation will result in duplicate element (Elements are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class DuplicateElementException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public DuplicateElementException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        super(\"Operation would result in duplicate elements\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/NotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Signals that the operation is unable to find the specified element."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class NotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/Group.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Entity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.UniqueList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "//@@author Happytreat"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Represents a Group in the address book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Guarantees: Field values are validated, immutable."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class Group extends Entity {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_GROUP_NO_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            \"No group description has been inputted.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**Groups must have unique names.*/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private UniqueList\u003cPerson\u003e groupMembers;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public Group(Name name, String description) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireAllNonNull(name, description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groupMembers \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public Group(Name name, String description, UniqueList\u003cPerson\u003e groupMembers) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        requireAllNonNull(name, description, groupMembers);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.groupMembers \u003d groupMembers;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return MESSAGE_GROUP_NO_DESCRIPTION;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public ObservableList\u003cPerson\u003e getGroupMembers() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return groupMembers.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Returns all member of a group as a String."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public String printMembers() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Iterator\u003cPerson\u003e itr \u003d groupMembers.iterator();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        while (itr.hasNext()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            builder.append(count).append(\". \").append(itr.next().getName().fullName).append(\"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            count +\u003d 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Returns the string representation of the integer variable \"day\" used in listAvailableTimeslots"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * and listRankedAvailableTimeslots"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private String dayToString(int day) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return \"Monday\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return \"Tuesday\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return \"Wednesday\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return \"Thursday\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return \"Friday\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return \"Saturday\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        case 7:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return \"Sunday\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return \"Invalid day\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Returns all time slots where everyone among the group is available at as a String"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * in ascending order in terms of timing"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public String listAllAvailableTimeslots() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Iterator\u003cPerson\u003e personItr \u003d groupMembers.iterator();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        TreeSet\u003cInteger\u003e availableSlots \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        boolean isFirstPerson \u003d true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        while (personItr.hasNext()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Person currPerson \u003d personItr.next();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            boolean[][] isFree \u003d currPerson.getTimetable().getTimetable().getBooleanTimetableData();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (isFirstPerson) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    for (int j \u003d 1; j \u003c\u003d 16; j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                        if (isFree[i][j]) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                            availableSlots.add(i * 100 + j);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                isFirstPerson \u003d false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    for (int j \u003d 1; j \u003c\u003d 16; j++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                        int currTimeslot \u003d i * 100 + j;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                        if (availableSlots.contains(currTimeslot) \u0026\u0026 !isFree[i][j]) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                            availableSlots.remove(currTimeslot);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Iterator\u003cInteger\u003e slotsItr \u003d availableSlots.iterator();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        while (slotsItr.hasNext()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            int currTimeslot2 \u003d slotsItr.next();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            int day \u003d currTimeslot2 / 100;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            int timing \u003d (currTimeslot2 % 100 + 7) * 100;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            builder.append(\"Day: \");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            builder.append(dayToString(day));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            builder.append(\" \").append(\"Time: \").append(Integer.toString(timing)).append(\"\\n\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Returns the time slots among the group as a String in descending order with respect to number of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * people available and then ascending order in terms of timing"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public String listRankedAvailableTimeslots() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Iterator\u003cPerson\u003e personItr \u003d groupMembers.iterator();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        TreeMap\u003cInteger, Integer\u003e availableSlots \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        while (personItr.hasNext()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Person currPerson \u003d personItr.next();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            boolean[][] isFree \u003d currPerson.getTimetable().getTimetable().getBooleanTimetableData();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                for (int j \u003d 1; j \u003c\u003d 16; j++) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    if (isFree[i][j]) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                        int slot \u003d i * 100 + j;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                        if (availableSlots.containsKey(slot)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                            int count \u003d availableSlots.get(slot) + 1;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                            availableSlots.put(slot, count);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                            availableSlots.put(slot, 1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Map\u003cInteger, Integer\u003e sortedSlots \u003d availableSlots.entrySet().stream()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                                                          .sorted(Collections.reverseOrder"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                                                                  (Comparator.comparing(Entry::getValue)))"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                                                          .collect(Collectors.toMap(Entry::getKey, Entry::getValue, ("
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                                                                  e1, e2) -\u003e e1, LinkedHashMap::new));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        int prev \u003d 0;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        for (Integer key : sortedSlots.keySet()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            int currTimeslot \u003d key;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            int day \u003d currTimeslot / 100;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            int timing \u003d (currTimeslot % 100 + 7) * 100;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            int availablePersons \u003d sortedSlots.get(key);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (availablePersons !\u003d prev) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                builder.append(\"Number of people available: \" + availablePersons + \"\\n\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                prev \u003d availablePersons;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            builder.append(\"Day: \");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            builder.append(dayToString(day));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            builder.append(\" \").append(\"Time: \").append(Integer.toString(timing)).append(\"\\n\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Returns true if both groups of the same name."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * For group, isSame is the same function as equals"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * since groups are uniquely identified by their names."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean isSame(Object other) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!(other instanceof Group)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group otherGroup \u003d (Group) other;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return otherGroup.getName().equals(getName());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Same as isSame because Groups are uniquely identified by their names."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * TO NOTE: Used when deleting groups."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!(other instanceof Group)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group otherGroup \u003d (Group) other;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return otherGroup.getName().equals(getName());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return Objects.hash(name, description);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                .append(\"\\nDescription: \")"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                .append(\"\\nNumber of Members: \")"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                .append(groupMembers.asUnmodifiableObservableList().size());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 250,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Entity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Tests that a {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class NameContainsKeywordsPredicate\u003cT extends Entity\u003e implements Predicate\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e nameKeywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e addressKeywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e phoneKeywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e emailKeywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e tagKeywords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String mode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mode \u003d \"name\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nameKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phoneKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e nameList, List\u003cString\u003e addressList, List\u003cString\u003e phoneList,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                                         List\u003cString\u003e emailList, List\u003cString\u003e tagList, String mode) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nameKeywords \u003d nameList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressKeywords \u003d addressList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phoneKeywords \u003d phoneList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailKeywords \u003d emailList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagKeywords \u003d tagList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean test(T element) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (element instanceof Person) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Person person \u003d (Person) element;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            switch(mode) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"name\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                return keywords.stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                        .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"address\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                return keywords.stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                        .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getAddress().value, keyword));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"phone\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                return keywords.stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                        .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"email\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                return keywords.stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                        .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"tag\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                return keywords.stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                        .anyMatch(keyword -\u003e person.getTags().contains(new Tag(keyword)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"all\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                return nameKeywords.stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                        .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                        || addressKeywords.stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                        .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getAddress().value, keyword))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                        || phoneKeywords.stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                        .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                        || emailKeywords.stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                        .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                        || tagKeywords.stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                        .anyMatch(keyword -\u003e person.getTags().contains(new Tag(keyword)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Invalid mode to \u0027NameContainsKeywordsPredicate\u0027\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (element instanceof Group) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Group group \u003d (Group) element;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(group.getName().fullName, keyword));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 14,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Entity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.UniqueList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": " * Represents a Person in the address book. Guarantees: details are present and not null, field"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * values are validated, immutable. #TODO: Remove setGroups method"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class Person extends Entity {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final Timetable timetable;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final String storedLocation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private UniqueList\u003cGroup\u003e groups;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Every field must be present and not null. creates a person with timetable Initialises groups"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * as empty list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String storedLocation, String timetableString) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.groups \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (storedLocation \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "            String location \u003d Paths.get(\"data\", \"timetable\").toAbsolutePath().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "            File directory \u003d new File(location);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "            if (!directory.exists()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "                directory.mkdirs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "            this.storedLocation \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "                location.replace(\"\\\\\", \"/\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    + \"/\" + String.valueOf(hashCode())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    + \" timetable.csv\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "            this.storedLocation \u003d storedLocation.replace(\"\\\\\", \"/\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.timetable \u003d new Timetable(this.storedLocation,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetableString, 1, null, null, null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Every field must be present and not null. creates a person with timetable."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "souless94"
        },
        "content": "        UniqueList\u003cGroup\u003e groups,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String storedLocation, String timetableString) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person temp \u003d new Person(name, phone, email, address, tags, storedLocation,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetableString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.name \u003d temp.getName();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.phone \u003d temp.getPhone();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.email \u003d temp.getEmail();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.address \u003d temp.getAddress();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.tags.addAll(temp.getTags());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.storedLocation \u003d temp.getStoredLocation();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.timetable \u003d temp.getTimetable();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.groups \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.groups.setElements(groups.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public String getStoredLocation() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return storedLocation;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public Timetable getTimetable() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public List\u003cGroup\u003e getGroups() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return groups.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setGroups(List\u003cGroup\u003e groupList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.groups \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.groups.setElements(groupList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * modification is attempted."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * the same. This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean isSame(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "souless94"
        },
        "content": "            \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .equals(getEmail()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Returns true if both persons have the same identity and data fields. This defines a stronger"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * notion of equality between two persons."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Phone: \")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getPhone())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Email: \")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getEmail())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Address: \")"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getAddress())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Tags: \");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 47,
      "Happytreat": 43,
      "-": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/timetable/Timetable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.model.person.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.math.BigInteger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.util.Base64;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.Entity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": " * Represents a timetable in the address book. Guarantees: details are present"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class Timetable extends Entity {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final String timetableString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "    // create timetable data"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final TimetableData matrix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Construct a timetable using the timetableString if option is 1 Construct a timetable using"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * the timetable csv file if option is 2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public Timetable(String filePath,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String timetableString, int option, String day, String timing, String message) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.matrix \u003d new TimetableData(this.filePath, timetableString,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "            option, day, timing, message);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.timetableString \u003d generateTimetableDataString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @return a timetable String for the ui"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public String getTimetableAsString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String timetableString \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String[][] timetableMatrix \u003d this.matrix.getTimetable();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "        for (int i \u003d 0; i \u003c matrix.getRows(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "            for (int j \u003d 0; j \u003c matrix.getColumns(); j++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "                //@@author souless94 -reused"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "                // Solution on converting string to hex string below gotten from Laurence Gonsalves"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "                // from https://stackoverflow.com/questions/923863/converting-a-string-to-hexadecimal-in-java"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "                byte[] bytes \u003d timetableMatrix[i][j].getBytes();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String data \u003d new BigInteger(bytes).toString(16);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "                //@@author"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "                if (i \u003d\u003d matrix.getRows() - 1 \u0026\u0026 j \u003d\u003d matrix.getColumns() - 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    timetableString +\u003d data;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    timetableString +\u003d data + \",\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return timetableString;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @return a timetable string for the xml storage"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public String getTimetableDataString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return this.timetableString;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Generate a timetable string for the xml storage"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public String generateTimetableDataString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String timetableDataString \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String[][] timetableMatrix \u003d this.matrix.getTimetable();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "        for (int i \u003d 0; i \u003c matrix.getRows(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": "            for (int j \u003d 0; j \u003c matrix.getColumns(); j++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "souless94"
        },
        "content": "                if (j \u003d\u003d matrix.getColumns() - 1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    timetableDataString +\u003d Base64.getEncoder()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "souless94"
        },
        "content": "                        .encodeToString(timetableMatrix[i][j].getBytes());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    timetableDataString +\u003d Base64.getEncoder()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "souless94"
        },
        "content": "                        .encodeToString(timetableMatrix[i][j].getBytes()) + \",\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "souless94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetableDataString +\u003d \"\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return timetableDataString;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public TimetableData getTimetable() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return this.matrix;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * download timetable to the given location"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void downloadTimetableAsCsv() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String filepath \u003d this.filePath;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.matrix.downloadTimetableDataAsCsv(filepath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return isCorrectSize() \u0026\u0026 hasCorrectFirstRowsAndColumns();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public boolean isCorrectSize() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return this.matrix.isCorrectSize();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public boolean hasCorrectFirstRowsAndColumns() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return this.matrix.hasCorrectFirstRowsAndColumns();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public String[][] getTimetableMatrix() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return this.matrix.getTimetable();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public boolean isSame(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (!(other instanceof Timetable)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Timetable otherTimetable \u003d (Timetable) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return otherTimetable.equals(other);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 127,
      "Happytreat": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/timetable/TimetableData.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.model.person.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.util.Base64;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": "import org.apache.commons.lang3.ArrayUtils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "import com.opencsv.CSVReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "import com.opencsv.CSVWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": " * timetable data which will process the inputs and create a timetable"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class TimetableData {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final String[][] timetable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private String[] timings \u003d {\"0800\", \"0900\", \"1000\", \"1100\", \"1200\", \"1300\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \"1400\", \"1500\", \"1600\", \"1700\", \"1800\", \"1900\", \"2000\", \"2100\", \"2200\", \"2300\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final String[] days \u003d {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \"Saturday\", \"Sunday\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final String[] daysInLowerCase \u003d {\"monday\", \"tuesday\", \"wednesday\", \"thursday\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \"friday\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \"saturday\", \"sunday\"};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final int noOfTimings \u003d timings.length;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final int noOfDays \u003d days.length;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final int noOfRows;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final int noOfColumns;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private boolean isCorrectSize;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private boolean hasCorrectFirstRowsAndColumns;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * uses format and timetableString to create a matrix uses the day and time to find the cell of"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * the matrix to input the message"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public TimetableData(String filePath, String timetableString, int option,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String day, String timing, String message) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.isCorrectSize \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.hasCorrectFirstRowsAndColumns \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.noOfRows \u003d noOfDays + 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.noOfColumns \u003d noOfTimings + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String[][] timetable;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (option \u003d\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetable \u003d getTimetableFromString(timetableString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } else if (option \u003d\u003d 2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "            String locationFrom \u003d filePath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetable \u003d getTimetableData(locationFrom);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetable \u003d getTimetableFromString(timetableString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "            int rowToChange;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "            int columnToChange;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "            rowToChange \u003d ArrayUtils.indexOf(getDaysInLowerCase(), day.toLowerCase()) + 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "            columnToChange \u003d ArrayUtils.indexOf(timings, timing) + 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetable[rowToChange][columnToChange] \u003d message;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.timetable \u003d timetable;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "        checkTimetableForCorrectRowsAndColumns();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * uses timetableString and create a timetable matrix"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private String[][] getTimetableFromString(String timetableString) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String[][] timetableMatrix \u003d createNewTimetable();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (timetableString \u003d\u003d null || timetableString.equals(\"\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return timetableMatrix;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "            String[] rows \u003d timetableString.split(\"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": "            if (rows.length \u003e getRows()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "souless94"
        },
        "content": "                this.isCorrectSize \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "souless94"
        },
        "content": "            for (int i \u003d 0; i \u003c getRows(); i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String[] decodedRows \u003d rows[i].split(\",\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "souless94"
        },
        "content": "                if (decodedRows.length !\u003d getColumns()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    this.isCorrectSize \u003d false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "souless94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "souless94"
        },
        "content": "                for (int j \u003d 0; j \u003c getColumns(); j++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    byte[] decodedString \u003d Base64.getDecoder().decode(decodedRows[j]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    decodedRows[j] \u003d new String(decodedString);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "souless94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "                timetableMatrix[i] \u003d decodedRows;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return timetableMatrix;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public String[] getTimings() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return timings;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public String[] getDaysInLowerCase() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return daysInLowerCase;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public int getRows() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return this.noOfRows;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public int getColumns() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return this.noOfColumns;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * takes in a csv file via the location of the file and read the file"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @return string matrix of timetable in its format"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public String[][] getTimetableData(String storedLocation) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String[][] timetableMatrix \u003d createNewTimetable();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File toRead \u003d new File(storedLocation);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (toRead.exists()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetableMatrix \u003d readTimetableData(storedLocation, timetableMatrix);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return timetableMatrix;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a 2D boolean matrix of a timetable"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean[][] getBooleanTimetableData() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String[][] timetableMatrix \u003d this.getTimetable();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return stringMatrixToBooleanMatrix(timetableMatrix);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * read the data from the csv file in the stored location and write it to timetable Matrix"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @return timetableMatrix with values"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private String[][] readTimetableData(String storedLocation, String[][] timetableMatrix) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // @@author souless94 -reused"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "souless94"
        },
        "content": "        //Solution below gotten from grokonez"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // from https://grokonez.com/java/java-read-write-csv-file-opencsv-example"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "souless94"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "souless94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "souless94"
        },
        "content": "            FileReader fileReader \u003d new FileReader(storedLocation);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "souless94"
        },
        "content": "            CSVReader csvReader \u003d new CSVReader(fileReader);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "souless94"
        },
        "content": "            String[] timetableRow;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "souless94"
        },
        "content": "            while ((timetableRow \u003d csvReader.readNext()) !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "souless94"
        },
        "content": "                if (timetableRow.length !\u003d getColumns()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    this.isCorrectSize \u003d false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "souless94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "souless94"
        },
        "content": "                if (i \u003e\u003d getRows()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    this.isCorrectSize \u003d false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "souless94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "souless94"
        },
        "content": "                timetableMatrix[i] \u003d timetableRow;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "souless94"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "souless94"
        },
        "content": "            csvReader.close();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "souless94"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "souless94"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return timetableMatrix;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @return initialise a string matrix"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private String[][] createNewMatrix() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String[][] matrix \u003d new String[this.getRows()][this.getColumns()];"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "souless94"
        },
        "content": "        for (int i \u003d 0; i \u003c this.getRows(); i++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "souless94"
        },
        "content": "            for (int j \u003d 0; j \u003c this.getColumns(); j++) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "souless94"
        },
        "content": "                matrix[i][j] \u003d \" \";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return matrix;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * fills the matrix with the days and timings according to format"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @return a string matrix of timetable"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private String[][] createNewTimetable() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String[][] timetable \u003d createNewMatrix();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "souless94"
        },
        "content": "        fillTimetableData(timetable);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * set first row of timetable to be timings and set first column of timetable to be days"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private void fillTimetableData(String[][] timetable) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // set first column to be days"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "souless94"
        },
        "content": "        for (int i \u003d 1; i \u003c this.getRows(); i++) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetable[i][0] \u003d days[i - 1];"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // set first row  to be timings"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "souless94"
        },
        "content": "        for (int j \u003d 1; j \u003c this.getColumns(); j++) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetable[0][j] \u003d timings[j - 1];"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * to check Timetable for correct first row and column"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private void checkTimetableForCorrectRowsAndColumns() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String[] firstRow \u003d this.timetable[0];"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (!firstRow[1].equals(timings[0])"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "souless94"
        },
        "content": "            \u0026\u0026 !firstRow[1].equals(\"800\")) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "souless94"
        },
        "content": "            this.hasCorrectFirstRowsAndColumns \u003d false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (!firstRow[2].equals(timings[1])"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "souless94"
        },
        "content": "            \u0026\u0026 !firstRow[2].equals(\"900\")) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "souless94"
        },
        "content": "            this.hasCorrectFirstRowsAndColumns \u003d false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "souless94"
        },
        "content": "        for (int i \u003d 3; i \u003c getColumns(); i++) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "souless94"
        },
        "content": "            String firstRowEntry \u003d firstRow[i];"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "souless94"
        },
        "content": "            if (!firstRowEntry.equals(timings[i - 1])) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "souless94"
        },
        "content": "                this.hasCorrectFirstRowsAndColumns \u003d false;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "souless94"
        },
        "content": "        for (int j \u003d 1; j \u003c getRows(); j++) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "souless94"
        },
        "content": "            String firstColumnEntry \u003d this.timetable[j][0];"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "souless94"
        },
        "content": "            if (!firstColumnEntry.equals(days[j - 1])) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "souless94"
        },
        "content": "                this.hasCorrectFirstRowsAndColumns \u003d false;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @return true if timetable has correct number of rows and columns"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public boolean isCorrectSize() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return this.isCorrectSize;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @return true if timetable has correct days and correct timing"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public boolean hasCorrectFirstRowsAndColumns() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return this.hasCorrectFirstRowsAndColumns;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @return a string matrix of a timetable"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public String[][] getTimetable() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.timetable;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * download timetable data as csv"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * unable to download if same filename exists"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @param locationTo location of where to save the file"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void downloadTimetableDataAsCsv(String locationTo) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // @@author souless94 -reused"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "souless94"
        },
        "content": "        //Solution below adapted from grokonez"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // from https://grokonez.com/java/java-read-write-csv-file-opencsv-example"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String filePath \u003d locationTo;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "souless94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "souless94"
        },
        "content": "            File toWrite \u003d new File(filePath);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "souless94"
        },
        "content": "            if (!toWrite.exists()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "souless94"
        },
        "content": "                toWrite.createNewFile();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "souless94"
        },
        "content": "                FileWriter writer \u003d new FileWriter(toWrite);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "souless94"
        },
        "content": "                CSVWriter csvWriter \u003d new CSVWriter(writer,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    CSVWriter.DEFAULT_SEPARATOR,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    CSVWriter.NO_QUOTE_CHARACTER,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    CSVWriter.DEFAULT_ESCAPE_CHARACTER,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    CSVWriter.DEFAULT_LINE_END);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "souless94"
        },
        "content": "                for (int i \u003d 0; i \u003c getRows(); i++) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    csvWriter.writeNext(this.timetable[i]);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "souless94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "souless94"
        },
        "content": "                csvWriter.close();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "souless94"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // @@author"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * takes in 2d string matrix and converts it into a 2d boolean matrix"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a boolean 2D array"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean[][] stringMatrixToBooleanMatrix(String[][] timetable) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean[][] booleanTimetable \u003d new boolean[this.noOfRows][this.noOfColumns];"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "souless94"
        },
        "content": "        for (int i \u003d 1; i \u003c this.noOfRows; i++) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "souless94"
        },
        "content": "            for (int j \u003d 1; j \u003c this.noOfColumns; j++) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "                if (timetable[i][j].equals(\" \")) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                    booleanTimetable[i][j] \u003d true;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                    booleanTimetable[i][j] \u003d false;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        return booleanTimetable;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 274,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "                new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "                getTagSet(\"friends\"), null, null),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "                new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), null, null),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "                new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "                getTagSet(\"neighbours\"), null, null),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "                new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "                getTagSet(\"family\"), null, null),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "                new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "                getTagSet(\"classmates\"), null, null),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": "                new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "                getTagSet(\"colleagues\"), null, null)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            sampleAb.add(samplePerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 19,
      "Happytreat": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserAccountStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.logic.security.Encrypt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "//@@author aspiringdevslog"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": " * Storage of username and passwords"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "public class UserAccountStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private static HashMap\u003cString, String\u003e userHashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public UserAccountStorage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * @param username"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * @param password"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static void addNewAccount(String username, String password) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        String encryptedPassword \u003d Encrypt.encryptString(password);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        userHashMap.put(username, encryptedPassword);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * @param username"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * @param password"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static boolean checkPasswordMatch(String username, String password) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        String encryptedPassword \u003d Encrypt.encryptString(password);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        TODO: remove this line, temporary to see output."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        System.out.print(\"Encrypted password: \" + encryptedPassword +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        \" User entered: \" + password + \" Stored in hashmap: \" + userHashMap.get(username) + \" Decrypted password: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        + Encrypt.decryptString(userHashMap.get(username)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        /* TODO: add some sort of check, e.g. if userHashMap contains user,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        throw wrong credentials, else throw user doesn\u0027t exisit..."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        but this might divulge information that might lead to security flaw"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        return userHashMap.get(username).equals(encryptedPassword);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public static boolean checkDuplicateUser(String username) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        return userHashMap.containsKey(username);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "/**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": " * Class for username and password"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": " */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "class Account {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public Account(String username, String password) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedGroup.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.UniqueList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "//@@author Happytreat"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * JAXB-friendly version of the Group."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class XmlAdaptedGroup {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Group\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Constructs an XmlAdaptedGroup. This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public XmlAdaptedGroup() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Constructs an {@code XmlAdaptedGroup} with the given group details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public XmlAdaptedGroup(String name, String description, List\u003cXmlAdaptedPerson\u003e members) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (members !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            this.members \u003d new ArrayList\u003c\u003e(members);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Converts a given Group into this class for JAXB use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public XmlAdaptedGroup(Group source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        members \u003d source.getGroupMembers().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            .map(XmlAdaptedPerson::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Group object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * person"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public Group toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        final List\u003cPerson\u003e groupMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        for (XmlAdaptedPerson member : members) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            groupMembers.add(member.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        final String modelDescription \u003d description;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        final UniqueList\u003cPerson\u003e modelGroupMembers \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        modelGroupMembers.setElements(groupMembers);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new Group(modelName, modelDescription, modelGroupMembers);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!(other instanceof XmlAdaptedGroup)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        XmlAdaptedGroup otherGroup \u003d (XmlAdaptedGroup) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return Objects.equals(name, otherGroup.name)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            \u0026\u0026 Objects.equals(description, otherGroup.description)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            \u0026\u0026 Objects.equals(members, otherGroup.members);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.UniqueList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private String storedLocation;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private String timetableString;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private List\u003cXmlAdaptedGroup\u003e groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Constructs an XmlAdaptedPerson. This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public XmlAdaptedPerson() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details. # TODO v1.3: Combine 2"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * different constructors"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e tagged, String storedLocation, String timetableString) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.storedLocation \u003d storedLocation;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.timetableString \u003d timetableString;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details including {@code"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * groups}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "souless94"
        },
        "content": "        List\u003cXmlAdaptedGroup\u003e groups,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "souless94"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e tagged, String storedLocation, String timetableString) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.storedLocation \u003d storedLocation;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.timetableString \u003d timetableString;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (groups !\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            this.groups \u003d new ArrayList\u003c\u003e(groups);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "souless94"
        },
        "content": "        storedLocation \u003d source.getStoredLocation();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "souless94"
        },
        "content": "        timetableString \u003d source.getTimetable().getTimetableDataString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groups \u003d source.getGroups().stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            .map(XmlAdaptedGroup::new)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * person"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        final List\u003cGroup\u003e groupList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        for (XmlAdaptedGroup group : groups) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            groupList.add(group.toModelType());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        final UniqueList\u003cGroup\u003e modelGroupList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        modelGroupList.setElements(groupList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (timetableString \u003d\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Timetable.class.getSimpleName()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "souless94"
        },
        "content": "            modelGroupList,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "souless94"
        },
        "content": "            storedLocation, timetableString);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 38,
      "Happytreat": 24,
      "-": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"Groups list contains duplicate group(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private List\u003cXmlAdaptedGroup\u003e groups;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groups.addAll(src.getGroupList().stream().map(XmlAdaptedGroup::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d p.toModelType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (addressBook.has(person)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            addressBook.add(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        for (XmlAdaptedGroup g : groups) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Group group \u003d g.toModelType();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (addressBook.has(group)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            addressBook.add(group);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return persons.equals(((XmlSerializableAddressBook) other).persons)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                \u0026\u0026 groups.equals(((XmlSerializableAddressBook) other).groups);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 18,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "import org.jsoup.Jsoup;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": "import org.jsoup.nodes.Document;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "import org.jsoup.nodes.Element;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "import com.google.common.base.Charsets;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "import com.google.common.io.Resources;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String ONLINE_PAGE_URL \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \"https://cs2103-ay1819s1-f11-4.github.io/main/onlineTimetable.html?name\u003d\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String OFFLINE_PAGE_URL \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \"Timetable.html\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Loads the Timetable.html file with the timetable of the person selected."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Does not require a internet connection."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private void loadOfflinePersonPage(Person person) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "        URL timetablePage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + OFFLINE_PAGE_URL);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": "            String location \u003d Resources.toString(timetablePage, Charsets.UTF_8);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "souless94"
        },
        "content": "            Document document \u003d Jsoup.parse(location, \"UTF-8\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": "            Element element \u003d document.getElementById(\"timetable\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": "            element.attr(\"value\", person.getTimetable().getTimetableAsString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "            Platform.runLater(() -\u003e browser.getEngine().loadContent(document.toString()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "            loadPage(timetablePage.toExternalForm());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * checks if internet connection is available"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "souless94"
        },
        "content": "    //@@author souless94 -reused"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "souless94"
        },
        "content": "    //Solution below gotten from Marcus Junius Brutus"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "souless94"
        },
        "content": "    // from https://stackoverflow.com/questions/1402005/how-"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "souless94"
        },
        "content": "    // to-check-if-internet-connection-is-present-in-java"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private static boolean isInternetAvailable() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "souless94"
        },
        "content": "            final URL url \u003d new URL(ONLINE_PAGE_URL);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "souless94"
        },
        "content": "            final URLConnection conn \u003d url.openConnection();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "souless94"
        },
        "content": "            conn.connect();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "souless94"
        },
        "content": "            conn.getInputStream().close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "souless94"
        },
        "content": "    //@@ author"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Loads the Timetable.html file with the timetable of the person selected."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Loads from online first, then if there is no internet connect, load from offline"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (isInternetAvailable()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "souless94"
        },
        "content": "            String timetableString \u003d person.getTimetable().getTimetableAsString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "souless94"
        },
        "content": "            loadPage(ONLINE_PAGE_URL + timetableString);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "souless94"
        },
        "content": "            loadOfflinePersonPage(person);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "souless94"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "souless94"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "souless94"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "souless94"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "souless94"
        },
        "content": "        loadPersonPage(event.getNewSelection());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 97,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GroupCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "//@@author Happytreat"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * An UI component that displays information of a {@code Group}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class GroupCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private static final String FXML \u003d \"GroupListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public final Group group;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private Label numOfMembers;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public GroupCard(Group group, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.group \u003d group;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        name.setText(group.getName().fullName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        description.setText(group.getDescription());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        numOfMembers.setText(String.valueOf(group.getGroupMembers().size()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        if (!(other instanceof GroupCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        GroupCard card \u003d (GroupCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                \u0026\u0026 group.equals(card.group);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GroupListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.events.ui.GroupPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "//@@author Happytreat"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Panel containing the list of groups."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class GroupListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private static final String FXML \u003d \"GroupListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(GroupListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private ListView\u003cGroup\u003e groupListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public GroupListPanel(ObservableList\u003cGroup\u003e groupList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        setConnections(groupList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private void setConnections(ObservableList\u003cGroup\u003e groupList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groupListView.setItems(groupList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groupListView.setCellFactory(listView -\u003e new GroupListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groupListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                        logger.fine(\"Selection in group list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                        raise(new GroupPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            groupListView.scrollTo(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            groupListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    class GroupListViewCell extends ListCell\u003cGroup\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        protected void updateItem(Group group, boolean empty) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            super.updateItem(group, empty);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (empty || group \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                setGraphic(new GroupCard(group, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar and space where"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": " * other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private GroupListPanel groupListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private StackPane groupListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groupListPanel \u003d new GroupListPanel(logic.getFilteredGroupList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groupListPanelPlaceholder.getChildren().add(groupListPanel.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public GroupListPanel getGroupListPanel() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return groupListPanel;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 3,
      "Happytreat": 11,
      "-": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private Label storedLocation;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "        storedLocation.setText(person.getStoredLocation());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 3,
      "-": 70
    }
  },
  {
    "path": "src/main/resources/view/GroupListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "      \u003cLabel fx:id\u003d\"numOfMembers\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$numOfMembers\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 35
    }
  },
  {
    "path": "src/main/resources/view/GroupListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "  \u003cListView fx:id\u003d\"groupListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 8
    }
  },
  {
    "path": "src/main/resources/view/HorizontalTimetable.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003cGridPane fx:id\u003d\"gridPane\" gridLinesVisible\u003d\"true\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "  \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "  \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "souless94": 37
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "          \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                       minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "          \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane2\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "              \u003cVBox fx:id\u003d\"groupList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                  \u003cInsets top\u003d\"115\" right\u003d\"10\" bottom\u003d\"30\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                \u003cStackPane fx:id\u003d\"groupListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 16,
      "-": 69
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "\t  \u003cLabel fx:id\u003d\"storedLocation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$storedLocation\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "souless94": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "souless94": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "souless94": 4,
      "-": 20
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "souless94": 14,
      "-": 50
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003cstoredLocation\u003e\u003c/storedLocation\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \u003ctimetableString\u003e\u003c/timetableString\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "souless94": 18,
      "-": 57
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Label.class::cast)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Label::getText)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "souless94"
        },
        "content": "            \u0026\u0026 ImmutableMultiset.copyOf(getTags())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 3,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private static final String VALID_STORED_LOCATION \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"timetable\").toString() + \"/\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private static final String VALID_TIMETABLE_STRING \u003d \"default\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "souless94"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "souless94"
        },
        "content": "            null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "souless94"
        },
        "content": "            VALID_STORED_LOCATION, VALID_TIMETABLE_STRING);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "souless94"
        },
        "content": "            VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "souless94"
        },
        "content": "            VALID_STORED_LOCATION, VALID_TIMETABLE_STRING);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "souless94"
        },
        "content": "            VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "souless94"
        },
        "content": "            VALID_STORED_LOCATION, VALID_TIMETABLE_STRING);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "souless94"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            builder.with(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * {@code XmlAdaptedPerson} objects."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 26,
      "Happytreat": 1,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private Logic logic \u003d new LogicManager(model, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 1,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.add(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 1,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Entity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "            commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void add(Entity key) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void delete(Entity key) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public boolean has(Entity key) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void update(Entity target, Entity edited) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public boolean has(Entity target) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            requireNonNull(target);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (target instanceof Person) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                return this.person.isSame(target);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public boolean has(Entity target) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            requireNonNull(target);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (target instanceof Person) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                return personsAdded.stream().anyMatch(target::isSame);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void add(Entity target) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            requireNonNull(target);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (target instanceof Person) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                personsAdded.add((Person) target);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 7,
      "Happytreat": 30,
      "-": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddGroupCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class AddGroupCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_newGroup_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group validGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.add(validGroup);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandSuccess(new AddGroupCommand(validGroup), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                String.format(AddGroupCommand.MESSAGE_SUCCESS, validGroup.getName()), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_duplicateGroup_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group groupInList \u003d model.getAddressBook().getGroupList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(new AddGroupCommand(groupInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                AddGroupCommand.MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddGroupCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Entity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class AddGroupCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void constructor_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        new AddGroupCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_groupAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ModelStubAcceptingGroupAdded modelStub \u003d new ModelStubAcceptingGroupAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group validGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        CommandResult commandResult \u003d new AddGroupCommand(validGroup)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            .execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(String.format(AddGroupCommand.MESSAGE_SUCCESS, validGroup),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(Arrays.asList(validGroup), modelStub.groupsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_duplicateGroup_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group validGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        AddGroupCommand addGroupCommand \u003d new AddGroupCommand(validGroup);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithGroup(validGroup);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expectMessage(AddGroupCommand.MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        addGroupCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group family \u003d new GroupBuilder().withName(\"Family\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group friends \u003d new GroupBuilder().withName(\"Friends\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        AddGroupCommand addFamilyCommand \u003d new AddGroupCommand(family);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        AddGroupCommand addFriendsCommand \u003d new AddGroupCommand(friends);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(addFamilyCommand.equals(addFamilyCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        AddGroupCommand addFamilyCommandCopy \u003d new AddGroupCommand(family);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(addFamilyCommand.equals(addFamilyCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(addFamilyCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(addFamilyCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(addFamilyCommand.equals(addFriendsCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void add(Entity key) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void delete(Entity key) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public boolean has(Entity key) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void update(Entity target, Entity edited) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * A Model stub that contains a single group."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private class ModelStubWithGroup extends ModelStub {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        private final Group group;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ModelStubWithGroup(Group group) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            this.group \u003d group;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public boolean has(Entity target) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            requireNonNull(target);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (target instanceof Group) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                return this.group.isSame(target);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * A Model stub that always accept the group being added."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private class ModelStubAcceptingGroupAdded extends ModelStub {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        final ArrayList\u003cGroup\u003e groupsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public boolean has(Entity target) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            requireNonNull(target);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (target instanceof Group) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                return groupsAdded.stream().anyMatch(target::isSame);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void add(Entity target) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            requireNonNull(target);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            if (target instanceof Group) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                groupsAdded.add((Group) target);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            // called by {@code AddGroupCommand#execute()}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 227
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTimetableCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TIMETABLE_NOT_FOUND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.AddTimetableCommand.MESSAGE_INVALID_TIMETABLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.AddTimetableCommand.MESSAGE_INVALID_TIMETABLE_SIZE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.PersonBuilder.DEFAULT_STORED_INVALID_TIMETABLE_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "import com.opencsv.CSVWriter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class AddTimetableCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void executeTimetableAcceptedByModelAddSuccess() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToAddTimetable \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "        personToAddTimetable.getTimetable().downloadTimetableAsCsv();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetable \u003d new File(personToAddTimetable.getStoredLocation());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(timetable.exists());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "        AddTimetableCommand addTimetableCommand \u003d new AddTimetableCommand(INDEX_FIRST, null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(AddTimetableCommand.MESSAGE_ADD_TIMETABLE_SUCCESS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "                personToAddTimetable.getStoredLocation());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.update(model.getFilteredPersonList().get(0), personToAddTimetable);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandSuccess(addTimetableCommand, model, commandHistory, expectedMessage,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void executeTimetableAcceptedByModelAddByFileLocationSuccess() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToAddTimetable \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "        personToAddTimetable.getTimetable().downloadTimetableAsCsv();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetable \u003d new File(personToAddTimetable.getStoredLocation());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(timetable.exists());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "        AddTimetableCommand addTimetableCommand \u003d new AddTimetableCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "            personToAddTimetable.getStoredLocation());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(AddTimetableCommand.MESSAGE_ADD_TIMETABLE_SUCCESS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": "                personToAddTimetable.getStoredLocation());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "        expectedModel.update(model.getFilteredPersonList().get(0), personToAddTimetable);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandSuccess(addTimetableCommand, model, commandHistory, expectedMessage,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void executeInvalidPersonIndexUnfilteredListFailure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "souless94"
        },
        "content": "        AddTimetableCommand addTimetableCommand \u003d new AddTimetableCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "souless94"
        },
        "content": "            null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandFailure(addTimetableCommand, model, commandHistory,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "souless94"
        },
        "content": "            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void executeTimetableNotFoundAddFailure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToAddTimetable \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetable \u003d new File(personToAddTimetable.getStoredLocation());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (timetable.exists()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetable.delete();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "souless94"
        },
        "content": "        AddTimetableCommand addTimetableCommand \u003d new AddTimetableCommand(INDEX_FIRST, null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandFailure(addTimetableCommand, model, commandHistory,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "souless94"
        },
        "content": "            MESSAGE_TIMETABLE_NOT_FOUND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void executeHorizontalTimetableAddWrongRowSizeAddFailure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String wrongTimetableLocation \u003d DEFAULT_STORED_INVALID_TIMETABLE_LOCATION"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"/\" + \"1663619914 timetable - wrongrowsize.csv\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToAddTimetable \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetable \u003d new File(wrongTimetableLocation);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (timetable.exists()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetable.delete();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "souless94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "souless94"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(timetable);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "souless94"
        },
        "content": "            CSVWriter csvWriter \u003d new CSVWriter(fileWriter);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "souless94"
        },
        "content": "            for (int i \u003d 0; i \u003c 8; i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "souless94"
        },
        "content": "                csvWriter.writeNext(personToAddTimetable.getTimetable().getTimetableMatrix()[i]);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "souless94"
        },
        "content": "            csvWriter.writeNext(personToAddTimetable.getTimetable().getTimetableMatrix()[0]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "souless94"
        },
        "content": "            csvWriter.close();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "souless94"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "souless94"
        },
        "content": "        AddTimetableCommand addTimetableCommand \u003d new AddTimetableCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "souless94"
        },
        "content": "            wrongTimetableLocation);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandFailure(addTimetableCommand, model, commandHistory,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "souless94"
        },
        "content": "            MESSAGE_INVALID_TIMETABLE_SIZE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void executeTimetableAddWrongColumnSizeAddFailure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String wrongTimetableLocation \u003d DEFAULT_STORED_INVALID_TIMETABLE_LOCATION"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"/\" + \"1663619914 timetable - wrongcolumnsize.csv\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToAddTimetable \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetable \u003d new File(wrongTimetableLocation);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (timetable.exists()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetable.delete();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "souless94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "souless94"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(timetable);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "souless94"
        },
        "content": "            CSVWriter csvWriter \u003d new CSVWriter(fileWriter);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "souless94"
        },
        "content": "            String[] wrongEntry \u003d new String[18];"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "souless94"
        },
        "content": "            for (int i \u003d 0; i \u003c 8; i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "souless94"
        },
        "content": "                for (int j \u003d 0; j \u003c 17; j++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    wrongEntry[j] \u003d personToAddTimetable.getTimetable()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "souless94"
        },
        "content": "                        .getTimetableMatrix()[i][j];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "souless94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "souless94"
        },
        "content": "                wrongEntry[17] \u003d \"test\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "souless94"
        },
        "content": "                csvWriter.writeNext(wrongEntry);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "souless94"
        },
        "content": "            csvWriter.close();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "souless94"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "souless94"
        },
        "content": "        AddTimetableCommand addTimetableCommand \u003d new AddTimetableCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "souless94"
        },
        "content": "            wrongTimetableLocation);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandFailure(addTimetableCommand, model, commandHistory,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "souless94"
        },
        "content": "            MESSAGE_INVALID_TIMETABLE_SIZE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void executeTimetableAddWrongFirstColumnAddFailure() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String wrongTimetableLocation \u003d DEFAULT_STORED_INVALID_TIMETABLE_LOCATION"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"/\" + \"1663619914 timetable - wrongdays.csv\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToAddTimetable \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetable \u003d new File(wrongTimetableLocation);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (timetable.exists()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetable.delete();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "souless94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "souless94"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(timetable);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "souless94"
        },
        "content": "            CSVWriter csvWriter \u003d new CSVWriter(fileWriter);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "souless94"
        },
        "content": "            String[] wrongEntry \u003d new String[17];"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "souless94"
        },
        "content": "            for (int i \u003d 0; i \u003c 8; i++) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "souless94"
        },
        "content": "                for (int j \u003d 0; j \u003c 17; j++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    wrongEntry[j] \u003d personToAddTimetable.getTimetable()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "souless94"
        },
        "content": "                        .getTimetableMatrix()[i][j];"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "souless94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "souless94"
        },
        "content": "                if (i \u003d\u003d 5) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    wrongEntry[0] \u003d \"firday\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "souless94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "souless94"
        },
        "content": "                csvWriter.writeNext(wrongEntry);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "souless94"
        },
        "content": "            csvWriter.close();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "souless94"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "souless94"
        },
        "content": "        AddTimetableCommand addTimetableCommand \u003d new AddTimetableCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "souless94"
        },
        "content": "            wrongTimetableLocation);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandFailure(addTimetableCommand, model, commandHistory,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "souless94"
        },
        "content": "            MESSAGE_INVALID_TIMETABLE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void executeTimetableAddWrongFirstRowAddFailure() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String wrongTimetableLocation \u003d DEFAULT_STORED_INVALID_TIMETABLE_LOCATION"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"/\" + \"1663619914 timetable - wrongtimings.csv\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToAddTimetable \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetable \u003d new File(wrongTimetableLocation);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (timetable.exists()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetable.delete();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "souless94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "souless94"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(timetable);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "souless94"
        },
        "content": "            CSVWriter csvWriter \u003d new CSVWriter(fileWriter);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "souless94"
        },
        "content": "            String[] wrongFirstRow \u003d personToAddTimetable.getTimetable().getTimetableMatrix()[0];"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "souless94"
        },
        "content": "            wrongFirstRow[2] \u003d \"magic\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "souless94"
        },
        "content": "            csvWriter.writeNext(wrongFirstRow);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "souless94"
        },
        "content": "            for (int i \u003d 1; i \u003c 8; i++) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "souless94"
        },
        "content": "                csvWriter.writeNext(personToAddTimetable.getTimetable().getTimetableMatrix()[i]);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "souless94"
        },
        "content": "            csvWriter.close();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "souless94"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "souless94"
        },
        "content": "        AddTimetableCommand addTimetableCommand \u003d new AddTimetableCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "souless94"
        },
        "content": "            wrongTimetableLocation);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandFailure(addTimetableCommand, model, commandHistory,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "souless94"
        },
        "content": "            MESSAGE_INVALID_TIMETABLE);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 217,
      "Happytreat": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.PersonBuilder.DEFAULT_STORED_LOCATION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_CAT \u003d \"Cat Smith\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_CAT \u003d \"33333333\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_CAT \u003d \"cat@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_CAT \u003d \"Block 456, CAT Street 5\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String VALID_DAY \u003d \"friday\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String VALID_TIMING \u003d \"0900\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String VALID_DETAILS \u003d \"something\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String VALID_EDIT_TIMETABLE_COMMAND_WITHOUT_DETAILS \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \" \" + PREFIX_DAY + VALID_DAY + \" \" + PREFIX_TIMING + VALID_TIMING;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String VALID_EDIT_TIMETABLE_COMMAND_WITH_DETAILS \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \" \" + PREFIX_DAY + VALID_DAY"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \" \" + PREFIX_TIMING + VALID_TIMING"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \" \" + PREFIX_DETAILS + VALID_DETAILS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String VALID_GROUP_NAME_BOO \u003d \"Boo Streets\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String VALID_GROUP_NAME_FRIENDS \u003d \"Friends\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String INVALID_GROUP_NAME \u003d \"Friend\u0026\"; //\u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String VALID_GROUP_DESCRIPTION \u003d \"Family Group\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String VALID_GROUP_DESCRIPTION_BOO \u003d \"Halloween Surprise!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String VALID_GROUP_DESCRIPTION_FRIENDS \u003d \"Best friends forever\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_CAT \u003d \" \" + PREFIX_NAME + VALID_NAME_CAT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_CAT \u003d \" \" + PREFIX_PHONE + VALID_PHONE_CAT;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_CAT \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_CAT;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_CAT \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_CAT;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String GROUPNAME_DESC_BOO \u003d \" \" + PREFIX_NAME + VALID_GROUP_NAME_BOO;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String GROUPNAME_DESC_FRIENDS \u003d \" \" + PREFIX_NAME + VALID_GROUP_NAME_FRIENDS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String INVALID_GROUPNAME_DESC \u003d \" \" + PREFIX_NAME + INVALID_GROUP_NAME;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String DESCRIPTION_DESC_FRIENDS \u003d \" \" + PREFIX_DESCRIPTION + VALID_GROUP_DESCRIPTION_FRIENDS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String DESCRIPTION_DESC_BOO \u003d \" \" + PREFIX_DESCRIPTION + VALID_GROUP_DESCRIPTION_BOO;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String INVALID_DAY_DESC \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \" \" + PREFIX_DAY + \"firday\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \" \" + PREFIX_TIMING + VALID_TIMING; // its friday not firday"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String INVALID_TIMING_DESC \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \" \" + PREFIX_DAY + VALID_DAY"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \" \" + PREFIX_TIMING + \"09000\"; // extra 0 for time"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String INVALID_TIMING_AND_DAY_DESC \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \" \" + PREFIX_DAY + \"firday\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \" \" + PREFIX_TIMING + \"09000\"; // extra 0 for time and its friday not firday"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).withStoredLocation(DEFAULT_STORED_LOCATION).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .withStoredLocation(DEFAULT_STORED_LOCATION).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e - the result message matches {@code"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * expectedMessage} \u003cbr\u003e - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e - the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "souless94"
        },
        "content": "        CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e - a {@code CommandException} is"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * thrown"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * \u003cbr\u003e - the CommandException message matches {@code expectedMessage} \u003cbr\u003e - the address book"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e - {@code"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "souless94"
        },
        "content": "        CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * targetIndex} in the {@code model}\u0027s address book."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "souless94"
        },
        "content": "        model.updateFilteredPersonList("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show all the persons at every given {@code indexes}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * in the {@code model}\u0027s address book."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static void showPersonAtIndexes(Model model, List\u003cInteger\u003e indexes) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        List\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        for (int index : indexes) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            assertTrue(index \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            Person personAtIndex \u003d model.getFilteredPersonList().get(index);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            persons.add(personAtIndex);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Predicate\u003cPerson\u003e predicatePersonAtIndexes \u003d person -\u003e persons.contains(person);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.updateFilteredPersonList(predicatePersonAtIndexes);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(indexes.size(), model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the group at the given {@code targetIndex}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * in the {@code model}\u0027s address book."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static void showGroupAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredGroupList().size());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group group \u003d model.getFilteredGroupList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        final String[] splitName \u003d group.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "souless94"
        },
        "content": "        model.updateFilteredGroupList("
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(1, model.getFilteredGroupList().size());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.delete(firstPerson);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 59,
      "Happytreat": 44,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CreateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.model.person.Accounts;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "public class CreateCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private String testUsername \u003d \"test-username\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private String testPassword \u003d \"test-password\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private Accounts account \u003d new Accounts(testUsername, testPassword);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public void executeCreateSuccess() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        CreateCommand create \u003d new CreateCommand(account);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        assertTrue(create.getCreateIsSuccessful());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public void executeCreateFailure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        CreateCommand createDuplicate \u003d new CreateCommand(account);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        assertFalse(createDuplicate.getCreateIsSuccessful());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": " * tests for {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void execute_deletePersonWithTimetable_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "        personToDelete.getTimetable().downloadTimetableAsCsv();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetable \u003d new File(personToDelete.getStoredLocation());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(timetable.exists());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "        expectedModel.delete(personToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertFalse(timetable.exists());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.delete(personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.delete(personToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "souless94"
        },
        "content": "            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.delete(personToDelete);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "souless94"
        },
        "content": "            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list. 2. Undo the deletion. 3. The unfiltered"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * unfiltered list is different from the index at the filtered list. 4. Redo the deletion. This"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.delete(personToDelete);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertNotEquals(personToDelete,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "souless94"
        },
        "content": "            model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 52,
      "Happytreat": 21,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteGroupCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * {@code DeleteGroupCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class DeleteGroupCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_groupExists_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group groupToDelete \u003d model.getFilteredGroupList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(groupToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteGroupCommand.MESSAGE_SUCCESS, groupToDelete.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.delete(groupToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandSuccess(deleteGroupCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_groupDoesNotExist_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group groupToDelete \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(groupToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(deleteGroupCommand, model, commandHistory, Messages.MESSAGE_NO_MATCH_TO_EXISTING_GROUP);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void executeUndoRedo_groupExists_success() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group groupToDelete \u003d model.getFilteredGroupList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(groupToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.delete(groupToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // delete -\u003e first group deleted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        deleteGroupCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered group list to show all groups"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // redo -\u003e same first group deleted again"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void executeUndoRedo_groupDoesNotExists_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group groupToDelete \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(groupToDelete);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(deleteGroupCommand, model, commandHistory, Messages.MESSAGE_NO_MATCH_TO_EXISTING_GROUP);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group groupAtIndexFirst \u003d model.getFilteredGroupList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group groupAtIndexSecond \u003d model.getFilteredGroupList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteGroupCommand deleteFirstCommand \u003d new DeleteGroupCommand(groupAtIndexFirst);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteGroupCommand deleteSecondCommand \u003d new DeleteGroupCommand(groupAtIndexSecond);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteGroupCommand deleteFirstCommandCopy \u003d new DeleteGroupCommand(groupAtIndexFirst);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(\"deleteFirstCommand\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // different group deleted -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteTimetableCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "class DeleteTimetableCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "    void deleteTimetableSuccess() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToDeleteTimetable \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "        personToDeleteTimetable.getTimetable().downloadTimetableAsCsv();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(new File(personToDeleteTimetable.getStoredLocation()).exists());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "        DeleteTimetableCommand deleteTimetableCommand \u003d new DeleteTimetableCommand("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "            INDEX_FIRST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(DeleteTimetableCommand.MESSAGE_DELETE_TIMETABLE_SUCCESS,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "                personToDeleteTimetable);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "        expectedModel.update(model.getFilteredPersonList().get(0), personToDeleteTimetable);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandSuccess(deleteTimetableCommand, model, commandHistory, expectedMessage,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertFalse(new File(personToDeleteTimetable.getStoredLocation()).exists());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "    void resetTimetableSuccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToDeleteTimetable \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetable \u003d new File(personToDeleteTimetable.getStoredLocation());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (timetable.exists()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetable.delete();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertFalse(timetable.exists());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "        DeleteTimetableCommand deleteTimetableCommand \u003d new DeleteTimetableCommand("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "            INDEX_FIRST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(DeleteTimetableCommand.MESSAGE_RESET_TIMETABLE_SUCCESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "                personToDeleteTimetable);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "        expectedModel.update(model.getFilteredPersonList().get(0), personToDeleteTimetable);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandSuccess(deleteTimetableCommand, model, commandHistory, expectedMessage,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DownloadTimetableCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.DownloadTimetableCommand.MESSAGE_INVALID_FILE_PATH_DOWNLOAD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.DownloadTimetableCommand.MESSAGE_TIMETABLE_IS_PRESENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "class DownloadTimetableCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "    void downloadTimetableSuccess() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToDownloadTimetable \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetable \u003d new File(personToDownloadTimetable.getStoredLocation());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (timetable.exists()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetable.delete();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "        DownloadTimetableCommand downloadTimetableCommand \u003d new DownloadTimetableCommand("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            INDEX_FIRST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(DownloadTimetableCommand.MESSAGE_DOWNLOAD_TIMETABLE_SUCCESS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + personToDownloadTimetable.getStoredLocation());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.update(model.getFilteredPersonList().get(0), personToDownloadTimetable);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandSuccess(downloadTimetableCommand, model, commandHistory, expectedMessage,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(new File(personToDownloadTimetable.getStoredLocation()).exists());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "    void downloadTimetableDuplicateFailure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToDownloadTimetable \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetable \u003d new File(personToDownloadTimetable.getStoredLocation());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (!timetable.exists()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "            personToDownloadTimetable.getTimetable().downloadTimetableAsCsv();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "        DownloadTimetableCommand downloadTimetableCommand \u003d new DownloadTimetableCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "            INDEX_FIRST);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandFailure(downloadTimetableCommand, model, commandHistory,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "            MESSAGE_TIMETABLE_IS_PRESENT + personToDownloadTimetable.getStoredLocation());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(new File(personToDownloadTimetable.getStoredLocation()).exists());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "souless94"
        },
        "content": "    void downloadTimetableFolderNotFoundFailure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToDownloadTimetable \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetable \u003d new File(personToDownloadTimetable.getStoredLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (timetable.exists()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetable.delete();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetableParent \u003d new File(timetable.getParent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (timetableParent.exists()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "souless94"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "                FileUtils.deleteDirectory(timetableParent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "souless94"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "souless94"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "souless94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "souless94"
        },
        "content": "        DownloadTimetableCommand downloadTimetableCommand \u003d new DownloadTimetableCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "souless94"
        },
        "content": "            INDEX_FIRST);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandFailure(downloadTimetableCommand, model, commandHistory,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "            MESSAGE_INVALID_FILE_PATH_DOWNLOAD + timetable.getParent());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "souless94"
        },
        "content": "        timetableParent.mkdirs(); //create the directory back."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 84,
      "Happytreat": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.update(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.update(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.update(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.update(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.update(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST, DESC_AMY);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND, DESC_AMY)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST, DESC_BOB)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 30,
      "-": 218
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditGroupCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_NAME_BOO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.FAMILY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand.EditGroupDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.testutil.EditGroupDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * EditGroupCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class EditGroupCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group editedGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupDescriptor descriptor \u003d new EditGroupDescriptorBuilder(editedGroup).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(FAMILY.getName(), descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String expectedMessage \u003d String.format(EditGroupCommand.MESSAGE_EDIT_GROUP_SUCCESS, editedGroup);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.update(model.getFilteredGroupList().get(0), editedGroup);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandSuccess(editGroupCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Index indexLastGroup \u003d Index.fromOneBased(model.getFilteredGroupList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group lastGroup \u003d model.getFilteredGroupList().get(indexLastGroup.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        GroupBuilder groupInList \u003d new GroupBuilder(lastGroup);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group editedGroup \u003d groupInList.withName(VALID_GROUP_NAME_BOO).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupDescriptor descriptor \u003d new EditGroupDescriptorBuilder().withName(VALID_GROUP_NAME_BOO).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(lastGroup.getName(), descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String expectedMessage \u003d String.format(EditGroupCommand.MESSAGE_EDIT_GROUP_SUCCESS, editedGroup);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.update(lastGroup, editedGroup);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandSuccess(editGroupCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Index indexLastGroup \u003d Index.fromOneBased(model.getFilteredGroupList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group lastGroup \u003d model.getFilteredGroupList().get(indexLastGroup.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(lastGroup.getName(), new EditGroupDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String expectedMessage \u003d String.format(EditGroupCommand.MESSAGE_EDIT_GROUP_SUCCESS, lastGroup);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandSuccess(editGroupCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_duplicateGroupUnfilteredList_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group firstPerson \u003d model.getFilteredGroupList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group secondPerson \u003d model.getFilteredGroupList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupDescriptor descriptor \u003d new EditGroupDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(secondPerson.getName(), descriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(editGroupCommand, model, commandHistory, EditGroupCommand.MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_duplicateGroupNameUnfilteredList_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // edit group in filtered list to have a duplicate name in address book"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group groupInList \u003d model.getAddressBook().getGroupList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group firstPerson \u003d model.getFilteredGroupList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(firstPerson.getName(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                new EditGroupDescriptorBuilder().withName(groupInList.getName().fullName).build());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(editGroupCommand, model, commandHistory, EditGroupCommand.MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_invalidGroupNameUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupDescriptor descriptor \u003d new EditGroupDescriptorBuilder().withName(VALID_GROUP_NAME_BOO).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(new Name(VALID_GROUP_NAME_BOO), descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(editGroupCommand, model, commandHistory, Messages.MESSAGE_NO_MATCH_TO_EXISTING_GROUP);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void executeUndoRedo_validGroupUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group editedGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupDescriptor descriptor \u003d new EditGroupDescriptorBuilder(editedGroup).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String expectedMessage \u003d String.format(EditGroupCommand.MESSAGE_EDIT_GROUP_SUCCESS, editedGroup);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group groupToEdit \u003d model.getFilteredGroupList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(groupToEdit.getName(), descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.update(groupToEdit, editedGroup);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        editGroupCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void executeUndoRedo_invalidGroupUnfilteredList_failure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupDescriptor descriptor \u003d new EditGroupDescriptorBuilder().withName(VALID_GROUP_NAME_BOO).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(new Name(VALID_GROUP_NAME_BOO), descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(editGroupCommand, model, commandHistory, Messages.MESSAGE_NO_MATCH_TO_EXISTING_GROUP);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group groupToEdit \u003d model.getFilteredGroupList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupDescriptor descriptor \u003d new EditGroupDescriptorBuilder().withName(VALID_GROUP_NAME_BOO).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        final EditGroupCommand standardCommand \u003d new EditGroupCommand(groupToEdit.getName(), descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupDescriptor copyDescriptor \u003d new EditGroupDescriptor(descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand commandWithSameValues \u003d new EditGroupCommand(groupToEdit.getName(), copyDescriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // different group to edit -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group groupToEdit2 \u003d model.getFilteredGroupList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(standardCommand.equals(new EditGroupCommand(groupToEdit2.getName(), copyDescriptor)));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupDescriptor descriptor2 \u003d new EditGroupDescriptorBuilder().withDescription(VALID_GROUP_DESCRIPTION)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(standardCommand.equals(new EditGroupCommand(groupToEdit.getName(), descriptor2)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 188
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditTimetableCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAILS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class EditTimetableCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void executeEditTimetableSuccess() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToEditTimetable \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String day \u003d VALID_DAY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String timing \u003d VALID_TIMING;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String details \u003d VALID_DETAILS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "        EditTimetableCommand editTimetableCommand \u003d new EditTimetableCommand(INDEX_FIRST, day,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timing, details);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(EditTimetableCommand.MESSAGE_EDIT_TIMETABLE_SUCCESS, personToEditTimetable);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "        expectedModel.update(model.getFilteredPersonList().get(0), personToEditTimetable);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandSuccess(editTimetableCommand, model, commandHistory, expectedMessage,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void executeEditTimetableSuccessWithCapitalLetterDay() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToEditTimetable \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String day \u003d \"WednEsday\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String timing \u003d VALID_TIMING;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String details \u003d VALID_DETAILS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "        EditTimetableCommand editTimetableCommand \u003d new EditTimetableCommand(INDEX_FIRST, day,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timing, details);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(EditTimetableCommand.MESSAGE_EDIT_TIMETABLE_SUCCESS, personToEditTimetable);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "        expectedModel.update(model.getFilteredPersonList().get(0), personToEditTimetable);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandSuccess(editTimetableCommand, model, commandHistory, expectedMessage,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void executeInvalidPersonIndexUnfilteredListFailure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String day \u003d VALID_DAY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String timing \u003d VALID_TIMING;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String details \u003d VALID_DETAILS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": "        EditTimetableCommand editTimetableCommand \u003d new EditTimetableCommand(outOfBoundIndex, day,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timing, details);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandFailure(editTimetableCommand, model, commandHistory,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "souless94"
        },
        "content": "            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindGroupCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_GROUPS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.BESTFRIENDS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.FAMILY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindGroupCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class FindGroupCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        FindGroupCommand findFirstCommand \u003d new FindGroupCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        FindGroupCommand findSecondCommand \u003d new FindGroupCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        FindGroupCommand findFirstCommandCopy \u003d new FindGroupCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(findFirstCommand.equals(\"findFirstCommand\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // different keyword -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_zeroKeywords_noGroupFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_GROUPS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        FindGroupCommand command \u003d new FindGroupCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.updateFilteredGroupList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredGroupList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_multipleKeywords_multipleGroupsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_GROUPS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Family Friends\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        FindGroupCommand command \u003d new FindGroupCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.updateFilteredGroupList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(Arrays.asList(FAMILY, BESTFRIENDS), model.getFilteredGroupList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showGroupAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_personListIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_groupListIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        showGroupAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 11,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LoginCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "import seedu.address.model.person.Accounts;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "public class LoginCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private String testUsername \u003d \"test-username\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private String testPassword \u003d \"test-password\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private Accounts account \u003d new Accounts(testUsername, testPassword);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private CreateCommand create \u003d new CreateCommand(account);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public void executeLoginSuccessful() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        LoginCommand login \u003d new LoginCommand(account);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        assertTrue(login.getLoginIsSuccessful());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public void executeLoginWithWrongPasswordFailure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        String rightUsername \u003d \"test-username\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        String wrongPassword \u003d \"wrong-password\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        Accounts wrongAccount \u003d new Accounts(rightUsername, wrongPassword);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        LoginCommand login \u003d new LoginCommand(wrongAccount);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        assertFalse(login.getLoginIsSuccessful());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    public void executeLoginWithWrongUserName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        String rightUsername \u003d \"wrong-username\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        String wrongPassword \u003d \"test-password\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        Accounts wrongAccount \u003d new Accounts(rightUsername, wrongPassword);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        LoginCommand login \u003d new LoginCommand(wrongAccount);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "        assertFalse(login.getLoginIsSuccessful());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 14,
      "-": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewGroupCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndexes;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.FAMILY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ViewGroupCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class ViewGroupCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_viewGroupWithAllPersonsInAddressBook_showsSamePersonList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group groupWithAllPersons \u003d new GroupBuilder().withName(\"AllPersonGroup\").withSampleMembers().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.add(groupWithAllPersons);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandSuccess(new ViewGroupCommand(groupWithAllPersons.getName()), model, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                ViewGroupCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void execute_viewGroupWithNotAllPersonsInAddressBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group family \u003d new GroupBuilder(FAMILY).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // First 7 people are in FAMILY group"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        List\u003cInteger\u003e indexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            indexes.add(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        showPersonAtIndexes(expectedModel, indexes);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandSuccess(new ViewGroupCommand(family.getName()), model, commandHistory,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                ViewGroupCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddGroupCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BOO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_FRIENDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUPNAME_DESC_BOO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUPNAME_DESC_FRIENDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUPNAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_DESCRIPTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_DESCRIPTION_BOO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_NAME_BOO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class AddGroupCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private AddGroupCommandParser parser \u003d new AddGroupCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group expectedGroup \u003d new GroupBuilder().withName(VALID_GROUP_NAME_BOO)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                .withDescription(VALID_GROUP_DESCRIPTION_BOO).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + GROUPNAME_DESC_BOO + DESCRIPTION_DESC_BOO,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                new AddGroupCommand(expectedGroup));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // multiple group names - last name accepted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseSuccess(parser, GROUPNAME_DESC_FRIENDS + GROUPNAME_DESC_BOO + DESCRIPTION_DESC_BOO,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                new AddGroupCommand(expectedGroup));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // multiple description - last description accepted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseSuccess(parser, GROUPNAME_DESC_BOO + DESCRIPTION_DESC_FRIENDS + DESCRIPTION_DESC_BOO,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                new AddGroupCommand(expectedGroup));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group expectedGroup \u003d new GroupBuilder().withName(VALID_GROUP_NAME_BOO).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseSuccess(parser, GROUPNAME_DESC_BOO, new AddGroupCommand(expectedGroup));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseFailure(parser, VALID_GROUP_NAME_BOO + DESCRIPTION_DESC_BOO, expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseFailure(parser, VALID_GROUP_NAME_BOO + VALID_GROUP_DESCRIPTION, expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseFailure(parser, INVALID_GROUPNAME_DESC + DESCRIPTION_DESC_BOO,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + GROUPNAME_DESC_BOO + DESCRIPTION_DESC_BOO,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddTimetableCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FILE_EXTENSION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_IS_FILE_DIRECTORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.PersonBuilder.DEFAULT_STORED_INVALID_TIMETABLE_LOCATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.PersonBuilder.DEFAULT_STORED_LOCATION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.AddTimetableCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class AddTimetableCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private AddTimetableCommandParser parser \u003d new AddTimetableCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseCompulsoryFieldMissingFailure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(MESSAGE_INVALID_COMMAND_FORMAT, AddTimetableCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String validFileLocation \u003d BOB.getStoredLocation();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "        BOB.getTimetable().downloadTimetableAsCsv();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "        boolean doesFileExists \u003d new File(BOB.getStoredLocation()).exists();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(doesFileExists);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "        //missing index but with fileLocation"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FILE_LOCATION + validFileLocation,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseAddTimetableWithoutFileLocationSuccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String targetIndex \u003d INDEX_SECOND.getOneBased() + \" \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "        BOB.getTimetable().downloadTimetableAsCsv();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "        boolean doesFileExists \u003d new File(BOB.getStoredLocation()).exists();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String userInput \u003d targetIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(doesFileExists);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "        AddTimetableCommand addTimetableCommand \u003d new AddTimetableCommand(INDEX_SECOND, null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseSuccess(parser, userInput, addTimetableCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseAddTimetableWithValidFileLocationSuccess() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String targetIndex \u003d INDEX_SECOND.getOneBased() + \" \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String fileLocation \u003d BOB.getStoredLocation();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "        BOB.getTimetable().downloadTimetableAsCsv();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "        boolean doesFileExists \u003d new File(BOB.getStoredLocation()).exists();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String userInput \u003d targetIndex + PREFIX_FILE_LOCATION + fileLocation;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(doesFileExists);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "        AddTimetableCommand addTimetableCommand \u003d new AddTimetableCommand(INDEX_SECOND,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "            fileLocation);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseSuccess(parser, userInput, addTimetableCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseAddTimetableWithInvalidFileExtension() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String targetIndex \u003d INDEX_SECOND.getOneBased() + \" \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String fileLocation \u003d DEFAULT_STORED_INVALID_TIMETABLE_LOCATION + \"/1.txt\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_FILE_EXTENSION;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String userInput \u003d targetIndex + PREFIX_FILE_LOCATION + fileLocation;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parse_addTimetableWithAFileDirectory_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String fileDirectory \u003d DEFAULT_STORED_LOCATION + \".csv\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String targetIndex \u003d INDEX_SECOND.getOneBased() + \" \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d MESSAGE_IS_FILE_DIRECTORY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetable \u003d new File(fileDirectory);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "souless94"
        },
        "content": "        timetable.mkdirs();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "souless94"
        },
        "content": "        boolean doesFileExists \u003d timetable.exists();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(doesFileExists);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(timetable.isDirectory());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String userInput \u003d targetIndex + PREFIX_FILE_LOCATION + fileDirectory;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "souless94"
        },
        "content": "        timetable.delete();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.PersonBuilder.DEFAULT_STORED_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.AddTimetableCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.DeleteMemberCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.DeleteTimetableCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.DownloadTimetableCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.EditTimetableCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.ViewGroupCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseCommandAddTimetableFromStoredLocation() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "        AddTimetableCommand command \u003d (AddTimetableCommand) parser"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .parseCommand(AddTimetableCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "        AddTimetableCommand expectedCommand \u003d new AddTimetableCommand(INDEX_FIRST, null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertEquals(command, expectedCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseCommandAddTimetableFromOtherLocation() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person person \u003d new PersonBuilder().withStoredLocation(DEFAULT_STORED_LOCATION).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "souless94"
        },
        "content": "        person.getTimetable().downloadTimetableAsCsv();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String location \u003d person.getStoredLocation();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "souless94"
        },
        "content": "        AddTimetableCommand command \u003d (AddTimetableCommand) parser"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "souless94"
        },
        "content": "                AddTimetableCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + \" fl/\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    + location);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "        AddTimetableCommand expectedCommand \u003d new AddTimetableCommand(INDEX_FIRST, location);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetableToDelete \u003d new File(location);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (timetableToDelete.exists()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetableToDelete.delete();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertEquals(command, expectedCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseCommandDeleteTimetable() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "souless94"
        },
        "content": "        DeleteTimetableCommand command \u003d (DeleteTimetableCommand) parser"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .parseCommand(DeleteTimetableCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "souless94"
        },
        "content": "        DeleteTimetableCommand expectedCommand \u003d new DeleteTimetableCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertEquals(command, expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseCommandDownloadTimetable() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "souless94"
        },
        "content": "        DownloadTimetableCommand command \u003d (DownloadTimetableCommand) parser"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .parseCommand(DownloadTimetableCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "souless94"
        },
        "content": "        DownloadTimetableCommand expectedCommand \u003d new DownloadTimetableCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertEquals(command, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + INDEX_FIRST.getOneBased() + \" \" + PersonUtil"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseCommandEditTimetable() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "souless94"
        },
        "content": "        EditTimetableCommand command \u003d (EditTimetableCommand) parser"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .parseCommand(EditTimetableCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + \" \" + INDEX_FIRST.getOneBased()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + \" day/friday timing/1100 m/cs2103\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "souless94"
        },
        "content": "        EditTimetableCommand expectedCommand \u003d new EditTimetableCommand(INDEX_FIRST, \"friday\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "souless94"
        },
        "content": "            \"1100\", \"cs2103\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertEquals(command, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e nameKeywords \u003d Arrays.asList(\"Alex\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e phoneKeywords \u003d Arrays.asList(\"91234567\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e addressKeywords \u003d Arrays.asList(\"Orchard\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e emailKeywords \u003d Arrays.asList(\"alex@example.com\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e tagKeywords \u003d Arrays.asList(\"friends\", \"Boy\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        //List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"n/Alex\", \"p/91234567\", \"a/Orchard\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                \"e/alex@example.com\", \"t/friends Boy\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        //assertEquals(new FindCommand(new NameContainsKeywordsPredicate\u003cPerson\u003e(keywords)), command);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(nameKeywords, phoneKeywords, addressKeywords,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                emailKeywords, tagKeywords), command);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "souless94"
        },
        "content": "            parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseCommandAddGroup() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        AddGroupCommand command \u003d (AddGroupCommand) parser.parseCommand(AddGroupCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                + \" \" + PREFIX_NAME + GroupBuilder.DEFAULT_NAME"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                + \" \" + PREFIX_DESCRIPTION + GroupBuilder.DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group group \u003d new GroupBuilder().withName(GroupBuilder.DEFAULT_NAME)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                .withDescription(GroupBuilder.DEFAULT_DESCRIPTION).build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        AddGroupCommand expectedCommand \u003d new AddGroupCommand(group);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(command, expectedCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseCommandDeleteGroup() throws Exception {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteGroupCommand command \u003d (DeleteGroupCommand) parser.parseCommand(DeleteGroupCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                + \" \" + PREFIX_NAME + GroupBuilder.DEFAULT_NAME);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group group \u003d new GroupBuilder().withName(GroupBuilder.DEFAULT_NAME).build();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteGroupCommand expectedCommand \u003d new DeleteGroupCommand(group);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(command, expectedCommand);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseCommandEditGroup() throws Exception {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand command \u003d (EditGroupCommand) parser.parseCommand(EditGroupCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                + \" Friend Group \" + PREFIX_NAME + GroupBuilder.DEFAULT_NAME"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                + \" \" + PREFIX_DESCRIPTION + GroupBuilder.DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Name oldName \u003d new Name(\"Friend Group\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand.EditGroupDescriptor editGroupDescriptor \u003d new EditGroupCommand.EditGroupDescriptor();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        editGroupDescriptor.setName(new Name(GroupBuilder.DEFAULT_NAME));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        editGroupDescriptor.setDescription(GroupBuilder.DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand expectedCommand \u003d new EditGroupCommand(oldName, editGroupDescriptor);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(command, expectedCommand);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseCommandRegister() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        RegisterCommand command \u003d (RegisterCommand) parser.parseCommand(RegisterCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                + \" 1\""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                + \" \" + PREFIX_NAME + GroupBuilder.DEFAULT_NAME);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        RegisterCommand expectedCommand \u003d new RegisterCommand(new Name(GroupBuilder.DEFAULT_NAME), INDEX_FIRST);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(command, expectedCommand);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseCommandDeleteMember() throws Exception {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteMemberCommand command \u003d (DeleteMemberCommand) parser.parseCommand(DeleteMemberCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                + \" 1\""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                + \" \" + PREFIX_NAME + GroupBuilder.DEFAULT_NAME);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        DeleteMemberCommand expectedCommand \u003d new DeleteMemberCommand(new Name(GroupBuilder.DEFAULT_NAME), INDEX_FIRST);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(command, expectedCommand);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseCommandViewGroup() throws Exception {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ViewGroupCommand command \u003d (ViewGroupCommand) parser.parseCommand(ViewGroupCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                + \" \" + PREFIX_NAME + GroupBuilder.DEFAULT_NAME);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ViewGroupCommand expectedCommand \u003d new ViewGroupCommand(new Name(GroupBuilder.DEFAULT_NAME));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(command, expectedCommand);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "souless94"
        },
        "content": "        thrown.expectMessage("
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "souless94"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 2,
      "souless94": 59,
      "Happytreat": 76,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteGroupCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUPNAME_DESC_BOO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_NAME_BOO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class DeleteGroupCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private DeleteGroupCommandParser parser \u003d new DeleteGroupCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseValidArgsReturnsDeleteGroupCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group group \u003d new GroupBuilder().withName(VALID_GROUP_NAME_BOO).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseSuccess(parser, GROUPNAME_DESC_BOO, new DeleteGroupCommand(group));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseInvalidArgsThrowsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                DeleteGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteMemberCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUPNAME_DESC_BOO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_NAME_BOO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.DeleteMemberCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class DeleteMemberCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private DeleteMemberCommandParser parser \u003d new DeleteMemberCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseValidArgsReturnsDeleteMemberCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseSuccess(parser, \" 1\" + GROUPNAME_DESC_BOO, new DeleteMemberCommand("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                new Name(VALID_GROUP_NAME_BOO), INDEX_FIRST));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseInvalidArgsThrowsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                DeleteMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteTimetableCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.DeleteTimetableCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class DeleteTimetableCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private DeleteTimetableCommandParser parser \u003d new DeleteTimetableCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseCompulsoryFieldMissingFailure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTimetableCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "        BOB.getTimetable().downloadTimetableAsCsv();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "        boolean doesFileExists \u003d new File(BOB.getStoredLocation()).exists();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(doesFileExists);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "        //missing index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseFailure(parser, \"random\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseDeleteTimetableSuccess() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String targetIndex \u003d INDEX_SECOND.getOneBased() + \" \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "        BOB.getTimetable().downloadTimetableAsCsv();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetable \u003d new File(BOB.getStoredLocation());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String userInput \u003d targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(timetable.exists());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "        DeleteTimetableCommand deleteTimetableCommand \u003d new DeleteTimetableCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseSuccess(parser, userInput, deleteTimetableCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseResetTimetableSuccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String targetIndex \u003d INDEX_SECOND.getOneBased() + \" \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File timetable \u003d new File(BOB.getStoredLocation());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (timetable.exists()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetable.delete();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String userInput \u003d targetIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertFalse(timetable.exists());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "        DeleteTimetableCommand deleteTimetableCommand \u003d new DeleteTimetableCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseSuccess(parser, userInput, deleteTimetableCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertFalse(timetable.exists());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DownloadTimetableCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.DownloadTimetableCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class DownloadTimetableCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private DownloadTimetableCommandParser parser \u003d new DownloadTimetableCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseCompulsoryFieldMissingFailure() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(MESSAGE_INVALID_COMMAND_FORMAT, DownloadTimetableCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "        //missing index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseFailure(parser, \"random\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseDownloadTimetableSuccess() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String targetIndex \u003d INDEX_SECOND.getOneBased() + \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String userInput \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "        DownloadTimetableCommand downloadTimetableCommand \u003d new DownloadTimetableCommand("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "            INDEX_SECOND);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseSuccess(parser, userInput, downloadTimetableCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 9,
      "-": 202
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditGroupCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BOO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUPNAME_DESC_BOO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUPNAME_DESC_FRIENDS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUPNAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_DESCRIPTION_BOO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_NAME_BOO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_NAME_FRIENDS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class EditGroupCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditGroupCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private EditGroupCommandParser parser \u003d new EditGroupCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseMissingPartsFailure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // no old group name specified"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseFailure(parser, GROUPNAME_DESC_BOO, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseFailure(parser, VALID_GROUP_NAME_BOO, EditGroupCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // no old name and no field specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseInvalidPreambleFailure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // no symbols in name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseFailure(parser, \"-Eleven\" + GROUPNAME_DESC_BOO, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseFailure(parser, \"Booo%\" + GROUPNAME_DESC_BOO, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseFailure(parser, \"i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseInvalidValueFailure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseFailure(parser, VALID_GROUP_NAME_BOO + INVALID_GROUPNAME_DESC,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseAllFieldsSpecifiedSuccess() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Name name \u003d new Name(VALID_GROUP_NAME_FRIENDS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String userInput \u003d VALID_GROUP_NAME_BOO + GROUPNAME_DESC_FRIENDS + DESCRIPTION_DESC_BOO;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand.EditGroupDescriptor descriptor \u003d new EditGroupCommand.EditGroupDescriptor();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        descriptor.setName(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        descriptor.setDescription(VALID_GROUP_DESCRIPTION_BOO);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand expectedCommand \u003d new EditGroupCommand(new Name(VALID_GROUP_NAME_BOO), descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseSomeFieldsSpecifiedSuccess() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Name name \u003d new Name(VALID_GROUP_NAME_FRIENDS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String userInput \u003d VALID_GROUP_NAME_BOO + GROUPNAME_DESC_FRIENDS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand.EditGroupDescriptor descriptor \u003d new EditGroupCommand.EditGroupDescriptor();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        descriptor.setName(name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand expectedCommand \u003d new EditGroupCommand(new Name(VALID_GROUP_NAME_BOO), descriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseMultipleRepeatedFieldsAcceptsLast() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Name name \u003d new Name(VALID_GROUP_NAME_FRIENDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String userInput \u003d VALID_GROUP_NAME_BOO + GROUPNAME_DESC_BOO + GROUPNAME_DESC_FRIENDS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand.EditGroupDescriptor descriptor \u003d new EditGroupCommand.EditGroupDescriptor();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        descriptor.setName(name);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand expectedCommand \u003d new EditGroupCommand(new Name(VALID_GROUP_NAME_BOO), descriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseInvalidValueFollowedByValidValueSuccess() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Name name \u003d new Name(VALID_GROUP_NAME_FRIENDS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String userInput \u003d VALID_GROUP_NAME_BOO + INVALID_GROUPNAME_DESC + GROUPNAME_DESC_FRIENDS;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand.EditGroupDescriptor descriptor \u003d new EditGroupCommand.EditGroupDescriptor();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        descriptor.setName(name);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        EditGroupCommand expectedCommand \u003d new EditGroupCommand(new Name(VALID_GROUP_NAME_BOO), descriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditTimetableCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DAY_AND_TIMING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TIMING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DAY_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMING_AND_DAY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMING_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAILS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EDIT_TIMETABLE_COMMAND_WITHOUT_DETAILS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EDIT_TIMETABLE_COMMAND_WITH_DETAILS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMING;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.EditTimetableCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class EditTimetableCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private EditTimetableCommandParser parser \u003d new EditTimetableCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseCompulsoryFieldMissingFailure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(MESSAGE_INVALID_COMMAND_FORMAT, EditTimetableCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String targetIndex \u003d String.valueOf(INDEX_SECOND.getOneBased()) + \" \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "        //missing both day and timing prefix"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseFailure(parser, targetIndex"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + PREFIX_DETAILS + VALID_DETAILS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // missing timing prefix"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "            targetIndex"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + PREFIX_DAY + VALID_DAY + \" \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + PREFIX_DETAILS + VALID_DETAILS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // missing day prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "            targetIndex"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + PREFIX_TIMING + VALID_TIMING + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + PREFIX_DETAILS + VALID_DETAILS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // missing timing prefix and details prefix"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "            targetIndex"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + PREFIX_DAY + VALID_DAY + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + VALID_DETAILS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // missing day prefix and details prefix"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "souless94"
        },
        "content": "            targetIndex"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + PREFIX_TIMING + VALID_TIMING + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + VALID_DETAILS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // missing all prefixes for editTimetableCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "souless94"
        },
        "content": "            targetIndex"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + VALID_DAY + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + VALID_TIMING + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + VALID_DETAILS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "souless94"
        },
        "content": "        //missing both day and timing prefix"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseFailure(parser, targetIndex,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "souless94"
        },
        "content": "        //missing index"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseFailure(parser, PREFIX_DAY"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + VALID_DAY + \" \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + PREFIX_TIMING + VALID_TIMING + \" \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "souless94"
        },
        "content": "                + PREFIX_DETAILS + VALID_DETAILS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseInvalidTimingFailure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_TIMING_DESC;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_TIMING);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseInvalidDayFailure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DAY_DESC;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_DAY);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseInvalidTimingAndInvalidDayFailure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_TIMING_AND_DAY_DESC;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_DAY_AND_TIMING);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseAllFieldsSpecifiedSuccess() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + VALID_EDIT_TIMETABLE_COMMAND_WITH_DETAILS;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "souless94"
        },
        "content": "        EditTimetableCommand expectedCommand \u003d new EditTimetableCommand(targetIndex, VALID_DAY,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "souless94"
        },
        "content": "            VALID_TIMING, VALID_DETAILS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void parseNoDetailsSuccess() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + VALID_EDIT_TIMETABLE_COMMAND_WITHOUT_DETAILS;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "souless94"
        },
        "content": "        EditTimetableCommand expectedCommand \u003d new EditTimetableCommand(targetIndex, \"friday\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "souless94"
        },
        "content": "            \"0900\", \" \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 3,
      "-": 205
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RegisterCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUPNAME_DESC_BOO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_NAME_BOO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class RegisterCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private RegisterCommandParser parser \u003d new RegisterCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseValidArgsReturnsRegisterCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseSuccess(parser, \" 1\" + GROUPNAME_DESC_BOO, new RegisterCommand("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                new Name(VALID_GROUP_NAME_BOO), INDEX_FIRST));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseInvalidArgsThrowsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                RegisterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseFailure(parser, \"a\" + GROUPNAME_DESC_BOO, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                RegisterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                RegisterCommand.MISSING_GROUP_NAME));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewGroupCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUPNAME_DESC_BOO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_NAME_BOO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.ViewGroupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class ViewGroupCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private ViewGroupCommandParser parser \u003d new ViewGroupCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseValidArgsReturnsViewCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseSuccess(parser, GROUPNAME_DESC_BOO, new ViewGroupCommand(new Name(VALID_GROUP_NAME_BOO)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void parseInvalidArgsThrowsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                ViewGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.FAMILY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.exceptions.DuplicateElementException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getGroupList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicateElementException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        List\u003cGroup\u003e newGroups \u003d Arrays.asList(FAMILY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, newGroups);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(DuplicateElementException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void has_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        addressBook.has(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void has_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(addressBook.has(ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void has_groupNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(addressBook.has(FAMILY));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void has_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        addressBook.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(addressBook.has(ALICE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void has_groupInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        addressBook.add(FAMILY);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(addressBook.has(FAMILY));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void has_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        addressBook.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(addressBook.has(editedAlice));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void has_groupWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        addressBook.add(FAMILY);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group editedFamily \u003d new GroupBuilder(FAMILY).withDescription(\"This description is changed.\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(addressBook.has(editedFamily));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void getGroupList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        addressBook.getGroupList().remove(0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons and groups list can violate interface constraints."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        private final ObservableList\u003cGroup\u003e groups \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            this.groups.setAll(groups);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            return groups;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 48,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.FAMILY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void has_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        modelManager.has(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void has_personOrGroupNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(modelManager.has(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(modelManager.has(FAMILY));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void has_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        modelManager.add(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(modelManager.has(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void has_groupInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        modelManager.add(FAMILY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(modelManager.has(FAMILY));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void getFilteredGroupList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        modelManager.getFilteredGroupList().remove(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().with(ALICE).with(BENSON).with(FAMILY).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        modelManager.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 22,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UniqueListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.BESTFRIENDS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.FAMILY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.exceptions.DuplicateElementException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.exceptions.NotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class UniqueListTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final UniqueList\u003cPerson\u003e uniquePersonList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final UniqueList\u003cGroup\u003e uniqueGroupList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.contains(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void contains_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.contains(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void contains_personNotInPersonList_returnsFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void contains_groupNotInGroupList_returnsFalse() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(uniqueGroupList.contains(FAMILY));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void contains_groupInList_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.add(FAMILY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(uniqueGroupList.contains(FAMILY));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void contains_groupWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.add(FAMILY);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group editedFamily \u003d new GroupBuilder(FAMILY).withDescription(VALID_GROUP_DESCRIPTION).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(uniqueGroupList.contains(editedFamily));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void add_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.add(null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicateElementException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(DuplicateElementException.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void add_duplicateGroup_throwsDuplicateElementException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.add(FAMILY);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(DuplicateElementException.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.add(FAMILY);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniquePersonList.setElement(null, ALICE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setGroup_nullTargetGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.setElement(null, FAMILY);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniquePersonList.setElement(ALICE, null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setGroup_nullEditedGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.setElement(FAMILY, null);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsNotFoundException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(NotFoundException.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniquePersonList.setElement(ALICE, ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setGroup_targetGroupNotInList_throwsNotFoundException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(NotFoundException.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.setElement(FAMILY, FAMILY);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniquePersonList.setElement(ALICE, ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        UniqueList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setGroup_editedGroupIsSameGroup_success() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.add(FAMILY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.setElement(FAMILY, FAMILY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        UniqueList\u003cGroup\u003e expectedUniqueGroupList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedUniqueGroupList.add(FAMILY);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(expectedUniqueGroupList, uniqueGroupList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniquePersonList.setElement(ALICE, editedAlice);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        UniqueList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setGroup_editedGroupHasSameIdentity_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.add(FAMILY);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group editedFamily \u003d new GroupBuilder(FAMILY).withDescription(VALID_GROUP_DESCRIPTION).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.setElement(FAMILY, editedFamily);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        UniqueList\u003cGroup\u003e expectedUniqueGroupList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedUniqueGroupList.add(editedFamily);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(expectedUniqueGroupList, uniqueGroupList);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniquePersonList.setElement(ALICE, BOB);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        UniqueList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setGroup_editedGroupHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.add(FAMILY);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.setElement(FAMILY, BESTFRIENDS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        UniqueList\u003cGroup\u003e expectedUniqueGroupList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedUniqueGroupList.add(BESTFRIENDS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(expectedUniqueGroupList, uniqueGroupList);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicateElementException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(DuplicateElementException.class);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniquePersonList.setElement(ALICE, BOB);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setGroup_editedGroupHasNonUniqueIdentity_throwsDuplicateElementException() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.add(FAMILY);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.add(BESTFRIENDS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(DuplicateElementException.class);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.setElement(FAMILY, BESTFRIENDS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(null);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void remove_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.remove(null);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void remove_personDoesNotExist_throwsNotFoundException() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(NotFoundException.class);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void remove_groupDoesNotExist_throwsNotFoundException() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(NotFoundException.class);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.remove(FAMILY);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        UniqueList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void remove_existingGroup_removesGroup() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.add(FAMILY);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.remove(FAMILY);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        UniqueList\u003cPerson\u003e expectedUniqueGroupList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(expectedUniqueGroupList, uniqueGroupList);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniquePersonList.setElements((UniqueList\u003cPerson\u003e) null);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setGroups_nullUniqueGroupList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.setElements((UniqueList\u003cGroup\u003e) null);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        UniqueList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniquePersonList.setElements(expectedUniquePersonList);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setGroups_uniqueGroupList_replacesOwnListWithProvidedUniqueGroupList() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.add(FAMILY);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        UniqueList\u003cGroup\u003e expectedUniqueGroupList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedUniqueGroupList.add(BESTFRIENDS);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.setElements(expectedUniqueGroupList);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(expectedUniqueGroupList, uniqueGroupList);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniquePersonList.setElements((List\u003cPerson\u003e) null);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setGroups_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.setElements((List\u003cGroup\u003e) null);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniquePersonList.setElements(personList);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        UniqueList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setGroups_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.add(FAMILY);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        List\u003cGroup\u003e groupList \u003d Collections.singletonList(BESTFRIENDS);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.setElements(groupList);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        UniqueList\u003cGroup\u003e expectedUniqueGroupList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedUniqueGroupList.add(BESTFRIENDS);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertEquals(expectedUniqueGroupList, uniqueGroupList);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicateElementException() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(DuplicateElementException.class);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniquePersonList.setElements(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void setGroups_listWithDuplicateGroups_throwsDuplicateElementException() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        List\u003cGroup\u003e listWithDuplicateGroups \u003d Arrays.asList(FAMILY, FAMILY);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(DuplicateElementException.class);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.setElements(listWithDuplicateGroups);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void asUnmodifiableObservableList_modifyPersonList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void asUnmodifiableObservableList_modifyGroupList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        uniqueGroupList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 198,
      "-": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithAmy \u003d new AddressBookBuilder().with(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithBob \u003d new AddressBookBuilder().with(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithCarl \u003d new AddressBookBuilder().with(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertAddressBookListStatus(VersionedAddressBook versionedAddressBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                                             ReadOnlyAddressBook expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code VersionedAddressBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code VersionedAddressBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private VersionedAddressBook prepareAddressBookList(ReadOnlyAddressBook... addressBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d new VersionedAddressBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedAddressBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 3,
      "-": 295
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/GroupTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_NAME_BOO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.BESTFRIENDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.FAMILY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class GroupTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group group \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        group.getGroupMembers().remove(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void isSameGroup() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(FAMILY.isSame(FAMILY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(FAMILY.isSame(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // same name but different group Members -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group editedFamily \u003d new GroupBuilder(FAMILY).withSampleMembers().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(FAMILY.isSame(editedFamily));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // same name but different description -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        editedFamily \u003d new GroupBuilder(FAMILY).withDescription(\"\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(FAMILY.isSame(editedFamily));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // different name, same description, same group members -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        editedFamily \u003d new GroupBuilder(FAMILY).withName(VALID_GROUP_NAME_BOO).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(FAMILY.isSame(editedFamily));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // different name, different description, different group members -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        editedFamily \u003d new GroupBuilder(FAMILY).withName(VALID_GROUP_NAME_BOO)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                .withDescription(VALID_GROUP_DESCRIPTION)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                .withSampleMembers().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(FAMILY.isSame(editedFamily));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(FAMILY.equals(FAMILY));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(FAMILY.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(FAMILY.equals(5));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(FAMILY.equals(\"FAMILY\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // different groups -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(FAMILY.equals(BESTFRIENDS));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // same name but different group Members -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Group editedFamily \u003d new GroupBuilder(FAMILY).withSampleMembers().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(FAMILY.equals(editedFamily));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // same name but different description -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        editedFamily \u003d new GroupBuilder(FAMILY).withDescription(\"\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(FAMILY.equals(editedFamily));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // different name, same description, same group members -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        editedFamily \u003d new GroupBuilder(FAMILY).withName(VALID_GROUP_NAME_BOO).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(FAMILY.equals(editedFamily));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        // different name, different description, different group members -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        editedFamily \u003d new GroupBuilder(FAMILY).withName(VALID_GROUP_NAME_BOO)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                .withDescription(VALID_GROUP_DESCRIPTION)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                .withSampleMembers().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(FAMILY.equals(editedFamily));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        NameContainsKeywordsPredicate\u003cPerson\u003e firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        NameContainsKeywordsPredicate\u003cPerson\u003e secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        NameContainsKeywordsPredicate\u003cPerson\u003e firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        NameContainsKeywordsPredicate\u003cPerson\u003e predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        NameContainsKeywordsPredicate\u003cPerson\u003e predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 15,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(ALICE.isSame(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(ALICE.isSame(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertFalse(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 7,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/timetable/TimetableDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.model.person.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class TimetableDataTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private String timetableString \u003d BOB.getTimetable().getTimetableDataString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private TimetableData timetableData \u003d new TimetableData(BOB.getStoredLocation(),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "        timetableString, 1, null, null, null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private TimetableData timetableDataWrongSize \u003d new TimetableData("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "        BOB.getStoredLocation(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \"0700,800,900,1000,\" + timetableString, 1, null, null, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private String wrongTimetableString \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "        \"aG9yaXpvbnRhbA\u003d\u003d,aG9yaXpvbnRhbA\u003d\u003d,\" + timetableString.substring(5);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private TimetableData timetableDataWrongFirstRow \u003d new TimetableData("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "        BOB.getStoredLocation(), wrongTimetableString, 1, null, null,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "        null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(timetableData.equals(timetableData));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertNotEquals(timetableData, null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertFalse(timetableData.equals(5));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void checkProperties() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // check if timetableData has correct size"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(timetableData.isCorrectSize());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // check if timetableData has correct first Rows and Columns"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(timetableData.hasCorrectFirstRowsAndColumns());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // check if timetableData has correct timings for boths"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertEquals(timetableData.getTimings(), timetableData.getTimings());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // check if timetableData has correct days for boths"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertEquals(timetableData.getDaysInLowerCase(), timetableData.getDaysInLowerCase());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // check wrongtimetableData has incorrect size"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertFalse(timetableDataWrongSize.isCorrectSize());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // check  wrongTimetableData has incorrect first Rows and Columns"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertFalse(timetableDataWrongFirstRow.hasCorrectFirstRowsAndColumns());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/timetable/TimetableTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.model.person.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class TimetableTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private Timetable timetable \u003d ALICE.getTimetable();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void isSameTimetable() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(timetable.isSame(timetable));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertFalse(timetable.isSame(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(timetable.equals(timetable));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertNotEquals(timetable, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertFalse(timetable.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public void checkProperties() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // check if timetable has correct size"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(timetable.isCorrectSize());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // check if timetable has correct first Rows and Columns"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue(timetable.hasCorrectFirstRowsAndColumns());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private static final String VALID_STORED_LOCATION \u003d Paths"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .get(\"src\", \"test\", \"data\").toString() + \"/\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private static final String VALID_TIMETABLE_STRING \u003d \"default\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "                VALID_TAGS, VALID_STORED_LOCATION, VALID_TIMETABLE_STRING);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "            VALID_ADDRESS, VALID_TAGS, VALID_STORED_LOCATION, VALID_TIMETABLE_STRING);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": "                VALID_TAGS, VALID_STORED_LOCATION, VALID_TIMETABLE_STRING);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "souless94"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "souless94"
        },
        "content": "            VALID_TAGS, VALID_STORED_LOCATION, VALID_TIMETABLE_STRING);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "souless94"
        },
        "content": "                VALID_TAGS, VALID_STORED_LOCATION, VALID_TIMETABLE_STRING);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "souless94"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "souless94"
        },
        "content": "            VALID_TAGS, VALID_STORED_LOCATION, VALID_TIMETABLE_STRING);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "souless94"
        },
        "content": "                VALID_TAGS, VALID_STORED_LOCATION, VALID_TIMETABLE_STRING);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "souless94"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "souless94"
        },
        "content": "            VALID_TAGS, VALID_STORED_LOCATION, VALID_TIMETABLE_STRING);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "souless94"
        },
        "content": "            new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "souless94"
        },
        "content": "                invalidTags, VALID_STORED_LOCATION, VALID_TIMETABLE_STRING);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 31,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        original.add(HOON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        original.remove(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        original.add(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 3,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.Entity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Adds a new {@code toAdd} (Group or Person) to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public AddressBookBuilder with(Entity toAdd) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        addressBook.add(toAdd);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 4,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditGroupDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand.EditGroupDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * A utility class to help with building EditGroupDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class EditGroupDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private EditGroupDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public EditGroupDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        descriptor \u003d new EditGroupDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public EditGroupDescriptorBuilder(EditGroupDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.descriptor \u003d new EditGroupDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Returns an {@code EditGroupDescriptor} with fields containing {@code group}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public EditGroupDescriptorBuilder(Group group) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        descriptor \u003d new EditGroupDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        descriptor.setName(group.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        descriptor.setDescription(group.getDescription());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        descriptor.setGroupMembers(group.getGroupMembers());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Sets the {@code Name} of the {@code EditGroupDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public EditGroupDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Sets the description of the {@code EditGroupDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public EditGroupDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        descriptor.setDescription(description);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Sets the list of group Members of the {@code EditGroupDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public EditGroupDescriptorBuilder withGroupMembers(Person[] members) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        descriptor.setGroupMembers(Arrays.asList(members));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Sets the {@code Address} of the {@code EditGroupDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public EditGroupDescriptorBuilder withGroupMembers(List\u003cPerson\u003e members) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        descriptor.setGroupMembers(members);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public EditGroupDescriptor build() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "        descriptor.setStoredLocation(person.getStoredLocation());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Sets the {@code storedLocation} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public EditPersonDescriptorBuilder withStoredLocation(String storedLocation) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String newStoredLocation \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "souless94"
        },
        "content": "            storedLocation + String.valueOf(this.hashCode()) + \" timetable.csv\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "souless94"
        },
        "content": "        descriptor.setStoredLocation(newStoredLocation);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 13,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GroupBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.UniqueList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * A utility class to help with building Group objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class GroupBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Developer Team\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Developers for NUS Hang\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private UniqueList\u003cPerson\u003e groupMembers;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public GroupBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        description \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groupMembers \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Initializes the GroupBuilder with the data of {@code groupToCopy}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public GroupBuilder(Group groupToCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        name \u003d groupToCopy.getName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        description \u003d groupToCopy.getDescription();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groupMembers \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groupMembers.setElements(groupToCopy.getGroupMembers());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Sets the {@code Name} of the {@code Group} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public GroupBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Sets the {@code description} of the {@code Group} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public GroupBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Sets the {@code groupMembers} of the {@code Group} that we are building to list of typical Persons"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * and sample Persons."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public GroupBuilder withSampleMembers() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        List\u003cPerson\u003e tmp \u003d new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        tmp.addAll(Arrays.asList(SampleDataUtil.getSamplePersons()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.groupMembers \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.groupMembers.setElements(tmp);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Parses the list of {@code persons} into a {@code UniqueList\u003cPerson\u003e} and set it to the {@code Group} that we are"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public GroupBuilder withMembers(Person[] persons) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        List\u003cPerson\u003e personsList \u003d Arrays.asList(persons);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.groupMembers \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.groupMembers.setElements(personsList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public Group build() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new Group(name, description, groupMembers);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Happytreat": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.UniqueList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String DEFAULT_STORED_LOCATION \u003d Paths"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .get(\"src\", \"test\", \"data\", \"timetable\").toAbsolutePath().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String DEFAULT_STORED_INVALID_TIMETABLE_LOCATION \u003d Paths"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .get(\"src\", \"test\", \"data\", \"wrongTimetable\").toAbsolutePath().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String DEFAULT_TIMETABLE_STRING \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private String format;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private String storedLocation;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private String timetableString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private Timetable timetable;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private UniqueList\u003cGroup\u003e groups;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groups \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "        storedLocation \u003d DEFAULT_STORED_LOCATION + \"/\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + String.valueOf(this.hashCode()) + \" timetable.csv\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File testDirectory \u003d new File(DEFAULT_STORED_LOCATION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (!testDirectory.exists()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "            testDirectory.mkdirs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "        File wrongTimetableDirectory \u003d new File(DEFAULT_STORED_INVALID_TIMETABLE_LOCATION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (!wrongTimetableDirectory.exists()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "            wrongTimetableDirectory.mkdirs();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "        timetable \u003d new Timetable(storedLocation, DEFAULT_TIMETABLE_STRING,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "            1, null, null,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "            null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "        timetableString \u003d timetable.getTimetableDataString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groups \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groups.setElements(personToCopy.getGroups());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "souless94"
        },
        "content": "        storedLocation \u003d personToCopy.getStoredLocation();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "souless94"
        },
        "content": "        timetable \u003d personToCopy.getTimetable();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "souless94"
        },
        "content": "        timetableString \u003d personToCopy.getTimetable().getTimetableDataString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Sets the {@code format} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public PersonBuilder withformat(String format) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.format \u003d format;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Sets the {@code storedLocation} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public PersonBuilder withStoredLocation(String storedLocation) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.storedLocation \u003d storedLocation + \"/\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + String.valueOf(this.hashCode()) + \" timetable.csv\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withoutAddress() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(\"\u003cno input\u003e\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withoutPhone() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(\"\u003cno input\u003e\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withoutEmail() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(\"\u003cno input\u003e\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Sets the list of groups of the {@code Person} that we are building."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public PersonBuilder withGroups(List\u003cGroup\u003e groupList) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        this.groups \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        groups.setElements(groupList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @return a person"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return new Person(name, phone, email, address, tags, storedLocation,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "souless94"
        },
        "content": "            timetableString);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 53,
      "Happytreat": 16,
      "-": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalGroups.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " * A utility class containing a list of {@code Group} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Happytreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "public class TypicalGroups {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final Group FAMILY \u003d new GroupBuilder().withName(\"Family\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            .withDescription(\"Family Group\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            .withMembers(new Person[]{ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE})"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final Group BESTFRIENDS \u003d new GroupBuilder().withName(\"Best Friends\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            .withDescription(\"Best Friend Group\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            .withMembers(new Person[]{ALICE, BENSON, DANIEL})"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final String KEYWORD_MATCHING_BEST \u003d \"Best\"; // A keyword that matches best"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    private TypicalGroups() {} // prevents instantiation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ab.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ab.add(BENSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ab.add(CARL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ab.add(DANIEL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ab.add(ELLE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ab.add(FIONA);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        ab.add(GEORGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        List\u003cPerson\u003e samplePersons \u003d Arrays.asList(SampleDataUtil.getSamplePersons());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        for (Person person : samplePersons) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            ab.add(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        for (Group group : getTypicalGroups()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            ab.add(group);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static List\u003cGroup\u003e getTypicalGroups() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(FAMILY, BESTFRIENDS));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Happytreat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Happytreat": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_CAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_CAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_CAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.testutil.PersonBuilder.DEFAULT_STORED_LOCATION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withTags(\"friends\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withStoredLocation(DEFAULT_STORED_LOCATION).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withStoredLocation(DEFAULT_STORED_LOCATION).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withAddress(\"wall street\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withStoredLocation(DEFAULT_STORED_LOCATION).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withAddress(\"10th street\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withTags(\"friends\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withStoredLocation(DEFAULT_STORED_LOCATION).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withStoredLocation(DEFAULT_STORED_LOCATION).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withStoredLocation(DEFAULT_STORED_LOCATION).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withEmail(\"anna@example.com\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withAddress(\"4th street\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withStoredLocation(DEFAULT_STORED_LOCATION).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withPhone(\"8482424\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withEmail(\"stefan@example.com\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withAddress(\"little india\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withStoredLocation(DEFAULT_STORED_LOCATION)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withPhone(\"8482131\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withEmail(\"hans@example.com\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withStoredLocation(DEFAULT_STORED_LOCATION)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withStoredLocation(DEFAULT_STORED_LOCATION)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .withStoredLocation(DEFAULT_STORED_LOCATION)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CAT \u003d new PersonBuilder().withName(VALID_NAME_CAT)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_CAT)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_CAT).withAddress(VALID_ADDRESS_CAT)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            .withStoredLocation(DEFAULT_STORED_LOCATION)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"n/Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "souless94"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "            ab.add(person);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 55,
      "Happytreat": 1,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(ALICE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "        // associated web page of a person TODO change expectedPersonUrl when done uploading the page"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "        URL expectedPersonUrl \u003d new URL("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "            BrowserPanel.ONLINE_PAGE_URL + ALICE.getTimetable().getTimetableAsString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 5,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aspiringdevslog"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aspiringdevslog": 1,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "        INDEX_SECOND);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .getPersonCardHandle(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * requires lesser than {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getPersonList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * the JVM terminates."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "souless94"
        },
        "content": "            builder.append(\"\u003cstoredLocation\u003edefault\u003c/storedLocation\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "souless94"
        },
        "content": "            builder.append("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "souless94"
        },
        "content": "                \"\u003ctimetableString\u003eIA\u003d\u003d,MDgwMA\u003d\u003d,MDkwMA\u003d\u003d,MTAwMA\u003d\u003d,MTEwMA\u003d\u003d,MTIwMA\u003d\u003d,MTMwMA\u003d\u003d,\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    + \"MTQwMA\u003d\u003d,MTUwMA\u003d\u003d,MTYwMA\u003d\u003d,MTcwMA\u003d\u003d,MTgwMA\u003d\u003d,MTkwMA\u003d\u003d,MjAwMA\u003d\u003d,MjEwMA\u003d\u003d,MjIwMA\u003d\u003d,MjMwMA\u003d\u003d\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    + \"TW9uZGF5,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    + \"VHVlc2RheQ\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    + \"V2VkbmVzZGF5,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    + \"VGh1cnNkYXk\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    + \"RnJpZGF5,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    + \"U2F0dXJkYXk\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    + \"U3VuZGF5,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d,IA\u003d\u003d\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    + \"\u003c/timetableString\u003e\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyPersonsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyPersons.xml\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * backingList}. Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 25,
      "Happytreat": 1,
      "-": 116
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.CreateCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "        /* Case: create account and login first */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String createCommand \u003d CreateCommand.COMMAND_WORD + \" u/user pw/pass\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "        executeCommand(createCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" u/user pw/pass\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "        executeCommand(loginCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.add(toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        //command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        //assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        //command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        //assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        //assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.add(toAdd);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 8,
      "Happytreat": 2,
      "-": 246
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": " * helper methods for test verification."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "        .asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}. Method returns after UI"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * components have been updated."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "souless94"
        },
        "content": "            getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * (case-insensitive)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "souless94"
        },
        "content": "            getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "souless94"
        },
        "content": "                .size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * ResultDisplay} displays {@code expectedResultMessage}, the storage contains the same person"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * objects as {@code expectedModel} and the person list panel displays the persons in the model"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * correctly."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "souless94"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedResultMessage,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "souless94"
        },
        "content": "            testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * StatusBarFooterHandle} to remember their current state."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * displaying the details of the previously selected person."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * list panel at {@code expectedSelectedCardIndex}, and only the card at {@code"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "souless94"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertEquals(expectedUrl, expectedUrl);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "souless94"
        },
        "content": "         */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertEquals(\"hi\", \"hi\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * unchanged."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of {@code"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE),"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "souless94"
        },
        "content": "            getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 42,
      "-": 265
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.CreateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "        /* Case: create account and login first */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String createCommand \u003d CreateCommand.COMMAND_WORD + \" u/user pw/pass\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "        executeCommand(createCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" u/user pw/pass\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "        executeCommand(loginCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * result display box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * components equal to an empty model. These verifications are done by {@code"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e Also"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * verifies that the command box has the default style class and the status bar\u0027s sync status"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * changes."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to {@code"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * expectedModel}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Model expectedModel) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * result display box displays {@code expectedResultMessage} and the model related components"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * equal to the current model. These verifications are done by {@code"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e Also"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * verifies that the browser url, selected card and status bar remain unchanged, and the command"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * box has the error style."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 28,
      "-": 87
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.CreateCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "        /* Case: create account and login first */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String createCommand \u003d CreateCommand.COMMAND_WORD + \" u/user pw/pass\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "        executeCommand(createCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" u/user pw/pass\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "        executeCommand(loginCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String command \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": "            \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Index index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "souless94"
        },
        "content": "            MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "souless94"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "souless94"
        },
        "content": "            MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.delete(targetPerson);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * {@code toDelete} and performs the same verification as {@code assertCommandSuccess(String,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Model, String)}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "souless94"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "souless94"
        },
        "content": "            expectedResultMessage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e 1. Asserts that the command box displays an"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * empty string.\u003cbr\u003e 2. Asserts that the result display box displays {@code"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * expectedResultMessage}.\u003cbr\u003e 3. Asserts that the browser url and selected card remains"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * unchanged.\u003cbr\u003e 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e 5. Asserts that the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * command box has the default style class.\u003cbr\u003e Verifications 1 and 2 are performed by {@code"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedResultMessage) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * that the browser url and selected card are expected to update accordingly depending on the"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String expectedResultMessage,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e 1. Asserts that the command box displays {@code"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * command}.\u003cbr\u003e 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e 4."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Asserts that the command box has the error style.\u003cbr\u003e Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 42,
      "Happytreat": 4,
      "-": 165
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.CreateCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "        /* Case: create account and login first */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String createCommand \u003d CreateCommand.COMMAND_WORD + \" u/user pw/pass\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "        executeCommand(createCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" u/user pw/pass\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "        executeCommand(loginCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        Index index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        model.update("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        index \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        index \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        expectedModel.update(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 8,
      "Happytreat": 18,
      "-": 281
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.CreateCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "        /* Case: create account and login first */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String createCommand \u003d CreateCommand.COMMAND_WORD + \" u/user pw/pass\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "        executeCommand(createCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" u/user pw/pass\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "        executeCommand(loginCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Carl\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Benson Daniel\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel Benson\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/MeIeR\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Mei\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Meiers\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Mark\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 8,
      "-": 170
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Happytreat": 3,
      "-": 104
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.CreateCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "        /* Case: create account and login first */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String createCommand \u003d CreateCommand.COMMAND_WORD + \" u/user pw/pass\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "        executeCommand(createCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" u/user pw/pass\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "        executeCommand(loginCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Happytreat"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 8,
      "Happytreat": 4,
      "-": 150
    }
  },
  {
    "path": "unused/OpenTimetableCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": " * opens the timetable of the person"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class OpenTimetableCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open_timetable\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "        COMMAND_WORD + \": open timetable file of the person identified \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"by the index number used in the displayed person list.\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \" \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"Parameters : INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_OPEN_TIMETABLE_SUCCESS \u003d \"timetable opened successfully\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public OpenTimetableCommand(Index index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToOpenTimetable \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String location \u003d personToOpenTimetable.getTimetable().getStoredLocation();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "            Desktop.getDesktop().open(new File(location));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return new CommandResult(MESSAGE_OPEN_TIMETABLE_SUCCESS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 63
    }
  },
  {
    "path": "unused/OpenTimetableCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.OpenTimetableCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": " * Parses input arguments and creates a new OpemTimetableCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class OpenTimetableCommandParser implements Parser\u003cOpenTimetableCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the OpenTimetableCommand and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * returns an OpenTimetableCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public OpenTimetableCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return new OpenTimetableCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenTimetableCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "                pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 32
    }
  },
  {
    "path": "unused/ViewTimetablePropertiesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": " * view timetable stored folder and download folder from person"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class ViewTimetablePropertiesCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view_timetable\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "        COMMAND_WORD + \": view timetable download and stored folders from the person identified\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"file must be created in the folders. \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"Parameters : INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * location of the download and stored folder is gotten from the person"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public ViewTimetablePropertiesCommand(Index index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "souless94"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "souless94"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "souless94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "souless94"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "souless94"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "souless94"
        },
        "content": "        Person personToViewTimetable \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "souless94"
        },
        "content": "        boolean doesStoredFolderExists \u003d new File(personToViewTimetable.getStoredLocation())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .exists();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "souless94"
        },
        "content": "        boolean doesDownloadFolderExists \u003d new File(personToViewTimetable.getDownloadLocation())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "souless94"
        },
        "content": "            .exists();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "souless94"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "souless94"
        },
        "content": "        if (!doesDownloadFolderExists) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "souless94"
        },
        "content": "            message \u003d \"there is no such download folder in your computer\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } else if (!doesStoredFolderExists) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "souless94"
        },
        "content": "            message \u003d \"there is no such stored folder in your computer\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } else if (!doesStoredFolderExists \u0026\u0026 !doesDownloadFolderExists) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "souless94"
        },
        "content": "            message \u003d \"there is no such download and stored folder in your computer\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "souless94"
        },
        "content": "            message \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "souless94"
        },
        "content": "                \"location of download folder is at : \" + personToViewTimetable.getDownloadLocation()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    + \".\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    + \"location of stored folder is at : \" + personToViewTimetable"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    .getStoredLocation()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    + \".\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "souless94"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 72
    }
  },
  {
    "path": "unused/ViewTimetablePropertiesCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "souless94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "souless94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.commands.ViewTimetablePropertiesCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "souless94"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "souless94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "souless94"
        },
        "content": " * Parses input arguments and creates a new ViewTimetablePropertiesCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "souless94"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "souless94"
        },
        "content": "public class ViewTimetablePropertiesCommandParser implements"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "souless94"
        },
        "content": "    Parser\u003cViewTimetablePropertiesCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "souless94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "souless94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * ViewTimetablePropertiesCommand and returns an ViewTimetablePropertiesCommand object for"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "souless94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "souless94"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "souless94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "souless94"
        },
        "content": "    public ViewTimetablePropertiesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "souless94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "souless94"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "souless94"
        },
        "content": "            return new ViewTimetablePropertiesCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "souless94"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "souless94"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "souless94"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "souless94"
        },
        "content": "                    ViewTimetablePropertiesCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "souless94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "souless94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "souless94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "souless94": 32
    }
  }
]
