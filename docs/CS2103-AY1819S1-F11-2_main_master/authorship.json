[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Concierge v1.2"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-F11-2/main[image:https://travis-ci.org/CS2103-AY1819S1-F11-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "https://ci.appveyor.com/project/CS2103-AY1819S1-F11-2/main[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-F11-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-F11-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* Concierge is a desktop Hotel Management application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* It is a concise Java application intended for small hotels looking for a simple application to manage basic hotel features."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* Value Proposition"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "** A simple, intuitive and free command line tool for managing a small-scale hotel."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "** Hassle-free for receptionists in managing day-to-day hotel operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "** A logistics tool that generates insightful reports for hotel managers to assess hotel efficiency"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": "* The original source of the code is Concierge - level 4 : https://github.com/se-edu/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "adamwth": 8,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    archiveName \u003d \u0027concierge.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027Concierge\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-F11-2/main\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "-": 245
    }
  },
  {
    "path": "data/concierge.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003cconcierge\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003cname\u003eAlex Yeoh\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003cphone\u003e87438807\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003cemail\u003ealexyeoh@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003caddress\u003eBlk 30 Geylang Street 29, #06-40\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003cname\u003eBernice Yu\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003cphone\u003e99272758\u003c/phone\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003cemail\u003eberniceyu@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003caddress\u003eBlk 30 Lorong 3 Serangoon Gardens, #07-18\u003c/address\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ctagged\u003ecolleagues\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cname\u003eCharlotte Oliveiro\u003c/name\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cphone\u003e93210283\u003c/phone\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cemail\u003echarlotte@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003caddress\u003eBlk 11 Ang Mo Kio Street 74, #11-04\u003c/address\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003ctagged\u003eneighbours\u003c/tagged\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cname\u003eDavid Li\u003c/name\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cphone\u003e91031282\u003c/phone\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cemail\u003elidavid@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003caddress\u003eBlk 436 Serangoon Gardens Street 26, #16-43\u003c/address\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003ctagged\u003efamily\u003c/tagged\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cname\u003eIrfan Ibrahim\u003c/name\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cphone\u003e92492021\u003c/phone\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cemail\u003eirfan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003caddress\u003eBlk 47 Tampines Street 20, #17-35\u003c/address\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003ctagged\u003eclassmates\u003c/tagged\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cname\u003eRoy Balakrishnan\u003c/name\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cphone\u003e92624417\u003c/phone\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cemail\u003eroyb@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003caddress\u003eBlk 45 Aljunied Street 85, #11-31\u003c/address\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003ctagged\u003ecolleagues\u003c/tagged\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e001\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e002\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e003\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e004\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e005\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e006\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e007\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e008\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e009\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e010\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003ccapacity\u003e5\u003c/capacity\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e011\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e012\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e013\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e014\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e015\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e016\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e017\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e018\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e019\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e020\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e5\u003c/capacity\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e021\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e022\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e023\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003croomNumber\u003e024\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e025\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e026\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e027\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e028\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e029\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e030\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e5\u003c/capacity\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e031\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e032\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e033\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e034\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e035\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e036\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e037\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e038\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e039\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e040\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e5\u003c/capacity\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e041\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e042\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e043\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e044\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e045\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e046\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e047\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e048\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e049\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e050\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e5\u003c/capacity\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e051\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e052\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e053\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e054\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e055\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e056\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e057\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e058\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e059\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e060\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e5\u003c/capacity\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e061\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e062\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e063\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e064\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e065\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e066\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e067\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e068\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003croomNumber\u003e069\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e070\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e5\u003c/capacity\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e071\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e072\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e073\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e074\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e075\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e076\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e077\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e078\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e079\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e080\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e5\u003c/capacity\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e081\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e082\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e083\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e084\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e085\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e086\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e087\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e088\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e089\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e090\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e5\u003c/capacity\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e091\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e092\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e093\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e094\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e095\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e096\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e097\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e098\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e2\u003c/capacity\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e099\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e1\u003c/capacity\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003crooms\u003e"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003croomNumber\u003e100\u003c/roomNumber\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \u003ccapacity\u003e5\u003c/capacity\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/rooms\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cmenu\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003ckey\u003eRS03\u003c/key\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemNumber\u003eRS03\u003c/itemNumber\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemName\u003eRoom service: Thai massage\u003c/itemName\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemCost\u003e100.0\u003c/itemCost\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003ckey\u003eRS01\u003c/key\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemNumber\u003eRS01\u003c/itemNumber\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemName\u003eRoom service: Red wine\u003c/itemName\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemCost\u003e50.0\u003c/itemCost\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003ckey\u003eMB02\u003c/key\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemNumber\u003eMB02\u003c/itemNumber\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemName\u003eMinibar: Sprite\u003c/itemName\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemCost\u003e3.0\u003c/itemCost\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003ckey\u003eRS02\u003c/key\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemNumber\u003eRS02\u003c/itemNumber\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemName\u003eRoom service: Beef steak\u003c/itemName\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemCost\u003e70.0\u003c/itemCost\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003ckey\u003eMB01\u003c/key\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemNumber\u003eMB01\u003c/itemNumber\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemName\u003eMinibar: Coca cola\u003c/itemName\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemCost\u003e3.0\u003c/itemCost\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003ckey\u003eSP01\u003c/key\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemNumber\u003eSP01\u003c/itemNumber\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemName\u003eSwimming pool: Entry\u003c/itemName\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemCost\u003e5.0\u003c/itemCost\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003ckey\u003eMB04\u003c/key\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemNumber\u003eMB04\u003c/itemNumber\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemName\u003eMinibar: Mineral water\u003c/itemName\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemCost\u003e3.0\u003c/itemCost\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003ckey\u003eMB03\u003c/key\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemNumber\u003eMB03\u003c/itemNumber\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemName\u003eMinibar: Tiger beer\u003c/itemName\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003citemCost\u003e6.0\u003c/itemCost\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/menu\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003c/concierge\u003e"
      }
    ],
    "authorContributionMap": {
      "teowz46": 2,
      "JIaqingTan": 304,
      "adamwth": 206
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Concierge was developed by the CS2103 F11-2 team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": "\u003d\u003d\u003d Adam Chew Yong Soon"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "image::adamwth.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": "{empty}[https://github.com/adamwth[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Responsibilities: UI Design, Model Component, JavaFX expert +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Side-responsiblities: Scheduling and tracking, Integration"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "\u003d\u003d\u003d Joyce Yeo Shu Hui"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "image::pikulet.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "{empty}[http://github.com/pikulet[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Responsibilities: Documentation, Storage Component, IntelliJ expert +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Side-responsiblities: Deliverables and deadlines"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "\u003d\u003d\u003d Teo Wei Zheng"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "image::teowz46.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "{empty}[http://github.com/teowz46[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Responsibilities: Logic Component, Travis CI expert +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Side-responsiblities: Deliverables and deadlines"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "\u003d\u003d\u003d Tan Jia Qing"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": "image::jiaqingtan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "{empty}[http://github.com/JiaqingTan[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Responsibilities: UI Design \u0026 Implementation, UI Component, JavaFX expert +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Side-responsiblities: Code quality"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": "\u003d\u003d\u003d Neil Mehta"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "image::neilish3re.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "{empty}[http://github.com/neilish3re[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Responsibilities: Testing, Commons Component, JUnit expert +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Side-responsiblities: Git expert"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "adamwth": 29,
      "-": 33
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teowz46"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-F11-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": "* *Email us* : You can also reach us at `thetravisthingy [at] gmail.com`."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "teowz46": 3,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003d Concierge Level 4 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-F11-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teowz46"
        },
        "content": "Note how the `Model` simply raises a `ConciergeChangedEvent` when Concierge data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "teowz46"
        },
        "content": ".  `Logic` uses the `ConciergeParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "adamwth"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a guest) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "teowz46"
        },
        "content": "* stores Concierge data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cGuest\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "teowz46"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Concierge`, which `Guest` can reference. This would allow `Concierge` to only require one `Tag` object per unique `Tag`, instead of each `Guest` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "teowz46"
        },
        "content": "* can save Concierge data in xml format and read it back."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "teowz46"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedConcierge`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "teowz46"
        },
        "content": "It extends `Concierge` with an undo/redo history, stored internally as an `conciergeStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "teowz46"
        },
        "content": "* `VersionedConcierge#commit()` -- Saves the current Concierge state in its history."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "teowz46"
        },
        "content": "* `VersionedConcierge#undo()` -- Restores the previous Concierge state from its history."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "teowz46"
        },
        "content": "* `VersionedConcierge#redo()` -- Restores a previously undone Concierge state from its history."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "teowz46"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitConcierge()`, `Model#undoConcierge()` and `Model#redoConcierge()` respectively."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "teowz46"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedConcierge` will be initialized with the initial Concierge state, and the `currentStatePointer` pointing to that single Concierge state."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "teowz46"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th guest in Concierge. The `delete` command calls `Model#commitConcierge()`, causing the modified state of Concierge after the `delete 5` command executes to be saved in the `conciergeStateList`, and the `currentStatePointer` is shifted to the newly inserted Concierge state."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "teowz46"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new guest. The `add` command also calls `Model#commitConcierge()`, causing another modified Concierge state to be saved into the `conciergeStateList`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "teowz46"
        },
        "content": "If a command fails its execution, it will not call `Model#commitConcierge()`, so Concierge state will not be saved into the `conciergeStateList`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "teowz46"
        },
        "content": "Step 4. The user now decides that adding the guest was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoConcierge()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous Concierge state, and restores Concierge to that state."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "teowz46"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial Concierge state, then there are no previous Concierge states to restore. The `undo` command uses `Model#canUndoConcierge()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "teowz46"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoConcierge()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores Concierge to that state."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "teowz46"
        },
        "content": "If the `currentStatePointer` is at index `conciergeStateList.size() - 1`, pointing to the latest Concierge state, then there are no undone Concierge states to restore. The `redo` command uses `Model#canRedoConcierge()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "teowz46"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify Concierge, such as `list`, will usually not call `Model#commitConcierge()`, `Model#undoConcierge()` or `Model#redoConcierge()`. Thus, the `conciergeStateList` remains unchanged."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "teowz46"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitConcierge()`. Since the `currentStatePointer` is not pointing at the end of the `conciergeStateList`, all Concierge states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "teowz46"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire Concierge."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "adamwth"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the guest being deleted)."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "teowz46"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of Concierge states."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "teowz46"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedConcierge`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d AddCommand"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "The `add` command is used by the receptionist to add the guest to the hotel,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "and assign him a room."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "We currently accept a `Guest`, `RoomNumber` and `BookingPeriod`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "as parameters for the `AddCommand` constructor."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "An example of its usage:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/Madith p/83141592 e/madith@themyth.com a/Recluse Street -r 041 from/"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "29/10/2018 to/ 03/11/2018`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "The parsing of the `AddCommand` is very similar to what was already"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "teowz46"
        },
        "content": "implemented in Concierge4. More parameters were added, namely the"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "`RoomNumber` and `BookingPeriod`. These are parsed to create the respective"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "objects - `Guest`, `RoomNumber` and `BookingPeriod`."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "teowz46"
        },
        "content": "As in Concierge4, the `Logic` component parses the `AddCommand`, and the"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "`Model` handles its execution."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* In the `Model`, the `Guest` is added to Concierge. This was already"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "teowz46"
        },
        "content": "implemented in Concierge4."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* A new `Booking` object is created with the `Guest` and `BookingPeriod` as"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "its parameters."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* This `Booking` is then added to the `Room` with the `RoomNumber` specified."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "An Activity Diagram for the execution of `execute(Model model, CommandHistory"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": " history)` is shown below."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "image::AddCommand-activity-diagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to recognise a `BookingPeriod` from the user input?"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "The relationship we defined between a `Room` and `Booking` is that a `Room`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "has a `Booking`. The `Booking` then comprises a `Guest` and `BookingPeriod`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "field."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "However, it is troublesome to enter a `BookingPeriod` manually, as it entails"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": " entering two dates in the DD/MM/YYYY format."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Enter the start and end date of"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "`BookingPeriod`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Very easy to parse. The checks for dates all occur at the"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "`BookingPeriod` class. There is no conversion needed to track the exact date,"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": " which is useful to check for the booking status of rooms on a particular date."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Not user-friendly. Requires user to enter two dates."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2 (coming in v1.5):** Enter the start date and a duration"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Very intuitive and user-friendly."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: The duration has to be parsed and converted to an end date. The"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "current implementation of `BookingPeriod` does not support this method."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Reducing redundancy in `UniqueGuestList` and `UniqueRoomList`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "As one can observe in the current implementation, `Guest` is added to the"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "guest list of Concierge and is then used again to make a `Booking`. The"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "`Booking` is added to Concierge, this time under the room list."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "There is a repetition of the addition of a guest - it is added to both the"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "`UniqueGuestList` and the `UniqueRoomList`. In an actual use case of"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "Concierge, we rarely if not never add the `Guest` to the `UniqueGuestList`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "without assigning him a `Room` under the `UniqueRoomList`."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "In its cleanest case, the structure of Concierge would be as follows:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "Concierge contains a `UniqueRoomList`. Each room in this internalList may"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "consist multiple `Booking` s. Each `Booking` is tagged to one `Guest` and one"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "`BookingPeriod`. An illustration of this relationship is shown below."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "image::addCommand-class-diagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Keep both the `UniqueGuestList` and"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "`UniqueRoomList`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Maintaining a separate list of guests currently allows us to quickly"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": " check for the `DuplicateGuestException`."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: The list is only useful for guest-specific functions. To find the"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "`Room` the guest is assigned to, we still have to work through the"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "`UniqueRoomList`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Remove the `UniqueGuestList`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Remove the redundancy in maintaining two lists. Improved storage space."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Unable to quickly check for a `DuplicateGuestException`. However, we"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": " must also note that the `DuplicateGuestException` is something we may want"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": " to remove in future iterations. That is, a `Guest` should be able to make"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": " multiple `Booking` s. However, this would lead to more complications -"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": " during `checkout`, we have to look through all the `Booking` s and ensure"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": " that the `Guest` is no longer needed in the Concierge system. Only then can"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": " we move the `Guest` to an archive or remove him from the system."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: Reduce coupling between `Room` and `Guest`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Semantically, we can observe a strong coupling and dependency between `Room`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "and `Guest`. A `Room` contains a `Guest`, and a `Guest` also has a `Room`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "This coupling is more binding than that between `UniqueGuestList` and"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "`UniqueRoomList` as described above."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "Having to keep track of both sides of the coin introduces an unnecessary"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "coupling between these two classes. Our team decided to record `Guest` in"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "`Room` instead of recording `Room` in `Guest`. The difference between these"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "two selections lies in the time needed for different operations."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Add `Guest` as a field in `Room`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: An efficient for managing bookings. All the `Booking` s tied to a"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "particular `Room` can be put together, allowing the Receptionist to determine"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": " if a `Room` can be booked in `O(m)` time, where `m` is the number of"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": " `Booking` s in a room. In the context of Concierge, there is a rare chance"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": " that a `Room` will have a large number of advanced bookings being made."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: It is difficult to find the `Room` given the `Guest`. When a"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "`Guest` has made and advanced booking and wishes to cancel it, we have"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "to search through all the `Room` s for bookings on the particular date"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "tagged to the `Guest`. However, given the `BookingPeriod` of the"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "`Guest`, this can be done in `O(1)` time since the number of `Room` s is"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "constant."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "*** For most uses of Concierge, we expect `Guest` s to be aware of their"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": " `Room` s. When the `Guest` calls for room service, we can tag the service"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": " to the `Room` instead."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Add `Room` as a field in `Guest`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Very customer-centric design. Allows the receptionist to find the"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "`Room` or `Booking` details of a `Guest` in `O(1)` time."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Making a new `Booking` with a new `Guest` is highly inefficient."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "Because the `Booking` information is now scattered across individual"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "`Guest` s, the search space for `Concierge` to decide if a `Room` is free to"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "book is the entire `UniqueGuestList`."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003d\u003d\u003d Rooms List Feature"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "The rooms list feature builds upon, and reuses functions from the originally implemented ListCommand."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "The UML Diagram for the current implementation of ListCommand is as follows:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "image::ListCommandUml.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "The list function is facilitated by a modified `ListCommand` class, of which the input from the CommandBox is parsed by a `ListCommandParser` class."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "The list function now requires a flag after the \u0027list\u0027 command. Below are the two allowed list commands:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "* `list -g` - Lists all guests."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "* `list -r` - Lists all rooms."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "A `ListCommandParser` class was created to obtain and compare the flags from inputs, which required a different approach to the rest of the commands. The input string is simply split using a String function, obtaining an array of strings, of which the flags will be at index 1."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "Modification of existing FXML files, and creation of new FXML files was done to achieve separate listing of guests and rooms, and the browser panel was replaced with a panel to focus on, and display more detailed information on the selected guest/room."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "In order to stack the UI elements on top of one another to reuse and display the separate lists under the same column, modifications were made to the `MainWindow.fxml` file."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "The GuestListPanel and RoomListPanel each has a \"VBox\" element encapsulating them, which visibility is toggled and the element itself enabled or disabled based on the flag that was obtained from the parser. This feature extends to the GuestDetailedPanel and RoomDetailedPanel and is achieved in the same way."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to display each list"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "* **Alternative 1 :** Maintain two columns on the MainWindow UI to display both rooms and guests"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "** Pros: Easier to modify UI by adding on instead of modifying and replacing, and modifications in the future will not be too tedious."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "** Cons: UI looks cluttered with an empty column when not displaying the other, not an efficient use of screen space."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "* **Alternative 2 (current choice):** Separately display the two lists within the same MainWindow UI space/column."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "** Pros: Cleaner looking, fully utilises empty spaces. Better visual feedback from commands as inputs."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "** Cons: Requires heavy modification of MainWindow UI files, future features must stick with the restriction of having a list of either guests or rooms."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Command Archive feature"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the UML diagram for the `CommandArchive` Class:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandArchive_class.png[width\u003d\"280\"]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the UML diagram for the `CommandHistory` Class:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandHistory_class.png[width\u003d\"345\"]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "The Command Archive mechanism is facilitated by `CommandArchive`."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "It utilises the `userInputHistory` to extract the latest command that the user has input and passes the `inputString`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "to `stringToFile` method in `CommandArchive` class. The `inputString` is then appended to the `CommandFile.txt` file. Additionally, it"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "implements the following operations:"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "* `StringBuilder()` -- The main operations of the `StringBuilder` are the `append` and `insert` methods which can"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "be overloaded to accept data of any type. The `append` method always adds these characters at the end of the builder."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "This operation can be found in `CommandHistory`."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "* `toString()` -- Converts the StringBuilder object into a string named `inputString` so it can be passed to the"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "`CommandArchive` class. This operation can be found in `CommandHistory`."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "* `getLogger()` -- Creates `LOGGER` so that it can log any `IOExceptions` that are caught in the catch blocks of the"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "methods found in `stringToFile` method of `CommandArchive`."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "* `substring()` -- Extracts the latest command from the `userInputHistory`. This is required because the"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "`userInputHistory` appends all the older commands into the LinkedList as well. This is done by looking for the first"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": " newLine character occurrence of the `inputString`. The substring is then extracted as `latestUserCommand`."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "This operation can be found in `CommandArchive`."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": " * `simpleDateFormat()` -- Creates a `timeStamp` in DD/MM/YYY format that can later be appended to"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "`latestUserCommand`. This operation can be found in `CommandArchive`."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": " * `fileWriter` -- Writes the stream of characters (which is `latestUserCommand`) to `commandHistory` file. This will"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "eventually be the output that is written into `commandFile.txt` via `PrintWriter`. The `PrintWriter` also appends"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "`timeStamp` to the latest entry (which is eventually `timeStamp` + `latestUserCommand`). This operation can be found"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "in CommandArchive`."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to extract userInputHistory"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** `userInputHistory` is first put into a `stringBuilder` and then converted to"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "string to then pass to `CommandArchive`."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "1. Easy to implement because `StringBuilder` can utilise `append` and `insert` methods, which can be overloaded"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "to accept any data."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "2. Faster than `StringBuffer` under most implementations."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "3. StringBuilder is mutable while String is immutable."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: String is more optimised especially if you don\u0027t need the extra features of `StringBuilder`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Create a KeyLogger class that implements KeyListener to capture userInput."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: It is more secure and can only be accessed for audits and other administrative access purposes and is hidden"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "from the user."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "1. If implemented wrongly, it will become a global KeyLogger that captures userInput outside of application."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "2. Does not utilise the existing infrastructure and data found in the base level program class `CommandHistory` and"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "hence would require more effort to implement."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::checkin[]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Room Check-in/Checkout feature"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "The room check-in and checkout features are facilitated by `UniqueRoomList`."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "The logic that supports the check-in and checkout operations reside in the classes in the `Room` and `Booking` packages."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "* `UniqueRoomList#checkin(RoomNumber)` -- Checks in the active booking of the room identified by the given room number"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "* `UniqueRoomList#checkout(RoomNumber)` -- Checks out the first booking in the list of bookings of the room identified by the given room number."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "* Active booking refers to a booking that includes today\u0027s date."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "* The room maintains a sorted list of bookings. The first booking refers to the first in chronological order."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "* A room can be checked out regardless of its checked-in status. Thus, `checkout` doubles as a command to delete bookings."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#checkin()` and `Model#checkout()` respectively."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the check-in/checkout mechanism behaves at each step."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "Assuming there is a booking already added to room 001,"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "* The user executes `checkin 001` when the guest arrives."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ". The `checkin` command takes in a `RoomNumber` argument and calls `Model#checkinRoom` as such: `Model.checkinRoom(roomNumber)`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "teowz46"
        },
        "content": ". `ModelManager#checkinRoom` (which implements Model) will call `VersionedConcierge#checkinRoom`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "teowz46"
        },
        "content": ". `VersionedConcierge#checkinRoom` will call `UniqueRoomList#checkinRoom`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ". `UniqueRoomList#checkinRoom` will call `UniqueRoomList#getRoom` to get the room using its RoomNumber, followed by"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "`Room#checkin`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ". `Room#checkin` will"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ".. throw `NoBookingException` if the room has no bookings"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ".. throw `NoActiveBookingException` if the room has no active bookings"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ".. throw `OccupiedRoomCheckInException` if the room\u0027s active booking is already checked in"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ".. update the active booking as checked-in"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "* The user executes `checkout 001` when the guest leaves."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ". The `checkout` command follows step 1 to 4 of the `checkin` command, just replace occurences of \"checkin\" to \"checkout\""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ". `Room#checkout` will"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ".. throw `NoBookingException` if the room has no bookings"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ".. throw `NoActiveOrExpiredBookingException` if the room has no active or expired bookings"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ".. delete the first booking from the list of bookings"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "adamwth"
        },
        "content": "The following sequence diagram shows how to CheckinCommand operations works:"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "adamwth"
        },
        "content": "image::CheckinCommandSequenceDiagram.png[width\u003d\"1280\"]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How check-in/checkout executes"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Check-in only the active booking, and check-out only the first expired or active booking regardless of check-in status."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Natural, because the receptionist will only check-in guests who have a booking during their booking period, not before or after (even if the receptionist forgets)."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "On the other hand, receptionist may forget to checkout a guest on the system, resulting in an expired booking. Thus, we allow checking out of a room with an expired booking."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "Checkout acts as a delete booking feature, since it ignores the check-in status of a room\u0027s active booking."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "The ability to delete upcoming bookings is planned for v1.3."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Have to check for many exceptions."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Check-in only the active booking, and check-out only active booking."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Stricter checks on check-in/checkout, leading to less chance of error."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Many various real-life situations to consider."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Immutability of check-in command"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Check-in a room by creating a new copy of the room with the check-in flag set to true."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Debugging is easy. Consistent with the rest of the application."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Check-in method becomes unintuitive, since a new room is returned from the operation, instead of a void method simply setting the room property."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Check-in a room by changing its check-in flag to true."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Check-in method is intuitive, and does not return a new room."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Harder to debug. Tests also become troublesome since changes are made to the same referenced room."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "adamwth"
        },
        "content": "// end::checkin[]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "teowz46"
        },
        "content": "// tag::expenses[]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003d\u003d\u003d Expense, Expenses and ExpenseType"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "teowz46"
        },
        "content": "In Concierge, users will be given the feature of tracking the expenditure of each individual"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "teowz46"
        },
        "content": "guest, in order to facilitate checkout charges. Hence, the three classes, `Expenses`, `Expense`"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "teowz46"
        },
        "content": "and `ExpenseType` have been created for this purpose. In addition, the hotel also has a"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "teowz46"
        },
        "content": "`menu` of goods and services available."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "teowz46"
        },
        "content": "`ExpenseType` objects are essentially immutable objects that represent a single item or service"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "teowz46"
        },
        "content": "being sold at the hotel. An `ExpenseType` object contains information about its menu number,"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "teowz46"
        },
        "content": "usual price, and description. The main purpose of this class is for convenience; users may"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "teowz46"
        },
        "content": "charge a customer by simply providing the menu number of the item and the cost and description"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "teowz46"
        },
        "content": "of the item will be able to be referenced. `ExpenseType` information is stored in a `Menu`"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "teowz46"
        },
        "content": "object, which is then stored on the hard disk, since users should have the ability to modify"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "teowz46"
        },
        "content": "the menu manually. The `Menu` object is internally represented with a `HashMap\u003cString, ExpenseType\u003e`,"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "teowz46"
        },
        "content": "with the menu number as keys and the `ExpenseType` objects as values. This allows for the"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "teowz46"
        },
        "content": "serialisation of the `Menu` into XML, since `HashMap` is supported by JAXB."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "teowz46"
        },
        "content": "* **Alternative 1: Use a List\u003cExpenseType\u003e to store the menu.** While there may be negligible"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "teowz46"
        },
        "content": "differences for a small menu, searching for an `ExpenseType` object still takes linear time"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "teowz46"
        },
        "content": "and there may be significant performance drops for a large menu."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "teowz46"
        },
        "content": "An `Expense` object contains information about one individual expenditure by a guest. An"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "teowz46"
        },
        "content": "`Expense` object encapsulates the cost, `ExpenseType` of the item bought, and the date and time"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "teowz46"
        },
        "content": "of expenditure."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "teowz46"
        },
        "content": "The `Expenses` object is essentially a `List\u003cExpense\u003e`. Every room contains an `Expenses`"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "teowz46"
        },
        "content": "object, to represent the collection of all the expenses of the guests in the room."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "teowz46"
        },
        "content": "* **Alternative 1: Use a `List\u003cExpense\u003e` object**: Defining the `Expenses` class allows us"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "teowz46"
        },
        "content": "to restrict access to the collection, and only allow certain methods such as adding an"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "teowz46"
        },
        "content": "`Expense` or displaying on screen."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "teowz46"
        },
        "content": "* **Alternative 2: Use a `Set\u003cExpense\u003e` object**: Having the expenses ordered (e.g."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "teowz46"
        },
        "content": "chronologically) will be useful for generating a nice view of all the expenses incurred."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "teowz46"
        },
        "content": "Here is a simple UML describing the roles of these classes."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "teowz46"
        },
        "content": "image::expense_uml.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Immutability of Menu"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "teowz46"
        },
        "content": "While it is conceivable that the items sold may change from time to time,"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "teowz46"
        },
        "content": "for various reasons such as unpopularity or seasonal products, giving users"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "teowz46"
        },
        "content": "the ability to add and remove items from the menu may result in more"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "teowz46"
        },
        "content": "problems than benefits. We expect that alterations to the menu will not be"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "teowz46"
        },
        "content": "performed frequently, and that the majority of our users, receptionists,"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "teowz46"
        },
        "content": "will not be required to add and remove items to the menu. The menu also does"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "teowz46"
        },
        "content": "not have to be altered during operational hours. Hence, by making"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "teowz46"
        },
        "content": "`Menu` immutable, we eliminate the possibility of making accidental or"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "teowz46"
        },
        "content": "unwarranted changes to the menu. The only method to modify `Menu` would"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "teowz46"
        },
        "content": "thus be through the XML file, which we believe is suitable for these"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "teowz46"
        },
        "content": "purposes."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Immutability of ExpenseType"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "teowz46"
        },
        "content": "The `ExpenseType` object is meant to hold the default values of the name and"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "teowz46"
        },
        "content": "price of each item. In other words, since an `Expense` object references an"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "teowz46"
        },
        "content": "`ExpenseType` object, the `Expense` object is allowed to have a cost that"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "teowz46"
        },
        "content": "is different from the cost in the corresponding `ExpenseType` object, to"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "teowz46"
        },
        "content": "account for cases such as the guest having a personalised discount due to"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "teowz46"
        },
        "content": "the usage of vouchers or certain credit cards. Thus, ExpenseType does not"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "teowz46"
        },
        "content": "need to be modified by users in the application. Nonetheless, it is still"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "teowz46"
        },
        "content": "possible to modify the default information through editing the XML file."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "teowz46"
        },
        "content": "// end::expense[]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "teowz46"
        },
        "content": "A project often depends on third-party libraries. For example, Concierge depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "adamwth"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all guests in the list."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "teowz46"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/ConciergeParser.java[`ConciergeParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "teowz46"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/ConciergeParser.java[`ConciergeParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "teowz46"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in Concierge, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "teowz46"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in Concierge."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "teowz46"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/Concierge.java[`Concierge`] API need to be updated."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "teowz46"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/Concierge.java[`Concierge`] and link:{repoURL}/src/main/java/seedu/address/model/guest/Guest.java[`Guest`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/Concierge.java[`Concierge`] allows you to update a guest, and link:{repoURL}/src/main/java/seedu/address/model/guest/Guest.java[`Guest`] allows you to update the tags."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "teowz46"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/Concierge.java[`Concierge`]. Loop through each guest, and remove the `tag` from each guest."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "teowz46"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `Concierge#removeTag(Tag)`."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "teowz46"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your Concierge application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last guest in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "adamwth"
        },
        "content": ". Use different colors for different tags inside guest cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/GuestCard.java[the `GuestCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `GuestCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "teowz46"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/ConciergeSystemTest.java[`ConciergeSystemTest#assertCommandBoxShowsDefaultStyle() and ConciergeSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "teowz46"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in Concierge."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "teowz46"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever Concierge is updated."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "adamwth"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of guests when the application just started."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "teowz46"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleConciergeChangedEvent(ConciergeChangedEvent)`] to update the number of guests whenever there are new changes to the concierge."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "teowz46"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/ConciergeSystemTest.java[`ConciergeSystemTest`] to also verify the new total number of guests status bar."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "teowz46"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving Concierge to the cloud. However, the current implementation of the application constantly saves Concierge after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for Concierge storage."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "teowz46"
        },
        "content": ". Add a new method `backupConcierge(ReadOnlyConcierge)`, so that Concierge can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "teowz46"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/ConciergeStorage.java[`ConciergeStorage`] interface."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "teowz46"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlConciergeStorage.java[`XmlConciergeStorage`] class."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "teowz46"
        },
        "content": "*Scenario:* You are a software maintainer for `concierge`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Edits the remark for a guest specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Edits the remark for the first guest to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Removes the remark for the first guest."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "teowz46"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/ConciergeParser.java[`ConciergeParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "teowz46"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/ConciergeParserTest.java[`ConciergeParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "teowz46"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/ConciergeParser.java[`ConciergeParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "teowz46"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/ConciergeParserTest.java[`ConciergeParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `GuestCard`"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/GuestCard.java[`GuestCard`] s to display a remark for each guest later."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/GuestListCard.fxml[`GuestListCard.fxml`]."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/GuestCard.java[`GuestCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/GuestCardHandle.java[`GuestCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/guest/Guest.java[`Guest`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "adamwth"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/guest/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Guest` to support a `Remark` field"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/guest/Guest.java[`Guest`]."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/guest/Guest.java[`Guest`]."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "adamwth"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the guest will be created without a remark)."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "teowz46"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `concierge.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedGuest` class"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Guest` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedGuest.java[`XmlAdaptedGuest`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "teowz46"
        },
        "content": ". Fix `invalidAndValidGuestConcierge.xml`, `typicalGuestsConcierge.xml`, `validConcierge.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `GuestBuilder`"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Guest` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/GuestBuilder.java[`GuestBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/guest/Guest.java[`Guest`]."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/GuestBuilder.java[`GuestBuilder`]. This method will create a new `Remark` for the guest that it is currently building."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Guest` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalGuests.java[`TypicalGuests`]."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `GuestCard`"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/GuestCard.java[`GuestCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/GuestCard.java[`GuestCard`]\u0027s constructor to bind the `Remark` field to the `Guest` \u0027s remark."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysGuest(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "adamwth"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a guest."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* * *` |receptionist |retrieve the room number of a guest |provide any kind of services to the guest in his/her room"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* * *` |receptionist |view the prices of different room types |inform the guests of the prices of different rooms"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* * *` |receptionist |mark rooms in need of maintenance or cleaning |prevent guests from staying in those rooms"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* * *` |hotel manager |know which rooms\u0027 guests are checking out on a certain day |assign cleaning staff to those rooms"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* * *` |receptionist |look at the available rooms of a certain type in a certain time |designate rooms for guests"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* * *` |receptionist / hotel manager |know the room services called by a guest |charge the guest accordingly"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* * *` |receptionist |keep track of the particulars of guests such as home address, phone number, room number |contact them in the event of emergencies before, during or after their stay"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* * *` |receptionist |be informed of the guests that checked out late |charge them with a late check-out fee"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* * *` |receptionist |swap rooms for guests |allow guests to change rooms if they report any damages"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* * *` |receptionist |manually reduce / extend the stay of a guest (including late check-out requests) |allow guests to change their check-out timing"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* * *` |receptionist |modify a guest\u0027s particulars |correct errors without rewriting the entry"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* * *` |receptionist / hotel manager |remove a guest\u0027s entry |facilitate the check-out procedure"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "adamwth"
        },
        "content": "|`* * *` |receptionist |reserve rooms for guests |allow guests to place bookings"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "adamwth"
        },
        "content": "|`* * *` |receptionist |cancel bookings on request |let other guests occupy the room"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* * *` |hotel manager |export the guests\u0027 profiles |keep an archive"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* * *` |hotel manager |look at all financial transactions made between guests and the hotel |facilitate the monthly audit"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* * *` |receptionist / hotel manager |red flag problematic guests and write descriptions on them |warn the staff of problematic guests"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* * *` |receptionist |filter rooms by type, occupancy status, number of guests, etc. |understand the current state of occupancy"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* *` |hotel manager |know the usage statistics of facilities |plan for budget and staff allocation"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* *` |hotel manager |adjust the room rates |take advantage of seasonal pricing"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* *` |hotel manager |send my guests a \"Thank You\" note upon check-out |maintain good relations with them"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* *` |hotel manager |backup my data |prepare for data corruption accidents"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`* *` |receptionists |convert room rates to common global currencies |help guests better understand the pricing"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`*` |hotel manager |know the average amount spent by guests who checked out in the current month |evaluate the effectiveness of short-term events"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|`*` |hotel manager |look at which receptionist last edited a reservation or stay |hold the receptionists accountable if mistakes were made"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "teowz46"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UC1.1: Check-in a Guest"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "*System*: `Concierge`, *Actor*: `Receptionist`"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "1.\tReceptionist checks the room rates for all room types"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "2. \tReceptionist checks available rooms (not occupied or reserved) of the type guest wants"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "3.\tReceptionist ensures that room has all necessary maintenance completed"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "4. \tReceptionist assigns room to Guest"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. System indicates that there are no rooms available"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "* 4a. There are multiple Guests to be checked-in"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "** 4a1. Receptionist adds all Guests to System"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UC1.2: Retrieve room number of a Guest"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "*System*: `Concierge`, *Actor*: `Receptionist`"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "1. \tReceptionist searches room number using Guest’s particulars (e.g. Name, ID, Phone Number, etc.)"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "2. \tSystem returns room number"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. System indicates that the Guest is not staying in the hotel."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UC1.3: Send room service to a Guest"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "*System*: `Concierge`, *Actor*: `Receptionist`"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "1. \tReceptionist retrieves room number of Guest (UC1.2)"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "2. \tReceptionist specifies what type of room service to send to Guest"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "3. \tSystem confirms room service sent to guest, with an ETA"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. System indicates that there are no available hotel attendants at the moment"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Receptionist puts Guest on a waiting queue"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UC1.4: Swap Guest\u0027s room"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "*System*: `Concierge`, *Actor*: `Receptionist`"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "1. \tReceptionist views listing of available rooms (UC1.2)"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "2. \tReceptionist swaps guest’s room"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "3. \tSystem prompts to mark the vacated room for housekeeping"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "4. \tReceptionist sends for housekeeping service in vacated room"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UC1.5: Edit Guest\u0027s personal particulars"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "*System*: `Concierge`, *Actor*: `Receptionist`"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "1. \tReceptionist identifies Guest using personal particulars (e.g. name, ID, phone number)"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "2. \tReceptionist updates Guest details"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UC1.6: Reserve a room for Guest"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "*System*: `Concierge`, *Actor*: `Receptionist`"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "1. \tReceptionist views listing of available rooms (UC1.2)"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "2.\tReceptionist specifies reservation dates"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UC2.1: Edit room rates"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "*System*: `Concierge`, *Actor*: `Hotel Manager`"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "1.\tHotel Manager checks the room rates for all room types"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "2.\tHotel Manager specifies new room rate for a particular room type"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. Hotel Manager specifies an invalid room rate (has to be non-negative integer)"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "**\t2a1. System displays an error message that no changes have been made"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UC2.2: Check statistics"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "*System*: `Concierge`, *Actor*: `Hotel Manager`"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "1.\tHotel Manager specifies periodicity of earnings to checked-in"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 guests without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ".  Command Line Interface is the primary mode of input. There is a preference for typing over mouse actions or key combinations. One-shot commands are preferred over multi-step commands."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": ".  Incremental development: a reasonably consistent delivery rate is expected."
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ".  The data should be stored locally and should be in a human editable text file, so that advanced users can manipulate the data by editing the file."
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ".  The software should follow the Object-oriented paradigm."
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": ".  The project will not use a DBMS."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ".  The software should be platform-independent."
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ".  The software should work without requiring an installer."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "[[guest]] Guest:;"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "adamwth"
        },
        "content": "A guest staying in the hotel"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "[[receptionist]] Receptionist::"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "Staff at the counter, in-charge of check-in and check-out procedures. They occasionally receive calls from potential guests"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "[[hotel-manager]] Hotel Manager::"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "adamwth"
        },
        "content": "The one guest in-charge of the entire hotel. Manages staff, guests and facilities"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "[[housekeeping]] Housekeeping::"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "Staff in-charge of cleaning rooms and restoring them to the default configuration for a new Guest to stay"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "[[facilities]] Facilities::"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "Facilities: Any form of services provided within the hotel. These include the spa, gym, game room, casino, laundry, bar, restaurants, etc"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "*Cloudbeds*"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "* Easy to use: staff are able to learn how to operate the system with minimal training"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "* Access to leading travel channels (e.g. booking.com)"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "* Custom payment options"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "* Group analytics"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "* Global currency support"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "*eZee Frontdesk*"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "* Booking Engine, Channel Manager and Restaurant POS in one system"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "* Rate management to maximise revenue through seasonal stay rates"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "*Frontdesk Anywhere*"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "* Export guest profiles"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "* Data encryption and privilege control for users"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "* Sends \"Thank You\" letters to guests after their stay"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "*Hotelogix*"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "* Multi-device booking engine"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "*MSI CloudPM*"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "* Automatic back-up on the cloud"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "* Access to archived night audit reports"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "*roomMaster*"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "* Complete audit trail for all financial transactions"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "* Guest history available"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "adamwth"
        },
        "content": "\u003d\u003d\u003d Deleting a guest"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "adamwth"
        },
        "content": ". Deleting a guest while all guests are listed"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "adamwth"
        },
        "content": ".. Prerequisites: List all guests using the `list` command. Multiple guests in the list."
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "adamwth"
        },
        "content": "   Expected: No guest is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "teowz46": 164,
      "JIaqingTan": 32,
      "adamwth": 24,
      "-": 1280
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Concierge v1.1 - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-F11-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Concierge is created for *hotel managers and receptionists* of small hotels looking for a simple application to *assist"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "the user in hotel management*. More importantly, Concierge is *optimized for those who prefer to work with a Command Line Interface*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "(CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Concierge can get your"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "hotel management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `concierge.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Concierge."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "image::Ui.jpg[width\u003d\"790\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all rooms types and cost of room"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkout`**`S9465789B` : checks out guest with NRIC no. S9465789B from his/her room"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a guest: `add`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Adds a guest to the guest list for the purpose of assigning a room +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG] -r ROOM_NUMBER"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "from/START_DATE to/END_DATE`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "A guest can have any number of tags (including 0)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/John Smith p/98765432 e/johnsmith@gmail.com t/VIP r/085 from/09/12/18 to/10/12/18`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Add a guest \"John Smith\" to room 085 for a period of stay from 09/12/18 to 10/12/18."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a guest: `addx` [red]#Coming in v2.0#"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a guest to the guest list NOT for the purpose of assigning a room (perhaps add to archived guest list) +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL [t/TAG]...`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* `addx n/guest p/98765432 e/johntan@hotmail.com t/bro`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Checkout room: `checkin`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Checks in the room, which marks the room\u0027s current booking as checked-in."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `checkin ROOM_NUMBER`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* `checkin 085` +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Checks in room 085 and marks room 085\u0027s current booking as checked-in."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adamwth"
        },
        "content": "\u003d\u003d\u003d Checkout room: `checkout`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Checks out the room and the guest staying in it. The guest is deleted from the guest list and the room is then marked"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adamwth"
        },
        "content": "for housekeeping. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Format: `checkout ROOM_NUMBER`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* `checkout 085` +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Checks out room 085 and the guest staying in it."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a guest : `delete` [red]#Coming in v2.0#"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Deletes the specified guest from the archived guest list. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adamwth"
        },
        "content": "****"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* Deletes the guest at the specified `INDEX`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* The index refers to the index number shown in the displayed guest list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adamwth"
        },
        "content": "****"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* `list -g` +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adamwth"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Deletes the 2nd guest in the displayed guest list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* `find -g Betsy` +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adamwth"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Deletes the 1st guest in the results of the `find` command."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a guest : `edit` [red]#Coming in v1.3#"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Edits an existing guest in the guest list. +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* Edits the guest at the specified `INDEX`. The index refers to the index number shown in the displayed guest list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* When editing tags, the existing tags of the guest will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* You can remove all the guest\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Edits the phone number and email address of the 1st guest to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Edits the name of the 2nd guest to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating guests by name: `find` [red]#Coming in v1.3#"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Finds guests or rooms, depending on the input flag and the keywords. +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Format: `find [flag] KEYWORD`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* Guests matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* `find -g John Smith` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Find guest(s) with \"John\" or \"Smith\" or both in their names."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* `find -g r/085` +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Find guest currently staying in room 085"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* `find -r 085` +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Find room 085"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* `find -r g/John Smith` +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Find room for which guest(s) with \"John\" or \"Smith\" or both in their names, has made a booking"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* `find -r double` +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Find all double rooms"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `find -r avail` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Find all available rooms today"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `find -r avail from/09/12/18 to/10/12/18` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Find rooms that are available from 09/12/18 10/12/18. Input dates must be in DD/MM/YY format."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "adamwth"
        },
        "content": "\u003d\u003d\u003d Listing all guests : `list`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Shows the entire list of rooms, or guests, depending on the input flag +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Format: `list [flag]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* `list -r` +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "List all rooms"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* `list -g` +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "adamwth"
        },
        "content": "List all guests"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a guest : `select` [red]#Coming in v1.3#"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Selects the guest/room identified by the index number used in the displayed list. +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* Selects the guest/room and loads the information of the guest/room at the specified `INDEX`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* The index refers to the index number shown in the displayed list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* `list -g` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "adamwth"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Selects the 2nd room in the displayed list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* `find -g Betsy` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "adamwth"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Selects the 1st guest in the results of the `find` command."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Provide Room Service: `service` [red]#Coming in v1.3#"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Charges a room service to a room  +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `service r/ROOM_NUMBER svc/SERVICE_TYPE`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* SERVICE_TYPE refers to the serial number given to each type of service offered by the hotel."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* This could be room service, on-demand video streaming, bath supplies, mini bar, etc."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* `service r/085 svc/01` +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a service with the serial number *01* to the room\u0027s expenses."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Room maintenance: `maintenance` [red]#Coming in v2.0#"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the room to be under maintenance. +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `maintenance ROOM_NUMBER TRUE/FALSE`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* A room under maintenance does not affect any of the other system operations."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* The receptionist should handle this situation on the ground using his judgment, be it to swap rooms for the guest"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* or ask the guest to wait until the maintenance is over (e.g. leave luggage at hotel and talk a walk outside)."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* `maintenance 085 TRUE` +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Sets room 085 to be under maintenance."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* `maintenance 085 FALSE` +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "Lifts the maintenance status on room 085."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the concierge application to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "teowz46"
        },
        "content": "Undoable commands: those commands that modify Concierge\u0027s content (`add`, `checkin`, `checkout`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the application. +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Export log: `export` [red]#Coming in v1.3#"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Exports a log of all history of commands into a text file +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Format: `export`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help` [red]#Coming in v1.3#"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "adamwth"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "teowz46"
        },
        "content": "Concierge data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files [red]#Coming in v2.0#"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "teowz46"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Concierge folder."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add a Guest and assign a Room* : `add`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* *Checkin* : `checkin`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* *Checkout* : `checkout`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* *Delete* : `delete INDEX`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* *Select* : `select INDEX`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* *Room Service* : `service`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* *Mark Room as faulty* : `fault`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* *Export log* : `export`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "adamwth"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "teowz46": 3,
      "JIaqingTan": 1,
      "adamwth": 62,
      "-": 283
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": ". Enter an arbitrary description e.g. concierge"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "-": 41
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teowz46"
        },
        "content": "Creates the `concierge.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* **`allTests`** +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* **`guiTests`** +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests in the `seedu.address.ui` and `systemtests` package"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* **`nonGuiTests`** +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all non-GUI tests in the `seedu.address`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "package"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* **`headless`** +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in headless mode due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew headless allTests` -- Runs all tests in headless mode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tests"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "-": 112
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003d\u003d PROJECT: Concierge - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": "Concierge - Level 4 is a desktop Concierge application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "teowz46": 2,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.ReadOnlyConcierge;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.storage.ConciergeStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.storage.XmlConciergeStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Concierge ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        ConciergeStorage conciergeStorage \u003d new XmlConciergeStorage(userPrefs.getConciergeFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        storage \u003d new StorageManager(conciergeStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s Concierge and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * The data from the sample Concierge will be used instead if {@code storage}\u0027s Concierge is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * or an empty Concierge will be used instead if errors occur when reading {@code storage}\u0027s Concierge."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Optional\u003cReadOnlyConcierge\u003e conciergeOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        ReadOnlyConcierge initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            conciergeOptional \u003d storage.readConcierge();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            if (!conciergeOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Concierge\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            initialData \u003d conciergeOptional.orElseGet(SampleDataUtil::getSampleConcierge);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Concierge\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            initialData \u003d new Concierge();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Concierge\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            initialData \u003d new Concierge();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Concierge\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        logger.info(\"Starting Concierge \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Concierge ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 23,
      "adamwth": 1,
      "-": 184
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private String appTitle \u003d \"Concierge\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private static final String LOG_FILE \u003d \"concierge.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "-": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/ConciergeChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.ReadOnlyConcierge;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": "/** Indicates the Concierge in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class ConciergeChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public final ReadOnlyConcierge data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public ConciergeChangedEvent(ReadOnlyConcierge data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"number of guests \" + data.getGuestList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 5,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/GuestPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Represents a selection change in the Guest List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuestPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private final Guest newSelection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuestPanelSelectionChangedEvent(Guest newSelection) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Guest getNewSelection() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 3,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ListingChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " * Represents a listing change in the left UI column"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class ListingChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private String flag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public ListingChangedEvent(String flag) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return flag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/RoomPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " * Represents a selection change in the room List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class RoomPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private final Room newSelection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public RoomPanelSelectionChangedEvent(Room newSelection) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public Room getNewSelection() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private LinkedList\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         * Converts userInputHistory from a linked list into a string so that it can be passed to the CommandArchive"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "         * class where the latest command can be extracted and added to commandFile.txt which tracks all the keystrokes"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "         * of a user with a timestamp"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String newLine \u003d System.getProperty(\"line.separator\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder string \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Iterator\u003c?\u003e it \u003d userInputHistory.descendingIterator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            string.append(it.next() + newLine);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String inputString \u003d string.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(inputString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // Fix this!!!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // CommandArchive.stringToFile(inputString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of {@code userInputHistory}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new LinkedList\u003c\u003e(userInputHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 2,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of guests */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    ObservableList\u003cGuest\u003e getFilteredGuestList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of rooms */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    ObservableList\u003cRoom\u003e getFilteredRoomList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.logic.parser.ConciergeParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final ConciergeParser conciergeParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        conciergeParser \u003d new ConciergeParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            Command command \u003d conciergeParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cGuest\u003e getFilteredGuestList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredGuestList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return model.getFilteredRoomList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 4,
      "JIaqingTan": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_END;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_START;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.booking.Booking;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.booking.BookingPeriod;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.booking.exceptions.OverlappingBookingException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.exceptions.RoomNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Adds a guest to Concierge."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Adds a guest to the hotel and gives the guest a room. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ROOM + \" ROOM NUMBER \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_DATE_START + \" dd/MM/yyyy \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_DATE_END + \" dd/MM/yyyy \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ROOM + \"056\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_DATE_START + \"03/11/2018\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_DATE_END + \"05/11/2018\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \"New guest added: %1$s \\nAssigned to room: %2$s \\n\\tfrom %3$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GUEST \u003d \"This guest already exists in Concierge\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Guest guestToAdd;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final RoomNumber roomNumberToAdd;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Booking bookingToAdd;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Guest}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * The {@code guest} is assigned to {@code roomNumber} for the duration of"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code bookingPeriod}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Guest guest, RoomNumber roomNumber,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                      BookingPeriod bookingPeriod) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(guest, roomNumber, bookingPeriod);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        guestToAdd \u003d guest;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        roomNumberToAdd \u003d roomNumber;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        bookingToAdd \u003d new Booking(guest, bookingPeriod);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasGuest(guestToAdd)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_GUEST);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addGuest(guestToAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            model.addBooking(roomNumberToAdd, bookingToAdd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (RoomNotFoundException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (OverlappingBookingException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        model.commitConcierge();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, guestToAdd,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                roomNumberToAdd, bookingToAdd.getBookingPeriod()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 guestToAdd.equals(((AddCommand) other).guestToAdd));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 3,
      "JIaqingTan": 1,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AssignCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Assigns a guest to a room."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AssignCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Assigns a guest to a room.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: GUEST_NAME ROOM_NUMBER\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Thomas 056\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ASSIGN_GUEST_SUCCESS \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Assigned Guest: %1$s to Room %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final RoomNumber roomNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AssignCommand(Index targetIndex, RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        List\u003cGuest\u003e lastShownList \u003d model.getFilteredGuestList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest guestToAssign \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        model.commitConcierge();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ASSIGN_GUEST_SUCCESS, guestToAssign));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AssignCommand)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AssignCommand otherAssignCommand \u003d (AssignCommand) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherAssignCommand.targetIndex.equals(targetIndex)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherAssignCommand.roomNumber.equals(roomNumber);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "JIaqingTan": 4,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CheckinCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Check in a room identified using its room number."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CheckinCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"checkin\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Checks in the room identified by the room number.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: ROOM_NUMBER (must be a 3-digit positive integer from 001 to \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + RoomNumber.MAX_ROOM_NUMBER + \" )\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 001\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CHECKIN_ROOM_SUCCESS \u003d \"Checked in Room: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_ACTIVE_BOOKING_CHECKIN \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Cannot check in Room %1$s, as it does not have an active booking.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_OCCUPIED_ROOM_CHECKIN \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Cannot check in Room %1$s, as it is already checked in.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_ROOM_BOOKING \u003d \"Room %1$s has no bookings.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final RoomNumber roomNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CheckinCommand(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // roomNumber is guaranteed to be a valid room number after parsing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.roomHasBooking(roomNumber)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_ROOM_BOOKING, roomNumber));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.roomHasActiveBooking(roomNumber)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_ACTIVE_BOOKING_CHECKIN, roomNumber));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.isRoomCheckedIn(roomNumber)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_OCCUPIED_ROOM_CHECKIN, roomNumber));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        model.checkInRoom(roomNumber);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        model.commitConcierge();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CHECKIN_ROOM_SUCCESS, roomNumber));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof CheckinCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 roomNumber.equals(((CheckinCommand) other).roomNumber)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "adamwth": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CheckoutCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Check out a room identified using its room number and remove its registered guest from the guest list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class CheckoutCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"checkout\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            + \": Checks out the room identified by the room number, and remove its registered guest from guest list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: ROOM_NUMBER (must be a 3-digit positive integer from 001 to \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + RoomNumber.MAX_ROOM_NUMBER + \" )\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 001\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String MESSAGE_CHECKOUT_ROOM_SUCCESS \u003d \"Checked out Room: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String MESSAGE_NO_ACTIVE_OR_EXPIRED_ROOM_BOOKING_CHECKOUT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        \"Cannot checkout Room %1$s, as it does not have an active or expired booking.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String MESSAGE_NO_ROOM_BOOKING \u003d \"Room %1$s has no bookings.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private final RoomNumber roomNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public CheckoutCommand(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // roomNumber is guaranteed to be a valid room number after parsing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!model.roomHasBooking(roomNumber)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_ROOM_BOOKING, roomNumber));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!model.roomHasActiveOrExpiredBooking(roomNumber)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_ACTIVE_OR_EXPIRED_ROOM_BOOKING_CHECKOUT, roomNumber));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        model.checkoutRoom(roomNumber);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        model.commitConcierge();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CHECKOUT_ROOM_SUCCESS, roomNumber));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                || (other instanceof CheckoutCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 roomNumber.equals(((CheckoutCommand) other).roomNumber)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "adamwth": 52,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Clears Concierge."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Concierge has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        model.resetData(new Concierge());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        model.commitConcierge();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GUESTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Edits the details of an existing guest in Concierge."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the guest identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            + \"by the index number used in the displayed guest list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_GUEST_SUCCESS \u003d \"Edited Guest: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GUEST \u003d \"This guest already exists in Concierge.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditGuestDescriptor editGuestDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @param index of the guest in the filtered guest list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editGuestDescriptor details to edit the guest with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditGuestDescriptor editGuestDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editGuestDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editGuestDescriptor \u003d new EditGuestDescriptor(editGuestDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cGuest\u003e lastShownList \u003d model.getFilteredGuestList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest guestToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest editedGuest \u003d createEditedGuest(guestToEdit, editGuestDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!guestToEdit.isSameGuest(editedGuest) \u0026\u0026 model.hasGuest(editedGuest)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_GUEST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateGuest(guestToEdit, editedGuest);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredGuestList(PREDICATE_SHOW_ALL_GUESTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        model.commitConcierge();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_GUEST_SUCCESS, editedGuest));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Creates and returns a {@code Guest} with the details of {@code guestToEdit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editGuestDescriptor}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Guest createEditedGuest(Guest guestToEdit, EditGuestDescriptor editGuestDescriptor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assert guestToEdit !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editGuestDescriptor.getName().orElse(guestToEdit.getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editGuestDescriptor.getPhone().orElse(guestToEdit.getPhone());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editGuestDescriptor.getEmail().orElse(guestToEdit.getEmail());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editGuestDescriptor.getTags().orElse(guestToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Guest(updatedName, updatedPhone, updatedEmail, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editGuestDescriptor.equals(e.editGuestDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Stores the details to edit the guest with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * corresponding field value of the guest."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditGuestDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditGuestDescriptor() {}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditGuestDescriptor(EditGuestDescriptor toCopy) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditGuestDescriptor)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            EditGuestDescriptor e \u003d (EditGuestDescriptor) other;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 3,
      "adamwth": 8,
      "-": 204
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Concierge as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GUEST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.events.ui.ListingChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Finds and lists all guests in Concierge whose name contains any of the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * argument keywords. Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all guests whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredGuestList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        EventsCenter.getInstance().post(new ListingChangedEvent(PREFIX_GUEST.toString()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_GUESTS_LISTED_OVERVIEW, model.getFilteredGuestList().size()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "JIaqingTan": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GUEST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GUESTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ROOMS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_NO_GUESTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_NO_ROOMS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.events.ui.ListingChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Lists all guests in Concierge to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"List successful!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list of guest or rooms. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            + PREFIX_GUEST + \" for guests, \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            + PREFIX_ROOM + \" for rooms. \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            + PREFIX_ROOM;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private final String[] splitString;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Creates a ListCommand to handle listing of guests/rooms and other flags"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public ListCommand(String[] splitString) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        //If statement for listing guests/rooms, switch statement not allowed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        requireNonNull(splitString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        this.splitString \u003d splitString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (splitString[0].equals(PREFIX_GUEST.toString())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updateFilteredGuestList(PREDICATE_SHOW_ALL_GUESTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            model.updateFilteredRoomList(PREDICATE_SHOW_NO_ROOMS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            EventsCenter.getInstance().post(new ListingChangedEvent(PREFIX_GUEST.toString()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        } else if (splitString[0].equals(PREFIX_ROOM.toString())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updateFilteredGuestList(PREDICATE_SHOW_NO_GUESTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            model.updateFilteredRoomList(PREDICATE_SHOW_ALL_ROOMS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            EventsCenter.getInstance().post(new ListingChangedEvent(PREFIX_ROOM.toString()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                || (other instanceof ListCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u0026\u0026 splitString[0].equals(((ListCommand) other).splitString[0]));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "JIaqingTan": 42,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GUESTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Reverts the {@code model}\u0027s Concierge to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        if (!model.canRedoConcierge()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        model.redoConcierge();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredGuestList(PREDICATE_SHOW_ALL_GUESTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 3,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Selects a guest identified using it\u0027s displayed index from Concierge."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            + \": Selects the guest identified by the index number used in the displayed guest list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_GUEST_SUCCESS \u003d \"Selected Guest: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cGuest\u003e filteredGuestList \u003d model.getFilteredGuestList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredGuestList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_GUEST_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "adamwth": 2,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GUESTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Reverts the {@code model}\u0027s Concierge to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        if (!model.canUndoConcierge()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        model.undoConcierge();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredGuestList(PREDICATE_SHOW_ALL_GUESTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 3,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pikulet"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pikulet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pikulet": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CheckoutCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.logic.commands.CheckoutCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Parses input arguments and creates a new CheckoutCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class CheckoutCommandParser implements Parser\u003cCheckoutCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CheckoutCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * and returns an CheckoutCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public CheckoutCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            RoomNumber roomNumber \u003d ParserUtil.parseRoomNumber(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return new CheckoutCommand(roomNumber);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckoutCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"-i\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ROOM \u003d new Prefix(\"-r\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DATE_START \u003d new Prefix(\"from/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DATE_END \u003d new Prefix(\"to/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public static final Prefix PREFIX_GUEST \u003d new Prefix(\"-g\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ConciergeParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CheckinCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CheckoutCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class ConciergeParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case CheckinCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CheckinCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case CheckoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CheckoutCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "JIaqingTan": 1,
      "-": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        //Splitting string and checking for exception"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        String[] splitString \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (!ParserUtil.areFlagsPresent(splitString)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return new ListCommand(splitString);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GUEST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.booking.BookingPeriod;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Index.MESSAGE_INDEX_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String roomNumber} into a {@code RoomNumber}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code roomNumber} is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static RoomNumber parseRoomNumber(String roomNumber) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(roomNumber);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedRoomNumber \u003d roomNumber.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!RoomNumber.isValidRoomNumber(trimmedRoomNumber)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(RoomNumber.MESSAGE_ROOM_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return new RoomNumber(trimmedRoomNumber);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String startDate} and {@code String endDate} into a"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code BookingPeriod}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if either of the given {@code startDate} or"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code endDate} is invalid."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static BookingPeriod parseBookingPeriod(String startDate,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                                                   String endDate) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(startDate, endDate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedStartDate \u003d startDate.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEndDate \u003d endDate.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!BookingPeriod.isValidBookingPeriod(trimmedStartDate, trimmedEndDate)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(BookingPeriod.MESSAGE_BOOKING_PERIOD_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return new BookingPeriod(trimmedStartDate, trimmedEndDate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                                        Prefix... prefixes) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Returns true if suffix flags are either for listing guests (-g) or rooms (-r)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * in the given input {@code String[]}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public static boolean areFlagsPresent(String[] splitString) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if ((splitString[0].equals(PREFIX_GUEST.toString()) || splitString[0].equals(PREFIX_ROOM.toString()))"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u0026\u0026 splitString.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 14,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Concierge.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.expenses.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.expenses.ExpenseType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.UniqueGuestList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.UniqueRoomList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Booking;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Wraps all data at the Concierge level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Duplicates are not allowed (by .isSameGuest comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class Concierge implements ReadOnlyConcierge {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueGuestList guests;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private final UniqueRoomList rooms;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final Menu menu;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guests \u003d new UniqueGuestList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        rooms \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        menu \u003d new Menu();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Concierge() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Creates an Concierge using the Guests in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Concierge(ReadOnlyConcierge toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Getters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public ObservableList\u003cGuest\u003e getGuestList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return guests.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return rooms.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Menu getMenu() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return menu;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Map\u003cString, ExpenseType\u003e getMenuMap() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return menu.asUnmodifiableMap();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Guest operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Replaces the contents of the guest list with {@code guests}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * {@code guests} must not contain duplicate guests."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void setGuests(List\u003cGuest\u003e guests) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.guests.setGuests(guests);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Adds a guest to Concierge."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * The guest must not already exist in Concierge."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addGuest(Guest g) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        guests.add(g);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Replaces the given guest {@code target} in the list with {@code editedGuest}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code target} must exist in Concierge."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * The guest identity of {@code editedGuest} must not be the same as another existing guest in Concierge."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateGuest(Guest target, Guest editedGuest) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireNonNull(editedGuest);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        guests.setGuest(target, editedGuest);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Removes {@code key} from this {@code Concierge}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code key} must exist in Concierge."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeGuest(Guest key) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        guests.remove(key);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Room operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Adds a room to Concierge."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * The room must not already exist in Concierge."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void addRoom(Room r) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        rooms.add(r);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Replaces the contents of the room list with {@code rooms}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * {@code rooms} must not contain duplicate rooms."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void setRooms(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        this.rooms.setRooms(rooms);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Add a booking to a room identified by its room number."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void addBooking(RoomNumber roomNumber, Booking booking) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Room room \u003d rooms.getRoom(roomNumber);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Room editedRoom \u003d room.addBooking(booking);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        rooms.setRoom(room, editedRoom);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Checks in the room using its room number"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void checkInRoom(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Room room \u003d rooms.getRoom(roomNumber);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        rooms.setRoom(room, room.checkIn());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Checks out a room using its room number"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void checkoutRoom(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Room room \u003d rooms.getRoom(roomNumber);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        rooms.setRoom(room, room.checkout());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void setMenu(Map\u003cString, ExpenseType\u003e menu) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.menu.setMenu(menu);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Adds an expense to the room using its room number"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void addExpense(RoomNumber roomNumber, Expense expense) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        rooms.getRoom(roomNumber).addExpense(expense);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Reset data \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Resets the existing data of this {@code Concierge} with {@code newData}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void resetData(ReadOnlyConcierge newData) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        setGuests(newData.getGuestList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        setRooms(newData.getRoomList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        setMenu(newData.getMenuMap());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Boolean checkers \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Returns true if a guest with the same identity as {@code guest} exists in Concierge."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean hasGuest(Guest guest) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireNonNull(guest);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return guests.contains(guest);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Returns true if a room with the same identity as {@code room} exists in Concierge."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean hasRoom(Room room) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return rooms.contains(room);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if the room identified by its room number is checked in."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean isRoomCheckedIn(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return rooms.getRoom(roomNumber).isCheckedIn();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if the room\u0027s bookings is non-empty"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean roomHasBookings(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return rooms.getRoom(roomNumber).hasBookings();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if the room\u0027s first booking is active."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean roomHasActiveBooking(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return rooms.getRoom(roomNumber).hasActiveBooking();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if the room\u0027s first booking is active or expired"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean roomHasActiveOrExpiredBooking(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return rooms.getRoom(roomNumber).hasActiveOrExpiredBooking();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return guests.asUnmodifiableObservableList().size() + \" guests\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                || (other instanceof Concierge // instanceof handles nulls"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                \u0026\u0026 guests.equals(((Concierge) other).guests));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        return guests.hashCode();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 30,
      "JIaqingTan": 22,
      "adamwth": 116,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Menu.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teowz46"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.expenses.ExpenseType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.expenses.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * A representation of the menu of the items and services for sale."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * This class should be read-only."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class Menu {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private HashMap\u003cString, ExpenseType\u003e numberToType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Menu() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        numberToType \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Menu(Menu other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        numberToType \u003d new HashMap\u003c\u003e(other.numberToType);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void setMenu(Map\u003cString, ExpenseType\u003e other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        numberToType.putAll(other);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Map\u003cString, ExpenseType\u003e asUnmodifiableMap() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return Collections.unmodifiableMap(numberToType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Checks that the given item number exists in the menu."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @param item The item number to check."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @return True if the item number is in the menu, false otherwise."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public boolean isValidMenuNumber(String item) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return numberToType.containsKey(item);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public ExpenseType getExpenseType(String item) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        if (!isValidMenuNumber(item)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return numberToType.get(item);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teowz46"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Booking;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /** {@code Predicate} that always evaluate to true/false */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cGuest\u003e PREDICATE_SHOW_ALL_GUESTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cGuest\u003e PREDICATE_SHOW_NO_GUESTS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    Predicate\u003cRoom\u003e PREDICATE_SHOW_ALL_ROOMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    Predicate\u003cRoom\u003e PREDICATE_SHOW_NO_ROOMS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    void resetData(ReadOnlyConcierge newData);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /** Returns the Concierge */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    ReadOnlyConcierge getConcierge();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Methods for guest. \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Returns true if a guest with the same identity as {@code guest} exists in Concierge."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasGuest(Guest guest);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Deletes the given guest."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * The guest must exist in Concierge."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteGuest(Guest target);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Adds the given guest."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code guest} must not already exist in Concierge."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void addGuest(Guest guest);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Replaces the given guest {@code target} with {@code editedGuest}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code target} must exist in Concierge."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * The guest identity of {@code editedGuest} must not be the same as another existing guest in Concierge."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateGuest(Guest target, Guest editedGuest);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /** Returns an unmodifiable view of the filtered guest list */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cGuest\u003e getFilteredGuestList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Updates the filter of the filtered guest list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredGuestList(Predicate\u003cGuest\u003e predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /** Returns an unmodifiable view of the filtered room list */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    ObservableList\u003cRoom\u003e getFilteredRoomList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Updates the filter of the filtered room list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Methods for room. \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the room\u0027s bookings is non-empty"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean roomHasBooking(RoomNumber roomNumber);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the room\u0027s first booking is active."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean roomHasActiveBooking(RoomNumber roomNumber);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the room\u0027s first booking is active or upcoming"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean roomHasActiveOrExpiredBooking(RoomNumber roomNumber);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Add a booking to a room identified by its room number."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addBooking(RoomNumber roomNumber, Booking booking);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Displays room list instead of guest list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //void displayRoomList(Predicate\u003cRoom\u003e predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Checks in the room by its room number"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    void checkInRoom(RoomNumber roomNumber);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Checks out the room."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @param roomNumber"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    void checkoutRoom(RoomNumber roomNumber);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if the room identified by its room number is checked in."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    boolean isRoomCheckedIn(RoomNumber roomNumber);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Methods for undo and redo. \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Returns true if the model has previous Concierge states to restore."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    boolean canUndoConcierge();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Returns true if the model has undone Concierge states to restore."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    boolean canRedoConcierge();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Restores the model\u0027s Concierge to its previous state."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    void undoConcierge();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Restores the model\u0027s Concierge to its previously undone state."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    void redoConcierge();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Saves the current Concierge state for undo/redo."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    void commitConcierge();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 18,
      "JIaqingTan": 4,
      "adamwth": 34,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.commons.events.model.ConciergeChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Booking;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Represents the in-memory model of Concierge data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final VersionedConcierge versionedConcierge;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private final FilteredList\u003cGuest\u003e filteredGuests;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private final FilteredList\u003cRoom\u003e filteredRooms;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Initializes a ModelManager with the given concierge and userPrefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public ModelManager(ReadOnlyConcierge concierge, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        requireAllNonNull(concierge, userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        logger.fine(\"Initializing with Concierge: \" + concierge + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge \u003d new VersionedConcierge(concierge);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        filteredGuests \u003d new FilteredList\u003c\u003e(versionedConcierge.getGuestList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        filteredRooms \u003d new FilteredList\u003c\u003e(versionedConcierge.getRoomList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this(new Concierge(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void resetData(ReadOnlyConcierge newData) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge.resetData(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        indicateConciergeChanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public ReadOnlyConcierge getConcierge() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return versionedConcierge;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private void indicateConciergeChanged() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        raise(new ConciergeChangedEvent(versionedConcierge));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasGuest(Guest guest) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireNonNull(guest);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return versionedConcierge.hasGuest(guest);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteGuest(Guest target) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge.removeGuest(target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        indicateConciergeChanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addGuest(Guest guest) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge.addGuest(guest);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredGuestList(PREDICATE_SHOW_ALL_GUESTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        indicateConciergeChanged();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateGuest(Guest target, Guest editedGuest) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireAllNonNull(target, editedGuest);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge.updateGuest(target, editedGuest);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        indicateConciergeChanged();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Guest List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Guest} backed by the internal list of"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code versionedConcierge}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cGuest\u003e getFilteredGuestList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredGuests);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredGuestList(Predicate\u003cGuest\u003e predicate) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        filteredGuests.setPredicate(predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Room List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Room} backed by the internal list of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code versionedConcierge}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredRooms);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        filteredRooms.setPredicate(predicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Room \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void addBooking(RoomNumber roomNumber, Booking booking) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge.addBooking(roomNumber, booking);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        updateFilteredRoomList(PREDICATE_SHOW_ALL_ROOMS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        indicateConciergeChanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void checkInRoom(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge.checkInRoom(roomNumber);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredRoomList(PREDICATE_SHOW_ALL_ROOMS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        indicateConciergeChanged();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkoutRoom(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge.checkoutRoom(roomNumber);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredRoomList(PREDICATE_SHOW_ALL_ROOMS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        indicateConciergeChanged();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isRoomCheckedIn(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return versionedConcierge.isRoomCheckedIn(roomNumber);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean roomHasBooking(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return versionedConcierge.roomHasBookings(roomNumber);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean roomHasActiveBooking(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return versionedConcierge.roomHasActiveBooking(roomNumber);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean roomHasActiveOrExpiredBooking(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return versionedConcierge.roomHasActiveOrExpiredBooking(roomNumber);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public boolean canUndoConcierge() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return versionedConcierge.canUndo();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public boolean canRedoConcierge() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return versionedConcierge.canRedo();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void undoConcierge() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge.undo();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        indicateConciergeChanged();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void redoConcierge() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        indicateConciergeChanged();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void commitConcierge() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge.commit();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return versionedConcierge.equals(other.versionedConcierge)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 filteredGuests.equals(other.filteredGuests);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 50,
      "adamwth": 34,
      "-": 131
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyConcierge.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.expenses.ExpenseType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Unmodifiable view of an Concierge"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public interface ReadOnlyConcierge {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the guest list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate guests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cGuest\u003e getGuestList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Returns an unmodifiable view of the room list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * This list will not contain any duplicate rooms."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    ObservableList\u003cRoom\u003e getRoomList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Returns the menu for reference purposes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    Menu getMenu();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Returns an unmodifiable view of the menu."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    Map\u003cString, ExpenseType\u003e getMenuMap();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 14,
      "JIaqingTan": 7,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private Path conciergeFilePath \u003d Paths.get(\"data\" , \"concierge.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Path getConciergeFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return conciergeFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void setConciergeFilePath(Path conciergeFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.conciergeFilePath \u003d conciergeFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                \u0026\u0026 Objects.equals(conciergeFilePath, o.conciergeFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return Objects.hash(guiSettings, conciergeFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + conciergeFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 8,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedConcierge.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * {@code Concierge} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class VersionedConcierge extends Concierge {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final List\u003cReadOnlyConcierge\u003e conciergeStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public VersionedConcierge(ReadOnlyConcierge initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        conciergeStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        conciergeStateList.add(new Concierge(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Saves a copy of the current {@code Concierge} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        conciergeStateList.add(new Concierge(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        conciergeStateList.subList(currentStatePointer + 1, conciergeStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Restores Concierge to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        resetData(conciergeStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Restores Concierge to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        resetData(conciergeStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Returns true if {@code undo()} has Concierge states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Returns true if {@code redo()} has Concierge states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return currentStatePointer \u003c conciergeStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        if (!(other instanceof VersionedConcierge)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge otherVersionedConcierge \u003d (VersionedConcierge) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return super.equals(otherVersionedConcierge)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                \u0026\u0026 conciergeStateList.equals(otherVersionedConcierge.conciergeStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedConcierge.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            super(\"Current state pointer at start of conciergeState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            super(\"Current state pointer at end of conciergeState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 23,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenses/Expense.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teowz46"
        },
        "content": "package seedu.address.model.expenses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.expenses.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Represents a single spending on a single type of service."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class Expense {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Standard date-time format used for this hotel\u0027s expenses"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final DateTimeFormatter DATETIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"d/M/u HH:mm:ss\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final double cost;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final ExpenseType type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Constructs an {@code Expense} object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @param type The menu number of the product or service exchanged for with this expense."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @param cost The monetary value of the expense."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Expense(ExpenseType type, double cost) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Constructs an {@code Expense} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Used if the user is charging the base price and hence does not need to manually enter a price."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @param type The product or service exchanged for with this expense."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @throws ItemNotFoundException if the item\u0027s menu number does not exist in the menu."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Expense(ExpenseType type) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.cost \u003d this.type.getItemCost();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Expense(ExpenseType type, double cost, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(type, dateTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Provides the cost of this expense."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @return The monetary value of the expense."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public double getCost() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Provides the expense type of the item purchased in this expense."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @return The ExpenseType object of the product or service exchanged for with this expense."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public ExpenseType getExpenseType() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Provides the name of the item purchased in this expense."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @return The name of the product or service exchanged for with this expense."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public String getItemName() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return type.getItemName();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Provides the date of the transaction."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @return The date and time of this transaction."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Provides the date of the transaction in a string."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @return The date and time of this transaction in string."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDateTimeString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateTime.format(DATETIME_FORMAT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return cost + \" spent on \" + type.getItemName() + \" on \" + getDateTimeString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                || (other instanceof Expenses // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                \u0026\u0026 cost \u003d\u003d ((Expense) other).cost"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                \u0026\u0026 type.equals(((Expense) other).type)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 dateTime.equals(((Expense) other).dateTime)); // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateTime.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teowz46"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 103,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenses/ExpenseType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teowz46"
        },
        "content": "package seedu.address.model.expenses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teowz46"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Contains all the different types of expenses available at the hotel."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * All products and services have a unique menu number."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * ExpenseType objects will only be created when the menu is read from the hard disk."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class ExpenseType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public static final String MESSAGE_NUMBER_EMPTY \u003d \"The given number is empty.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public static final String MESSAGE_NAME_EMPTY \u003d \"The given name is empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final String itemNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final String itemName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final double itemCost;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Constructor for an {@code ExpenseType} object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param itemNumber The menu number of the item."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param itemName The name of the item."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param itemCost The cost of the item."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpenseType(String itemNumber, String itemName, double itemCost) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(itemNumber, itemName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (itemNumber.equals(\"\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_NUMBER_EMPTY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (itemName.equals(\"\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_NAME_EMPTY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.itemNumber \u003d itemNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.itemCost \u003d itemCost;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpenseType(ExpenseType expenseTypeToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.itemNumber \u003d expenseTypeToCopy.getItemNumber();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.itemName \u003d expenseTypeToCopy.getItemName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.itemCost \u003d expenseTypeToCopy.getItemCost();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public String getItemNumber() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return itemNumber;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public String getItemName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return itemName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public double getItemCost() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return itemCost;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return itemNumber + \" \" + itemName + \" $\" + itemCost;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                || (other instanceof ExpenseType // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                \u0026\u0026 itemNumber.equals(((ExpenseType) other).itemNumber)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                \u0026\u0026 itemName.equals(((ExpenseType) other).itemName)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                \u0026\u0026 itemCost \u003d\u003d ((ExpenseType) other).itemCost); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return itemNumber.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teowz46"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 59,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenses/Expenses.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teowz46"
        },
        "content": "package seedu.address.model.expenses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Contains all of the expenses incurred by the guests of a given room."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class Expenses {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final List\u003cExpense\u003e expenseList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Constructs an {@code Expenses} object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Expenses() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expenseList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Expenses(List\u003cExpense\u003e expenseList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        requireNonNull(expenseList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.expenseList \u003d new LinkedList\u003c\u003e(expenseList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Adds a new {@code Expense} to the current expenses."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * New expense is added in front as it is more likely that recent expenses are accessed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @param newExpense The new expense incurred."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void addExpense(Expense newExpense) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        requireNonNull(newExpense);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expenseList.add(0, newExpense);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void setExpenses(Expenses expenses) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.expenseList.clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.expenseList.addAll(expenses.expenseList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Clears all of the expense records when called."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Usually called when guests have checked out."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void clearExpenses() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expenseList.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public List\u003cExpense\u003e getExpensesList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return Collections.unmodifiableList(expenseList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the total cost of all the expenses"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getTotalCost() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return expenseList.stream().map(Expense::getCost).mapToDouble(Double::doubleValue).sum();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the total cost of all the expenses as a string"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toStringTotalCost() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Double.toString(getTotalCost());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        for (Expense e : expenseList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            output.append(e.toString() + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                || (other instanceof Expenses // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                \u0026\u0026 expenseList.equals(((Expenses) other).expenseList)); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return expenseList.hashCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teowz46"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 71,
      "adamwth": 5,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenses/exceptions/ItemNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teowz46"
        },
        "content": "package seedu.address.model.expenses.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teowz46"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Indicates that the item number provided does not exist in the menu."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teowz46"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class ItemNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public ItemNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        super(\"The item was not found in the menu.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/guest/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.guest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Represents a Guest\u0027s email in Concierge."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/guest/Guest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.guest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Represents a Guest in Concierge."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class Guest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Guest(Name name, Phone phone, Email email, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Guest(Guest toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.name \u003d new Name(toBeCopied.getName().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.phone \u003d new Phone(toBeCopied.getPhone().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.email \u003d new Email(toBeCopied.getEmail().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.tags.addAll(toBeCopied.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if both guests of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * This defines a weaker notion of equality between two guests."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean isSameGuest(Guest otherGuest) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (otherGuest \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return otherGuest !\u003d null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 otherGuest.getName().equals(getName())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 (otherGuest.getPhone().equals(getPhone()) || otherGuest.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if both guests have the same identity and data fields."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * This defines a stronger notion of equality between two guests."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!(other instanceof Guest)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest otherGuest \u003d (Guest) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return otherGuest.getName().equals(getName())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 otherGuest.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 otherGuest.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 otherGuest.getTags().equals(getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "adamwth": 23,
      "-": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/guest/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.guest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Represents a Guest\u0027s name in Concierge."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/guest/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.guest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Tests that a {@code Guest}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cGuest\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean test(Guest guest) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(guest.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/guest/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.guest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Represents a Guest\u0027s phone number in Concierge."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/guest/UniqueGuestList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.guest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.exceptions.DuplicateGuestException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.exceptions.GuestNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * A list of guests that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * A guest is considered unique by comparing using {@code Guest#isSameGuest(Guest)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * guests uses Guest#isSameGuest(Guest) for equality so as to ensure that the guest being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * unique in terms of identity in the UniqueGuestList. However, the removal of a guest uses Guest#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * as to ensure that the guest with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * @see Guest#isSameGuest(Guest)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class UniqueGuestList implements Iterable\u003cGuest\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private final ObservableList\u003cGuest\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if the list contains an equivalent guest as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean contains(Guest toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameGuest);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Adds a guest to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * The guest must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void add(Guest toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new DuplicateGuestException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Replaces the guest {@code target} in the list with {@code editedGuest}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * The guest identity of {@code editedGuest} must not be the same as another existing guest in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void setGuest(Guest target, Guest editedGuest) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireAllNonNull(target, editedGuest);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new GuestNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!target.isSameGuest(editedGuest) \u0026\u0026 contains(editedGuest)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new DuplicateGuestException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        internalList.set(index, editedGuest);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Removes the equivalent guest from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * The guest must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void remove(Guest toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new GuestNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Replaces the contents of this list with {@code replacement}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void setGuests(UniqueGuestList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Replaces the contents of this list with {@code guests}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * {@code guests} must not contain duplicate guests."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void setGuests(List\u003cGuest\u003e guests) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireAllNonNull(guests);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!guestsAreUnique(guests)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new DuplicateGuestException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        internalList.setAll(guests);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public ObservableList\u003cGuest\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Iterator\u003cGuest\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                || (other instanceof UniqueGuestList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueGuestList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if {@code guests} contains only unique guests."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private boolean guestsAreUnique(List\u003cGuest\u003e guests) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        for (int i \u003d 0; i \u003c guests.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            for (int j \u003d i + 1; j \u003c guests.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                if (guests.get(i).isSameGuest(guests.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 47,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/model/guest/exceptions/GuestNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.guest.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Signals that the operation is unable to find the specified guest."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class GuestNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 2,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/Capacity.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Represents a room\u0027s capacity in the hotel."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCapacity(int)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class Capacity {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String MESSAGE_CAPACITY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            \"Capacity should only contain positive integers, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public final Integer value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @param value A valid name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Capacity(int value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        checkArgument(isValidCapacity(value), MESSAGE_CAPACITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Gets the integer value of this capacity"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Integer getValue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if a given int is a valid capacity."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static boolean isValidCapacity(int capacity) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return capacity \u003e 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                || (other instanceof Capacity // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 value.equals(((Capacity) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/DoubleRoom.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.expenses.Expenses;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Bookings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Represents a Double Room in the hotel."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class DoubleRoom extends Room {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Capacity CAPACITY_DOUBLE_ROOM \u003d new Capacity(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public DoubleRoom(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        super(roomNumber, CAPACITY_DOUBLE_ROOM);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * All parameters must be non-null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public DoubleRoom(RoomNumber roomNumber, Expenses expenses, Bookings bookings, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        super(roomNumber, CAPACITY_DOUBLE_ROOM, expenses, bookings, tags);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static int getCapacityValue() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return CAPACITY_DOUBLE_ROOM.getValue();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    DoubleRoom makeRoom(RoomNumber roomNumber, Expenses expenses, Bookings bookings, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return new DoubleRoom(roomNumber, expenses, bookings, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/Room.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.expenses.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.expenses.Expenses;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Booking;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Bookings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.exceptions.NoActiveBookingException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.exceptions.NoActiveOrExpiredBookingException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.booking.exceptions.NoBookingException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.exceptions.OccupiedRoomCheckinException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Represents a room in the hotel."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public abstract class Room {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    protected final RoomNumber roomNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    protected final Capacity capacity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    protected final Expenses expenses;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    protected final Bookings bookings;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    protected final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    protected Room(RoomNumber roomNumber, Capacity capacity) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this(roomNumber, capacity, new Expenses(), new Bookings(), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * All parameters must be non-null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    protected Room(RoomNumber roomNumber, Capacity capacity, Expenses expenses, Bookings bookings, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireAllNonNull(roomNumber, capacity, expenses, bookings, tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.capacity \u003d capacity;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.expenses \u003d expenses;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.bookings \u003d bookings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Special constructor method !IMPORTANT \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Method to edit a room by passing arguments and getting a new Room with those arguments"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Abstract to allow subclass to override and return a {@code Room} of their own type"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Package-private to hide it from outside classes"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    abstract Room makeRoom(RoomNumber roomNumber, Expenses expenses, Bookings bookings, Set\u003cTag\u003e tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Getters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public RoomNumber getRoomNumber() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return roomNumber;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Capacity getCapacity() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return capacity;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Expenses getExpenses() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return expenses;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Bookings getBookings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return bookings;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns an {@code Optional} of the first booking of this room"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Optional\u003cBooking\u003e getFirstBooking() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Booking firstBooking;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            firstBooking \u003d bookings.getFirstBooking();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        } catch (NoBookingException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            firstBooking \u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return Optional.ofNullable(firstBooking);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Bookings operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Adds a booking to a copy of this room\u0027s set of bookings"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Room addBooking(Booking booking) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Bookings editedBookings \u003d bookings.add(booking);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return makeRoom(this.roomNumber, this.expenses, editedBookings, this.tags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Update a booking with the edited booking"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Room updateBooking(Booking target, Booking editedBooking) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Bookings editedBookings \u003d bookings.updateBooking(target, editedBooking);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return makeRoom(this.roomNumber, this.expenses, editedBookings, this.tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Checks in the first booking of this room and its occupant"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Room checkIn() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!hasActiveBooking()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new NoActiveBookingException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (isCheckedIn()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new OccupiedRoomCheckinException();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Booking firstBooking \u003d bookings.getFirstBooking();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return updateBooking(firstBooking, firstBooking.checkIn());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Checks out the first booking of this room and its current occupant."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Future features to include exporting of receipt, setting room to housekeeping status for __x__ hours."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Room checkout() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!hasActiveOrExpiredBooking()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new NoActiveOrExpiredBookingException();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Booking firstBooking \u003d bookings.getFirstBooking();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return makeRoom(this.roomNumber, this.expenses, bookings.remove(firstBooking), this.tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // expenses.report(); // weizheng implement this later"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Expenses operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Add an expense to this room\u0027s expenses"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        expenses.addExpense(expense);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Boolean checkers \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if room\u0027s first booking has been checked in."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean isCheckedIn() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Booking firstBooking \u003d bookings.getFirstBooking();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return firstBooking.getIsCheckedIn();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if this room\u0027s bookings is non-empty"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean hasBookings() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return !bookings.isEmpty();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if room\u0027s first booking is active."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean hasActiveBooking() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Booking firstBooking \u003d bookings.getFirstBooking();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return firstBooking.isActive();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if room\u0027s first booking is active or expired"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean hasActiveOrExpiredBooking() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Booking firstBooking \u003d bookings.getFirstBooking();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return firstBooking.isActive() || firstBooking.isExpired();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if both rooms of the same name have the same room number."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * This defines a weaker notion of equality between two rooms."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean isSameRoom(Room otherRoom) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (otherRoom \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return otherRoom !\u003d null"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            \u0026\u0026 otherRoom.getRoomNumber().equals(getRoomNumber());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if both rooms have the same identity and data fields."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * This defines a stronger notion of equality between two rooms."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!(other instanceof Room)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Room otherRoom \u003d (Room) other;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return otherRoom.getRoomNumber().equals(getRoomNumber())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 otherRoom.getCapacity().equals(getCapacity())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 otherRoom.getBookings().equals(getBookings())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 otherRoom.getExpenses().equals(getExpenses())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 otherRoom.getTags().equals(getTags());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return Objects.hash(roomNumber, capacity, expenses, bookings, tags);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        builder.append(\"Room: \")"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                .append(getRoomNumber())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                .append(\" Capacity: \")"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                .append(getCapacity())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\"Expenses: \")"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getExpenses())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Bookings: \")"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                .append(getBookings())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "adamwth": 238,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/RoomNumber.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Represents a Room\u0027s room number in Concierge."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRoomNumber(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class RoomNumber {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String MAX_ROOM_NUMBER \u003d \"100\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String MESSAGE_ROOM_NUMBER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            String.format(\"Room Number should be a string that only contain numbers from 001 to %s, and it should \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                + \"not be blank\", MAX_ROOM_NUMBER);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String ROOM_NUMBER_VALIDATION_REGEX \u003d \"^(0\\\\d[1-9]|0[1-9]\\\\d|100)$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Constructs a {@code id}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @param value A valid room number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public RoomNumber(String value) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        checkArgument(isValidRoomNumber(value), MESSAGE_ROOM_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if a given string is a valid room number."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidRoomNumber(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ROOM_NUMBER_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Index getRoomNumberAsIndex() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(value));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof RoomNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((RoomNumber) other).value)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "adamwth": 43,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/SingleRoom.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.expenses.Expenses;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Bookings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Represents a Single Room in the hotel."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class SingleRoom extends Room {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Capacity CAPACITY_SINGLE_ROOM \u003d new Capacity(1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public SingleRoom(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        super(roomNumber, CAPACITY_SINGLE_ROOM);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * All parameters must be non-null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public SingleRoom(RoomNumber roomNumber, Expenses expenses, Bookings bookings, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        super(roomNumber, CAPACITY_SINGLE_ROOM, expenses, bookings, tags);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static int getCapacityValue() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return CAPACITY_SINGLE_ROOM.getValue();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    SingleRoom makeRoom(RoomNumber roomNumber, Expenses expenses, Bookings bookings, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return new SingleRoom(roomNumber, expenses, bookings, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/SuiteRoom.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.expenses.Expenses;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Bookings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Represents a Suite Room in the hotel."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class SuiteRoom extends Room {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Capacity CAPACITY_SUITE_ROOM \u003d new Capacity(5);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * All parameters must be non-null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public SuiteRoom(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        super(roomNumber, CAPACITY_SUITE_ROOM);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * All parameters must be non-null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public SuiteRoom(RoomNumber roomNumber, Expenses expenses, Bookings bookings, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        super(roomNumber, CAPACITY_SUITE_ROOM, expenses, bookings, tags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static int getCapacityValue() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return CAPACITY_SUITE_ROOM.getValue();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public SuiteRoom makeRoom(RoomNumber roomNumber, Expenses expenses, Bookings bookings, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return new SuiteRoom(roomNumber, expenses, bookings, tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/UniqueRoomList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.exceptions.DuplicateRoomException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.exceptions.RoomNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * A list of rooms that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * A room is considered unique by comparing using {@code Room#isSameRoom(Room)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * rooms uses Room#isSameRoom(Room) for equality so as to ensure that the room being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * unique in terms of identity in the UniqueRoomList. A room can be removed by passing either its reference or"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * room number to the remove() method."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * @see Room#isSameRoom(Room)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class UniqueRoomList implements Iterable\u003cRoom\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private final ObservableList\u003cRoom\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Initializes an empty room list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public UniqueRoomList() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Initializes a room list with rooms ranging from 001 up to the maxRoomNumber"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @param maxRoomNumber The maximum room number as a string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public UniqueRoomList(String maxRoomNumber) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.internalList.setAll(Stream.iterate(1, i -\u003e i \u003c\u003d Integer.parseInt(maxRoomNumber), i -\u003e i + 1)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            .map(i -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                RoomNumber roomNumber \u003d new RoomNumber(String.format(\"%03d\", i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                if (i % 10 \u003d\u003d 0) { // All rooms with room number that is multiple of 10 is a SuiteRoom."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                    return new SuiteRoom(roomNumber);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                if (i % 2 \u003d\u003d 0) { // All rooms with even room number is a DoubleRoom."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                    return new DoubleRoom(roomNumber);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                // ALl rooms with odd room number is a SingleRoom."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                return new SingleRoom(roomNumber);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            })"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Getters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns the room according to the room number"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Room getRoom(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireNonNull(roomNumber);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        for (Room room : internalList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            if (room.getRoomNumber().equals(roomNumber)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                return room;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        throw new RoomNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Adds a room to the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * The room must not already exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void add(Room toAdd) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new DuplicateRoomException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Removes the equivalent room from the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * The room must exist in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void remove(Room toRemove) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new RoomNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Replaces the room {@code target} in the list with {@code editedRoom}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * The room identity of {@code editedRoom} must not be the same as another existing room in the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void setRoom(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireAllNonNull(target, editedRoom);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new RoomNotFoundException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!target.isSameRoom(editedRoom) \u0026\u0026 contains(editedRoom)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new DuplicateRoomException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        internalList.set(index, editedRoom);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Replaces the contents of this list with {@code rooms}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * {@code rooms} must not contain duplicate rooms."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void setRooms(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireAllNonNull(rooms);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!roomsAreUnique(rooms)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new DuplicateRoomException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        internalList.setAll(rooms);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Boolean checkers \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if the list contains an equivalent room as the given argument."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean contains(Room toCheck) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRoom);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public ObservableList\u003cRoom\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Iterator\u003cRoom\u003e iterator() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                || (other instanceof UniqueRoomList // instanceof handles nulls"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueRoomList) other).internalList));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if {@code rooms} contains only unique rooms."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private boolean roomsAreUnique(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        for (int i \u003d 0; i \u003c rooms.size() - 1; i++) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            for (int j \u003d i + 1; j \u003c rooms.size(); j++) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                if (rooms.get(i).isSameRoom(rooms.get(j))) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 170,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/booking/Booking.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Represents a Booking of a room in the hotel."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class Booking implements Comparable\u003cBooking\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private final Guest guest;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private final BookingPeriod bookingPeriod;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private final Boolean isCheckedIn;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Guest and BookingPeriod must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Booking(Guest guest, BookingPeriod bookingPeriod) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireAllNonNull(guest, bookingPeriod);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.guest \u003d guest;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.bookingPeriod \u003d bookingPeriod;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.isCheckedIn \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Private constructor used to check-in a booking"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Booking(Guest guest, BookingPeriod bookingPeriod, boolean isCheckedIn) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireAllNonNull(guest, bookingPeriod);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.guest \u003d guest;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.bookingPeriod \u003d bookingPeriod;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.isCheckedIn \u003d isCheckedIn;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Guest getGuest() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return guest;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public BookingPeriod getBookingPeriod() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return bookingPeriod;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Boolean getIsCheckedIn() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return isCheckedIn;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns an edited booking that has been checked-in"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * This is needed to maintain immutability of objects in Concierge"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Booking checkIn() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return new Booking(this.getGuest(), this.getBookingPeriod(), true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Checks if the {@code Booking} overlaps with the other."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean isOverlapping(Booking other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return bookingPeriod.isOverlapping(other.getBookingPeriod());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Checks if this booking is expired."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean isExpired() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return getBookingPeriod().isExpired();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Checks if this booking is active."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean isActive() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return getBookingPeriod().isActive();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Checks if this booking is upcoming."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean isUpcoming() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return getBookingPeriod().isUpcoming();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Checks if this booking includes the given date"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean includesDate(LocalDate date) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return getBookingPeriod().includesDate(date);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if both bookings have the same guest and booking period."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * This defines a weaker notion of equality between two rooms, as it does not need checkIn to be the same."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean isSameBooking(Booking otherBooking) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (otherBooking \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return otherBooking !\u003d null"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            \u0026\u0026 otherBooking.getGuest().equals(getGuest())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            \u0026\u0026 otherBooking.getBookingPeriod().equals(getBookingPeriod());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if both bookings have the same identity and data fields."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * This defines a stronger notion of equality between two bookings."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!(other instanceof Booking)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Booking otherBooking \u003d (Booking) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return otherBooking.getGuest().equals(getGuest())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            \u0026\u0026 otherBooking.getBookingPeriod().equals(getBookingPeriod())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            \u0026\u0026 (otherBooking.getIsCheckedIn().equals(getIsCheckedIn()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Gets the short description of this room, which comprises of"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * 1) Guest\u0027s name"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * 2) Booking period"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * 3) Checked-in status"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public String toStringShortDescription() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        builder.append(\"Guest: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            .append(getGuest().getName())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            .append(\"\\nBooking period: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            .append(getBookingPeriod())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            .append(\"\\nChecked-in: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            .append(getIsCheckedIn() ? \"Yes\" : \"No\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return Objects.hash(guest, bookingPeriod);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        builder.append(\"Guest: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                .append(getGuest())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                .append(\" BookingPeriod: \")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                .append(getBookingPeriod())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                .append(\" Checked-in: \")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                .append(getIsCheckedIn());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public int compareTo(Booking other) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return bookingPeriod.compareTo(other.getBookingPeriod());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 169,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/booking/BookingPeriod.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Represents a Room\u0027s booking period in Concierge."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * {@link #isValidBookingPeriod(String testStartDate,String testEndDate)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class BookingPeriod implements Comparable\u003cBookingPeriod\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String MESSAGE_BOOKING_PERIOD_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Booking period takes in 2 dates, each of which should be in the form day/month/year. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"day can be 1 or 2 digits, month can be 1 or 2 digits, year can be 2 or 4 digits. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Also, dates should be correct dates according to the calendar, and should not be blank.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Standard date format used for this hotel\u0027s bookings."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final DateTimeFormatter STRING_TO_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"d/M/[uuuu][uu]\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final DateTimeFormatter DATE_TO_STRING_FORMAT \u003d DateTimeFormatter.ofPattern(\"d/M/u\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public final LocalDate startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public final LocalDate endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Constructs a {@code BookingPeriod} that encapsulates the period from start through end date (inclusive)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public BookingPeriod(String startDate, String endDate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireAllNonNull(startDate, endDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        checkArgument(isValidBookingPeriod(startDate, endDate), MESSAGE_BOOKING_PERIOD_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.startDate \u003d parseDate(startDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.endDate \u003d parseDate(endDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public String getStartDateAsFormattedString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return startDate.format(DATE_TO_STRING_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public String getEndDateAsFormattedString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return endDate.format(DATE_TO_STRING_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static boolean isValidBookingPeriod(String testStartDate, String testEndDate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return parsableDate(testStartDate) \u0026\u0026 parsableDate(testEndDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Checks whether the given date can be constructed into {@code LocalDate} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @param date A date of the correct format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @return True if given date is of correct format and can be constructed into LocalDate object, false otherwise."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static boolean parsableDate(String date) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            parseDate(date);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Parses the given date to {@code }LocalDate} object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @param date A date of the correct format."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @return {@code LocalDate} object representing the date."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private static LocalDate parseDate(String date) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return LocalDate.parse(date, STRING_TO_DATE_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Checks if the start and end dates of this {@code BookingPeriod} overlaps with the other."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Note: There is NO OVERLAPPING if this period\u0027s start date coincides with another\u0027s end date."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @param other Other booking period to be compared to."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @return True if there is any overlap, false otherwise."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean isOverlapping(BookingPeriod other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return startDate.isBefore(other.endDate)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            \u0026\u0026 other.startDate.isBefore(this.endDate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Checks if this booking period is expired."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Expired means being before today\u0027s date."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean isExpired() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return startDate.isBefore(today);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Checks if this booking period is active now."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean isActive() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return includesDate(today);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Checks if this booking period is upcoming."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Upcoming is defined as strictly after today\u0027s date."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean isUpcoming() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return endDate.isAfter(today);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Checks if the given date is within this booking period\u0027s start and end dates, inclusively"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean includesDate(LocalDate date) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return date.compareTo(startDate) \u003e\u003d 0"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            \u0026\u0026 date.compareTo(endDate) \u003c\u003d 0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String start \u003d startDate.format(DATE_TO_STRING_FORMAT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String end \u003d endDate.format(DATE_TO_STRING_FORMAT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return String.format(\"%s - %s\", start, end);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                || (other instanceof BookingPeriod // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 startDate.equals(((BookingPeriod) other).startDate) // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 endDate.equals(((BookingPeriod) other).endDate));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return Objects.hash(startDate, endDate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public int compareTo(BookingPeriod other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return startDate.compareTo(other.startDate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "adamwth": 145,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/booking/Bookings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.exceptions.BookingNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.booking.exceptions.NoBookingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.exceptions.OverlappingBookingException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * A sorted set of Bookings that maintains non-overlapping property between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * A Booking is considered non-overlapping by comparing using"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * {@code Booking#canAcceptBooking(Booking)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Bookings uses Booking#canAcceptBooking(Booking) to ensure that the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Booking being added or updated does not overlap any existing ones in Bookings."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * However, the removal of a Booking uses Booking#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * as to ensure that the Booking with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Supports a minimal set of set operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Guarantees immutability"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * @see Booking#isOverlapping(Booking)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class Bookings {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public final SortedSet\u003cBooking\u003e sortedBookingsSet;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Constructor for empty bookings set"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Bookings() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.sortedBookingsSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Constructor for creating a copy of a bookings"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Bookings(SortedSet\u003cBooking\u003e sortedBookingsSet) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireAllNonNull(sortedBookingsSet);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (bookingsAreOverlapping(sortedBookingsSet)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new OverlappingBookingException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.sortedBookingsSet \u003d sortedBookingsSet;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Getters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public SortedSet\u003cBooking\u003e getSortedBookingsSet() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return sortedBookingsSet;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Gets the first booking in the set"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Booking getFirstBooking() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoBookingException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return sortedBookingsSet.first();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Adds a Booking to a copy of the set."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * The Booking must not already exist in the set."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Bookings add(Booking toAdd) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!canAcceptBooking(toAdd)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new OverlappingBookingException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        SortedSet\u003cBooking\u003e editedBookings \u003d new TreeSet\u003c\u003e(this.sortedBookingsSet);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedBookings.add(toAdd);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return new Bookings(editedBookings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Removes the equivalent Booking from a copy of the set."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * The Booking must exist in the set."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Bookings remove(Booking toRemove) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!sortedBookingsSet.contains(toRemove)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new BookingNotFoundException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        SortedSet\u003cBooking\u003e editedBookings \u003d new TreeSet\u003c\u003e(this.sortedBookingsSet);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedBookings.remove(toRemove);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return new Bookings(editedBookings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Replaces the Booking {@code target} in a copy of the set with {@code editedBooking}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * {@code target} must exist in the set."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Bookings updateBooking(Booking target, Booking editedBooking) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireAllNonNull(target, editedBooking);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!sortedBookingsSet.contains(target)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new BookingNotFoundException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!target.isSameBooking(editedBooking) \u0026\u0026 !canAcceptIfReplaceBooking(target, editedBooking)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new OverlappingBookingException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        SortedSet\u003cBooking\u003e editedBookings \u003d new TreeSet\u003c\u003e(this.sortedBookingsSet);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedBookings.remove(target);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedBookings.add(editedBooking);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return new Bookings(editedBookings);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Boolean checkers \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if there are no bookings"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return sortedBookingsSet.isEmpty();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if the given booking overlaps with any existing booking in the set"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean canAcceptBooking(Booking toCheck) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return sortedBookingsSet.stream().noneMatch(toCheck::isOverlapping);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if the given booking overlaps with any existing booking in the set, excluding the one it replaces"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean canAcceptIfReplaceBooking(Booking toReplace, Booking toCheck) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        requireAllNonNull(toReplace, toCheck);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return sortedBookingsSet.stream().noneMatch("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            booking -\u003e !booking.equals(toReplace) \u0026\u0026 booking.isOverlapping(toCheck));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if {@code Bookings} contains at least one overlapping Booking."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static boolean bookingsAreOverlapping(Set\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return bookings.stream().anyMatch(b1 -\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            bookings.stream().anyMatch(b2 -\u003e !b1.equals(b2) \u0026\u0026 b1.isOverlapping(b2)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                || (other instanceof Bookings // instanceof handles nulls"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                        \u0026\u0026 sortedBookingsSet.equals(((Bookings) other).sortedBookingsSet));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return sortedBookingsSet.hashCode();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        sortedBookingsSet.forEach(builder::append);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 168,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/booking/exceptions/BookingNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room.booking.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Signals that the operation is unable to find the specified booking date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class BookingNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public BookingNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        super(\"No such booking found.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/booking/exceptions/NoActiveBookingException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room.booking.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Signals that the operation is unable to find an active booking."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class NoActiveBookingException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public NoActiveBookingException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"No active booking found.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 9,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/booking/exceptions/NoActiveOrExpiredBookingException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room.booking.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Signals that the operation is unable to find an active or upcoming booking."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class NoActiveOrExpiredBookingException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public NoActiveOrExpiredBookingException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"No active or upcoming booking found.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 9,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/booking/exceptions/OverlappingBookingException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room.booking.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Signals that the operation will result in overlapping Bookings"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class OverlappingBookingException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public OverlappingBookingException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        super(\"Operation would result in overlapping booking dates.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/exceptions/DuplicateRoomException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Signals that the operation will result in duplicate Rooms"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class DuplicateRoomException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public DuplicateRoomException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        super(\"Operation would result in duplicate rooms.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/exceptions/OccupiedRoomCheckinException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Signals that the operation is attempting to check in a guest into an occupied room"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class OccupiedRoomCheckinException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public OccupiedRoomCheckinException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        super(\"Operation is attempting to checkin an occupied room.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/exceptions/RoomNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Signals that the operation is unable to find the specified room."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class RoomNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public RoomNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        super(\"No such room found.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Represents a Tag in Concierge."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.ReadOnlyConcierge;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expenses.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.expenses.ExpenseType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.UniqueRoomList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Booking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.BookingPeriod;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Contains utility methods for populating {@code Concierge} with sample data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Guest[] getSampleGuests() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return new Guest[] {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            new Guest(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            new Guest(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            new Guest(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            new Guest(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"family\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            new Guest(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            new Guest(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns a room list initialized with the maximum number of rooms as set in RoomNumber class"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static List\u003cRoom\u003e getSampleRooms() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return new UniqueRoomList(RoomNumber.MAX_ROOM_NUMBER).asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns a room list initialized with the maximum number of rooms, and 1 sample booking for testing"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Use to see if xml file reflects changes"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * DELETE WHEN TESTED IN UNIT TESTS"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cRoom\u003e getSampleRoomsWithBookingsExpenses() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UniqueRoomList uniqueRoomList \u003d new UniqueRoomList(RoomNumber.MAX_ROOM_NUMBER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueRoomList.getRoom(new RoomNumber(\"001\"))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            .addBooking("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                new Booking(getSampleGuests()[0],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                new BookingPeriod("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                    LocalDate.now().format(BookingPeriod.DATE_TO_STRING_FORMAT),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalDate.now().plusDays(1).format(BookingPeriod.DATE_TO_STRING_FORMAT))));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueRoomList.getRoom(new RoomNumber(\"001\")).addExpense(new Expense(getSampleExpenseTypes()[0]));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return uniqueRoomList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ExpenseType[] getSampleExpenseTypes() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ExpenseType[] {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            new ExpenseType(\"RS01\", \"Room service: Red wine\", 50),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            new ExpenseType(\"RS02\", \"Room service: Beef steak\", 70),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            new ExpenseType(\"RS03\", \"Room service: Thai massage\", 100),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            new ExpenseType(\"SP01\", \"Swimming pool: Entry\", 5),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            new ExpenseType(\"MB01\", \"Minibar: Coca cola\", 3),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            new ExpenseType(\"MB02\", \"Minibar: Sprite\", 3),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            new ExpenseType(\"MB03\", \"Minibar: Tiger beer\", 6),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            new ExpenseType(\"MB04\", \"Minibar: Mineral water\", 3),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public static Map\u003cString, ExpenseType\u003e getSampleMenuMap() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        HashMap\u003cString, ExpenseType\u003e sampleMenuMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ExpenseType expenseType : getSampleExpenseTypes()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleMenuMap.put(expenseType.getItemNumber(), expenseType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return sampleMenuMap;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public static ReadOnlyConcierge getSampleConcierge() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Concierge sampleAb \u003d new Concierge();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Guest sampleGuest : getSampleGuests()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addGuest(sampleGuest);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        sampleAb.setRooms(getSampleRooms());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        sampleAb.setMenu(getSampleMenuMap());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 14,
      "adamwth": 32,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ConciergeStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.ReadOnlyConcierge;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Concierge}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public interface ConciergeStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    Path getConciergeFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Returns Concierge data as a {@link ReadOnlyConcierge}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    Optional\u003cReadOnlyConcierge\u003e readConcierge() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see #getConciergeFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    Optional\u003cReadOnlyConcierge\u003e readConcierge(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Saves the given {@link ReadOnlyConcierge} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @param concierge cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    void saveConcierge(ReadOnlyConcierge concierge) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see #saveConcierge(ReadOnlyConcierge)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    void saveConcierge(ReadOnlyConcierge concierge, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 13,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.commons.events.model.ConciergeChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.ReadOnlyConcierge;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public interface Storage extends ConciergeStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    Path getConciergeFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    Optional\u003cReadOnlyConcierge\u003e readConcierge() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    void saveConcierge(ReadOnlyConcierge concierge) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Saves the current version of Concierge to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    void handleConciergeChangedEvent(ConciergeChangedEvent abce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 8,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.commons.events.model.ConciergeChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.ReadOnlyConcierge;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Manages storage of Concierge data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private ConciergeStorage conciergeStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public StorageManager(ConciergeStorage conciergeStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.conciergeStorage \u003d conciergeStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Concierge methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Path getConciergeFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return conciergeStorage.getConciergeFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Optional\u003cReadOnlyConcierge\u003e readConcierge() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return readConcierge(conciergeStorage.getConciergeFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Optional\u003cReadOnlyConcierge\u003e readConcierge(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return conciergeStorage.readConcierge(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void saveConcierge(ReadOnlyConcierge concierge) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        saveConcierge(concierge, conciergeStorage.getConciergeFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void saveConcierge(ReadOnlyConcierge concierge, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        conciergeStorage.saveConcierge(concierge, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void handleConciergeChangedEvent(ConciergeChangedEvent event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            saveConcierge(event.data);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 19,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedBooking.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.Capacity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Booking;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * JAXB-friendly version of the Booking."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class XmlAdaptedBooking {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Booking\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private XmlAdaptedGuest guest;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private XmlAdaptedBookingPeriod bookingPeriod;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private Boolean checkin;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Constructs an XmlAdaptedBooking."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public XmlAdaptedBooking() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Converts a given booking into this class for JAXB use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedBooking"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public XmlAdaptedBooking(Booking source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        guest \u003d new XmlAdaptedGuest(source.getGuest());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        bookingPeriod \u003d new XmlAdaptedBookingPeriod(source.getBookingPeriod());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        checkin \u003d source.getIsCheckedIn();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Converts this jaxb-friendly adapted booking object into the model\u0027s booking object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted booking"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Booking toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (guest \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Guest.class.getSimpleName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (bookingPeriod \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Capacity.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (checkin \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Boolean.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return new Booking(guest.toModelType(), bookingPeriod.toModelType(), checkin);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!(other instanceof XmlAdaptedBooking)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        XmlAdaptedBooking otherbooking \u003d (XmlAdaptedBooking) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return Objects.equals(guest, otherbooking.guest)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 Objects.equals(bookingPeriod, otherbooking.bookingPeriod)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 Objects.equals(checkin, otherbooking.checkin);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 77,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedBookingPeriod.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.BookingPeriod;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * JAXB-friendly version of the BookingPeriod."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class XmlAdaptedBookingPeriod {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"BookingPeriod\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private String startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private String endDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Constructs an XmlAdaptedBookingPeriod."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public XmlAdaptedBookingPeriod() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Converts a given booking into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedBookingPeriod"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public XmlAdaptedBookingPeriod(BookingPeriod source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        startDate \u003d source.getStartDateAsFormattedString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        endDate \u003d source.getEndDateAsFormattedString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Converts this jaxb-friendly adapted booking object into the model\u0027s booking object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted booking"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public BookingPeriod toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (startDate \u003d\u003d null || endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, LocalDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!BookingPeriod.parsableDate(startDate) || !BookingPeriod.parsableDate(endDate)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new IllegalValueException(BookingPeriod.MESSAGE_BOOKING_PERIOD_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return new BookingPeriod(startDate, endDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!(other instanceof XmlAdaptedBookingPeriod)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        XmlAdaptedBookingPeriod otherbookingPeriod \u003d (XmlAdaptedBookingPeriod) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return Objects.equals(startDate, otherbookingPeriod.startDate)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 Objects.equals(endDate, otherbookingPeriod.endDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 70,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedExpense.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teowz46"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Menu;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.expenses.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.expenses.ExpenseType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * JAXB-friendly adapted version of Expense."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class XmlAdaptedExpense {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public static final String EXPENSETYPE_UNKNOWN_NAME \u003d \"Unknown\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public static final double EXPENSETYPE_UNKNOWN_COST \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private String item;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private double cost;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private String datetime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Constructs an XmlAdaptedExpense."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public XmlAdaptedExpense() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Constructs an XmlAdaptedExpense with the given fields."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @param item The menu number of the item."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @param cost The cost incurred in this expense."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @param datetime The date and time of this transaction."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public XmlAdaptedExpense(String item, double cost, String datetime) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.datetime \u003d datetime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Converts an Expense object into JAXB-friendly form."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @param source The Expense object to be converted."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public XmlAdaptedExpense(Expense source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.item \u003d source.getExpenseType().getItemNumber();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.cost \u003d source.getCost();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.datetime \u003d source.getDateTimeString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Converts this object into the proper Expense object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @return The Expense representation of this object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Expense toModelType(Menu menu) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        ExpenseType expenseType;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        if (!menu.isValidMenuNumber(item)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            expenseType \u003d new ExpenseType(item, EXPENSETYPE_UNKNOWN_NAME, EXPENSETYPE_UNKNOWN_COST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            expenseType \u003d menu.getExpenseType(item);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.parse(datetime, Expense.DATETIME_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return new Expense(expenseType, cost, localDateTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teowz46"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 69,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedExpenseType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teowz46"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.expenses.ExpenseType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teowz46"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * JAXB-friendly adapted version of Expense."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class XmlAdaptedExpenseType {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public static final String MESSAGE_NUMBER_MISSING \u003d \"ExpenseType\u0027s number field is missing!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public static final String MESSAGE_NAME_MISSING \u003d \"ExpenseType\u0027s name field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public static final String MESSAGE_COST_MISSING \u003d \"ExpenseType\u0027s cost field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private String itemNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private String itemName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private Double itemCost;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Constructs an XmlAdaptedExpenseType."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public XmlAdaptedExpenseType() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Constructs an XmlAdaptedExpenseType with the given fields."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     *  @param itemNumber The menu number of the item."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @param itemName The cost incurred in this expense."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @param itemCost The date and time of this transaction."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public XmlAdaptedExpenseType(String itemNumber, String itemName, Double itemCost) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.itemNumber \u003d itemNumber;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.itemCost \u003d itemCost;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Converts an ExpenseType object into JAXB-friendly form."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @param source The ExpenseType object to be converted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public XmlAdaptedExpenseType(ExpenseType source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.itemNumber \u003d source.getItemNumber();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.itemName \u003d source.getItemName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.itemCost \u003d source.getItemCost();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Converts this object into the proper ExpenseType object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @return The ExpenseType representation of this object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public ExpenseType toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        if (itemNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NUMBER_MISSING);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        if (itemName \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NAME_MISSING);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        if (itemCost \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            throw new IllegalValueException(MESSAGE_COST_MISSING);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            return new ExpenseType(itemNumber, itemName, itemCost);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            throw new IllegalValueException(iae.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teowz46"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedGuest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * JAXB-friendly version of the Guest."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedGuest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Guest\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedGuest."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedGuest() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedGuest} with the given guest details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedGuest(String name, String phone, String email, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Converts a given Guest into this class for JAXB use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedGuest"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedGuest(Guest source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Converts this jaxb-friendly adapted guest object into the model\u0027s Guest object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted guest"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Guest toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e guestTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            guestTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(guestTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Guest(modelName, modelPhone, modelEmail, modelTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedGuest)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedGuest otherGuest \u003d (XmlAdaptedGuest) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherGuest.name)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherGuest.phone)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherGuest.email)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherGuest.tagged);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 6,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedRoom.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Menu;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.expenses.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.expenses.Expenses;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Capacity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.DoubleRoom;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.SingleRoom;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.SuiteRoom;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Booking;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Bookings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " * JAXB-friendly version of the Room."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class XmlAdaptedRoom {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Room\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String MESSAGE_OVERLAPPING_BOOKING \u003d \"Room contains overlapping bookings!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_ROOM_WITH_CAPACITY \u003d \"No such rooms with the capacity %d exists.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private String roomNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private Integer capacity;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private List\u003cXmlAdaptedBooking\u003e bookings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private List\u003cXmlAdaptedExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Constructs an XmlAdaptedRoom."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public XmlAdaptedRoom() {}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Converts a given room into this class for JAXB use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedRoom"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public XmlAdaptedRoom(Room source) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomNumber \u003d source.getRoomNumber().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        capacity \u003d source.getCapacity().getValue();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        expenses.addAll(source.getExpenses().getExpensesList().stream().map(XmlAdaptedExpense::new)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        bookings.addAll(source.getBookings().getSortedBookingsSet().stream().map(XmlAdaptedBooking::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        tagged \u003d source.getTags().stream().map(XmlAdaptedTag::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Converts this jaxb-friendly adapted room object into the model\u0027s room object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted room"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Room toModelType(Menu menu) throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (roomNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, RoomNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!RoomNumber.isValidRoomNumber(roomNumber)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new IllegalValueException(RoomNumber.MESSAGE_ROOM_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        final RoomNumber modelRoomNumber \u003d new RoomNumber(roomNumber);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (capacity \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Capacity.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!Capacity.isValidCapacity(capacity)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new IllegalValueException(Capacity.MESSAGE_CAPACITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        final Capacity modelCapacity \u003d new Capacity(capacity);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        final SortedSet\u003cBooking\u003e bookingsSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        for (XmlAdaptedBooking b : bookings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            bookingsSet.add(b.toModelType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        final Bookings modelBookings \u003d new Bookings(bookingsSet);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        final List\u003cExpense\u003e expenseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        for (XmlAdaptedExpense expense : expenses) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            expenseList.add(expense.toModelType(menu));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Expenses modelExpenses \u003d new Expenses(expenseList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        final List\u003cTag\u003e roomTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            roomTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(roomTags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (modelCapacity.equals(SingleRoom.CAPACITY_SINGLE_ROOM)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return new SingleRoom(modelRoomNumber, modelExpenses, modelBookings, modelTags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        } else if (modelCapacity.equals(DoubleRoom.CAPACITY_DOUBLE_ROOM)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return new DoubleRoom(modelRoomNumber, modelExpenses, modelBookings, modelTags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        } else if (modelCapacity.equals(SuiteRoom.CAPACITY_SUITE_ROOM)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return new SuiteRoom(modelRoomNumber, modelExpenses, modelBookings, modelTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new IllegalValueException(String.format(MESSAGE_NO_SUCH_ROOM_WITH_CAPACITY, capacity));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (!(other instanceof XmlAdaptedRoom)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        XmlAdaptedRoom otherRoom \u003d (XmlAdaptedRoom) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return Objects.equals(roomNumber, otherRoom.roomNumber)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u0026\u0026 Objects.equals(capacity, otherRoom.capacity)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u0026\u0026 Objects.equals(expenses, otherRoom.expenses)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 Objects.equals(bookings, otherRoom.bookings)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u0026\u0026 tagged.equals(otherRoom.tagged);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 5,
      "JIaqingTan": 90,
      "adamwth": 44,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted guest"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlConciergeStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.ReadOnlyConcierge;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * A class to access Concierge data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class XmlConciergeStorage implements ConciergeStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlConciergeStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public XmlConciergeStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Path getConciergeFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Optional\u003cReadOnlyConcierge\u003e readConcierge() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return readConcierge(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Similar to {@link #readConcierge()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Optional\u003cReadOnlyConcierge\u003e readConcierge(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            logger.info(\"Concierge file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlSerializableConcierge xmlConcierge \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            return Optional.of(xmlConcierge.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void saveConcierge(ReadOnlyConcierge concierge) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        saveConcierge(concierge, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Similar to {@link #saveConcierge(ReadOnlyConcierge)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void saveConcierge(ReadOnlyConcierge concierge, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        requireNonNull(concierge);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableConcierge(concierge));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 19,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * Stores concierge data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Saves the given concierge data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableConcierge concierge)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            XmlUtil.saveDataToFile(file, concierge);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Returns Concierge in the file or an empty Concierge"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public static XmlSerializableConcierge loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableConcierge.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 7,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableConcierge.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.ReadOnlyConcierge;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.expenses.ExpenseType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * An Immutable Concierge that is serializable to XML format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "@XmlRootElement(name \u003d \"concierge\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class XmlSerializableConcierge {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GUEST \u003d \"Guest list contains duplicate guest(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ROOM \u003d \"Room list contains duplicate room(s)\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private List\u003cXmlAdaptedGuest\u003e guests;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private List\u003cXmlAdaptedRoom\u003e rooms;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private HashMap\u003cString, XmlAdaptedExpenseType\u003e menu;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Creates an empty XmlSerializableConcierge."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public XmlSerializableConcierge() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        rooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        menu \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public XmlSerializableConcierge(ReadOnlyConcierge src) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guests.addAll(src.getGuestList().stream().map(XmlAdaptedGuest::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        rooms.addAll(src.getRoomList().stream().map(XmlAdaptedRoom::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        for (Map.Entry\u003cString, ExpenseType\u003e mapping : src.getMenuMap().entrySet()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            menu.put(mapping.getKey(), new XmlAdaptedExpenseType(mapping.getValue()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Converts this concierge into the model\u0027s {@code Concierge} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedGuest / XmlAdaptedRoom}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Concierge toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Concierge concierge \u003d new Concierge();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        for (XmlAdaptedGuest p : guests) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            Guest guest \u003d p.toModelType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            if (concierge.hasGuest(guest)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_GUEST);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            concierge.addGuest(guest);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        HashMap\u003cString, ExpenseType\u003e newMenu \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        for (Map.Entry\u003cString, XmlAdaptedExpenseType\u003e mapping : menu.entrySet()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            newMenu.put(mapping.getKey(), mapping.getValue().toModelType());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        concierge.setMenu(newMenu);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        for (XmlAdaptedRoom r : rooms) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            Room room \u003d r.toModelType(concierge.getMenu());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            if (concierge.hasRoom(room)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ROOM);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            concierge.addRoom(room);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return concierge;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        if (!(other instanceof XmlSerializableConcierge)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return guests.equals(((XmlSerializableConcierge) other).guests);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 35,
      "JIaqingTan": 17,
      "adamwth": 1,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.GuestPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadGuestPage(Guest guest) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + guest.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleGuestPanelSelectionChangedEvent(GuestPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        loadGuestPage(event.getNewSelection());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GuestCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * An UI component that displays information of a {@code Guest}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class GuestCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String FXML \u003d \"GuestListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Concierge level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public final Guest guest;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public GuestCard(Guest guest, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.guest \u003d guest;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        name.setText(guest.getName().fullName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        phone.setText(guest.getPhone().value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guest.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (!(other instanceof GuestCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        GuestCard card \u003d (GuestCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 guest.equals(card.guest);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "JIaqingTan": 7,
      "adamwth": 6,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GuestDetailedCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " * An UI component that displays information of a {@code Guest}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class GuestDetailedCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String FXML \u003d \"GuestDetailedCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Concierge level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public final Guest guest;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private Label header;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public GuestDetailedCard(Guest guest) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        this.guest \u003d guest;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        header.setText(\"Guest Details:\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        name.setText(guest.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        phone.setText(guest.getPhone().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        email.setText(guest.getEmail().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guest.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (!(other instanceof GuestDetailedCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        GuestDetailedCard card \u003d (GuestDetailedCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return guest.equals(card.guest);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "JIaqingTan": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GuestDetailedPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.events.ui.GuestPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " * Panel containing the list of one guest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class GuestDetailedPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String FXML \u003d \"GuestDetailedPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(GuestDetailedPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private ListView\u003cGuest\u003e guestDetailedView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public GuestDetailedPanel() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Sets the details of a {@code Guest} by adding into the {@code ListView\u003cGuest\u003e} list to be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * displayed via UI."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void setGuestDetails(Guest guest) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        ObservableList\u003cGuest\u003e guestList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestList.add(guest);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestDetailedView.setItems(guestList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestDetailedView.setCellFactory(listView -\u003e new GuestListViewCell());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Guest} using a {@code GuestDetailedCard}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    class GuestListViewCell extends ListCell\u003cGuest\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        protected void updateItem(Guest guest, boolean empty) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            super.updateItem(guest, empty);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            if (empty || guest \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                setGraphic(new GuestDetailedCard(guest).getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Event handler when a guest is selected on the left panel to display detailed information on"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * the right panel."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private void handleGuestPanelSelectionChangedEvent(GuestPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        setGuestDetails(event.getNewSelection());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GuestListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.GuestPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of guests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuestListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"GuestListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(GuestListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cGuest\u003e guestListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuestListPanel(ObservableList\u003cGuest\u003e guestList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        setConnections(guestList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private void setConnections(ObservableList\u003cGuest\u003e guestList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guestListView.setItems(guestList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        guestListView.setCellFactory(listView -\u003e new GuestListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        guestListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                        logger.fine(\"Selection in guest list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise(new GuestPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scrolls to the {@code GuestCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            guestListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            guestListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Guest} using a {@code GuestCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    class GuestListViewCell extends ListCell\u003cGuest\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        protected void updateItem(Guest guest, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            super.updateItem(guest, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            if (empty || guest \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new GuestCard(guest, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 6,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private GuestListPanel guestListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private RoomListPanel roomListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private GuestDetailedPanel guestDetailedPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private RoomDetailedPanel roomDetailedPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private StackPane guestListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private StackPane roomListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private VBox guestListBox;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private VBox roomListBox;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private StackPane guestDetailedPanelPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private StackPane roomDetailedPanelPlaceholder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private VBox guestDetailedBox;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private VBox roomDetailedBox;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Initial state only displays guest list and detailed guest panel."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestListPanel \u003d new GuestListPanel(logic.getFilteredGuestList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestListPanelPlaceholder.getChildren().add(guestListPanel.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomListPanel \u003d new RoomListPanel(logic.getFilteredRoomList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomListPanelPlaceholder.getChildren().add(roomListPanel.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getConciergeFilePath());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestDetailedPanel \u003d new GuestDetailedPanel();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestDetailedPanelPlaceholder.getChildren().add(guestDetailedPanel.getRoot());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomDetailedPanel \u003d new RoomDetailedPanel();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomDetailedPanelPlaceholder.getChildren().add(roomDetailedPanel.getRoot());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        this.showGuestList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        this.showGuestDetailedPanel();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * UI Visibility Function - Enables guest-related list, disables room-related list UI elements"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void showGuestList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomListBox.setDisable(true);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomListBox.setVisible(false);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestListBox.setDisable(false);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestListBox.setVisible(true);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * UI Visibility Functions - Enables room-related list, disables guest-related list UI elements"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void showRoomList() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomListBox.setDisable(false);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomListBox.setVisible(true);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestListBox.setDisable(true);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestListBox.setVisible(false);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * UI Visibility Functions -  Enables guest-related detailed list, disables room-related detailed list UI elements"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void showGuestDetailedPanel() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestDetailedBox.setDisable(false);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestDetailedBox.setVisible(true);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomDetailedBox.setDisable(true);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomDetailedBox.setVisible(false);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * UI Visibility Functions - Enables room-related detailed list, disables guest-related detailed list UI elements"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void showRoomDetailedPanel() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestDetailedBox.setDisable(true);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestDetailedBox.setVisible(false);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomDetailedBox.setDisable(false);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomDetailedBox.setVisible(true);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuestListPanel getGuestListPanel() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return guestListPanel;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public boolean isGuestListVisible() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return guestListBox.isVisible();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public boolean isRoomListVisible() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return roomListBox.isVisible();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "JIaqingTan": 82,
      "-": 196
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RoomCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.booking.Booking;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " * An UI component that displays information of a {@code Room}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class RoomCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String FXML \u003d \"RoomListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Concierge level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public final Room room;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private Label roomNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private Label capacity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane bookings;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private FlowPane occupant;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public RoomCard(Room room) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomNumber.setText(\"Room: \" + room.getRoomNumber().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        capacity.setText(\"Capacity: \" + room.getCapacity().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        bookings.getChildren().add(new Label(\"Active booking\\n\" + room.getFirstBooking()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Booking::toStringShortDescription).orElse(\"\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        room.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (!(other instanceof RoomCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        RoomCard card \u003d (RoomCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return roomNumber.getText().equals(card.roomNumber.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u0026\u0026 room.equals(card.room);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "JIaqingTan": 63,
      "adamwth": 1,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RoomDetailedCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.booking.Booking;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " * An UI component that displays information of a {@code Room}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class RoomDetailedCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String FXML \u003d \"RoomDetailedCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Concierge level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public final Room room;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private Label header;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private Label roomNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private Label capacity;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private Label expenses;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private FlowPane bookings;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private FlowPane occupant;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public RoomDetailedCard(Room room) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        header.setText(\"Room Details:\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomNumber.setText(\"Room: \" + room.getRoomNumber().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        capacity.setText(\"Capacity: \" + room.getCapacity().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        expenses.setText(\"Expenses: \" + room.getExpenses().toStringTotalCost());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        bookings.getChildren().add(new Label(\"Current booking:\\n\" + room.getFirstBooking()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(Booking::toStringShortDescription).orElse(\"\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        room.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (!(other instanceof RoomDetailedCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        RoomDetailedCard card \u003d (RoomDetailedCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return roomNumber.getText().equals(card.roomNumber.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u0026\u0026 room.equals(card.room);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "JIaqingTan": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RoomDetailedPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.events.ui.RoomPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " * Panel containing the list of one room."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class RoomDetailedPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String FXML \u003d \"RoomDetailedPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RoomDetailedPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private ListView\u003cRoom\u003e roomDetailedView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public RoomDetailedPanel() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Sets the details of a {@code Room} by adding into the {@code ListView\u003cRoom\u003e} list to be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * displayed via UI."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private void setRoomDetails(Room room) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        ObservableList\u003cRoom\u003e roomList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomList.add(room);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomDetailedView.setItems(roomList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomDetailedView.setCellFactory(listView -\u003e new RoomListViewCell());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code room} using a {@code RoomDetailedCard}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    class RoomListViewCell extends ListCell\u003cRoom\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        protected void updateItem(Room room, boolean empty) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            super.updateItem(room, empty);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            if (empty || room \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                setGraphic(new RoomDetailedCard(room).getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Event handler when a room is selected on the left panel to display detailed information on"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * the right panel."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private void handleRoomPanelSelectionChangedEvent(RoomPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        setRoomDetails(event.getNewSelection());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RoomListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.events.ui.RoomPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " * Panel containing the list of rooms."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class RoomListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String FXML \u003d \"RoomListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RoomListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private ListView\u003cRoom\u003e roomListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public RoomListPanel(ObservableList\u003cRoom\u003e roomList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        setConnections(roomList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private void setConnections(ObservableList\u003cRoom\u003e roomList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomListView.setItems(roomList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomListView.setCellFactory(listView -\u003e new RoomListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                        logger.fine(\"Selection in room list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                        raise(new RoomPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Scrolls to the {@code RoomCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            roomListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            roomListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code room} using a {@code RoomCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    class RoomListViewCell extends ListCell\u003cRoom\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        protected void updateItem(Room room, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            super.updateItem(room, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            if (empty || room \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                setGraphic(new RoomCard(room).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.commons.events.model.ConciergeChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void handleConciergeChangedEvent(ConciergeChangedEvent abce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 2,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GUEST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.events.ui.ListingChangedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private void handleListingChangeEvent(ListingChangedEvent event) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (event.getFlag() \u003d\u003d PREFIX_GUEST.toString()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            showGuestList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            showGuestDetailedPanel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        } else if (event.getFlag() \u003d\u003d PREFIX_ROOM.toString()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            showRoomList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            showRoomDetailedPanel();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UI Visibility Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private void showGuestList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        mainWindow.showGuestList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private void showRoomList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        mainWindow.showRoomList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private void showGuestDetailedPanel() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        mainWindow.showGuestDetailedPanel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private void showRoomDetailedPanel() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        mainWindow.showRoomDetailedPanel();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 35,
      "-": 119
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ".cell_header {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "   -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "   -fx-font-size: 18px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "   -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "   -fx-underline: true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ".cell_name_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    -fx-padding: -2 0 -2 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    -fx-padding: -2 0 -2 0;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #guestListPanel, #personWebpage {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    -fx-padding: 3 0 3 0;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 4;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "#bookings {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    -fx-padding: 3 0 3 0;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "#bookings .label {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3D997f;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 3 5 3 5;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 4;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 17,
      "-": 365
    }
  },
  {
    "path": "src/main/resources/view/GuestDetailedCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"100\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cVBox alignment\u003d\"TOP_LEFT\" minHeight\u003d\"100\" maxHeight \u003d \"200\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cHBox spacing\u003d\"5\" alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cLabel fx:id\u003d\"header\" text\u003d\"\\$first\" styleClass\u003d\"cell_header\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_name_label\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tags\" alignment\u003d\"TOP_LEFT\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 31
    }
  },
  {
    "path": "src/main/resources/view/GuestDetailedPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "  \u003cListView fx:id\u003d\"guestDetailedView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 9
    }
  },
  {
    "path": "src/main/resources/view/GuestListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"75\" maxHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" alignment\u003d\"TOP_LEFT\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 2,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/LoginWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"720.0\" prefWidth\u003d\"1280.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"view.LoginWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cImageView fitHeight\u003d\"720.0\" fitWidth\u003d\"640.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cImage url\u003d\"@../images/UILoginSidePanel.png\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cImageView fitHeight\u003d\"65.0\" fitWidth\u003d\"240.0\" layoutX\u003d\"839.0\" layoutY\u003d\"106.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" AnchorPane.leftAnchor\u003d\"840.0\" AnchorPane.topAnchor\u003d\"150.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cImage url\u003d\"@../images/ConciergeFinal.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cText fill\u003d\"#a8a8a8\" layoutX\u003d\"824.0\" layoutY\u003d\"233.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Welcome back! Please login to you account.\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cTextField layoutX\u003d\"872.0\" layoutY\u003d\"261.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"240.0\" style\u003d\"-fx-background-color: 0;\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cText accessibleRoleDescription\u003d\"t\" fill\u003d\"#797979\" layoutX\u003d\"808.0\" layoutY\u003d\"281.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Username:\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cLine endX\u003d\"1121.5\" endY\u003d\"290.5\" layoutY\u003d\"1.0\" startX\u003d\"806.0\" startY\u003d\"290.5\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 36
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "          \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"displayRegion\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                     minHeight\u003d\"500\" prefHeight\u003d\"900\" maxHeight\u003d\"900\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cVBox fx:id\u003d\"guestListBox\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "              \u003cStackPane fx:id\u003d\"guestListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cVBox fx:id\u003d\"roomListBox\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "              \u003cStackPane fx:id\u003d\"roomListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "          \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"SelectionRegion\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                     minHeight\u003d\"500\" prefHeight\u003d\"900\" maxHeight\u003d\"900\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cVBox fx:id\u003d\"guestDetailedBox\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "              \u003cStackPane fx:id\u003d\"guestDetailedPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cVBox fx:id\u003d\"roomDetailedBox\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u003cStackPane fx:id\u003d\"roomDetailedPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 24,
      "-": 67
    }
  },
  {
    "path": "src/main/resources/view/MainWindowNew.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"720.0\" prefWidth\u003d\"1280.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cImageView fitHeight\u003d\"720.0\" fitWidth\u003d\"1280.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cImage url\u003d\"@../images/UIBackground.png\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cTextField layoutX\u003d\"22.0\" layoutY\u003d\"14.0\" prefHeight\u003d\"50.0\" prefWidth\u003d\"1220.0\" promptText\u003d\"Type a command..\" style\u003d\"-fx-background-radius: 100 100 100 100;\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cInsets left\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003c/TextField\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cImageView fitHeight\u003d\"17.0\" fitWidth\u003d\"17.0\" layoutX\u003d\"38.0\" layoutY\u003d\"31.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cImage url\u003d\"@../images/SearchIcon.png\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 32
    }
  },
  {
    "path": "src/main/resources/view/RoomDetailedCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"100\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cVBox alignment\u003d\"TOP_LEFT\" minHeight\u003d\"100\" maxHeight \u003d \"200\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cHBox spacing\u003d\"5\" alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            \u003cLabel fx:id\u003d\"header\" text\u003d\"\\$first\" styleClass\u003d\"cell_header\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cLabel fx:id\u003d\"roomNumber\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cLabel fx:id\u003d\"capacity\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$capacity\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cLabel fx:id\u003d\"expenses\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$expenses\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"bookings\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"occupant\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 31
    }
  },
  {
    "path": "src/main/resources/view/RoomDetailedPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "  \u003cListView fx:id\u003d\"roomDetailedView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/RoomListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        \u003cLabel fx:id\u003d\"roomNumber\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003cLabel fx:id\u003d\"capacity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$capacity\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cFlowPane fx:id\u003d\"bookings\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003cFlowPane fx:id\u003d\"occupant\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "         \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 26,
      "-": 1
    }
  },
  {
    "path": "src/main/resources/view/RoomListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "  \u003cListView fx:id\u003d\"roomListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 8
    }
  },
  {
    "path": "src/test/data/XmlConciergeStorageTest/invalidAndValidGuestConcierge.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003cconcierge\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    \u003c!-- Valid Guest --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    \u003c!-- Guest with invalid phone field --\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003c/concierge\u003e"
      }
    ],
    "authorContributionMap": {
      "teowz46": 2,
      "JIaqingTan": 4,
      "adamwth": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlConciergeStorageTest/invalidGuestConcierge.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003cconcierge\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    \u003c!-- Guest with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003c/concierge\u003e"
      }
    ],
    "authorContributionMap": {
      "teowz46": 2,
      "JIaqingTan": 2,
      "adamwth": 1,
      "-": 5
    }
  },
  {
    "path": "src/test/data/XmlSerializableConciergeTest/duplicateGuestConcierge.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003cconcierge\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    \u003c!-- Guest with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003c/concierge\u003e"
      }
    ],
    "authorContributionMap": {
      "teowz46": 2,
      "JIaqingTan": 4,
      "adamwth": 1,
      "-": 13
    }
  },
  {
    "path": "src/test/data/XmlSerializableConciergeTest/invalidGuestConcierge.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003cconcierge\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    \u003c!-- Guest with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003c/concierge\u003e"
      }
    ],
    "authorContributionMap": {
      "teowz46": 2,
      "JIaqingTan": 2,
      "adamwth": 1,
      "-": 5
    }
  },
  {
    "path": "src/test/data/XmlSerializableConciergeTest/typicalGuestsConcierge.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003c!-- Concierge save file which contains the same Guest values as in TypicalGuests#getTypicalConcierge() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003cconcierge\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003c/concierge\u003e"
      }
    ],
    "authorContributionMap": {
      "teowz46": 3,
      "JIaqingTan": 14,
      "-": 33
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidGuestField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": "\u003c!-- Guest with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003cguests\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c/guests\u003e"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 2,
      "adamwth": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingGuestField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": "\u003c!-- Guest with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003cguests\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c/guests\u003e"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 2,
      "adamwth": 1,
      "-": 5
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempConcierge.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003cconcierge\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cid\u003e1\u003c/id\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfirstName\u003eJohn\u003c/firstName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003clastName\u003eDoe\u003c/lastName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cgithubUsername\u003e\u003c/githubUsername\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstreet\u003e\u003c/street\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpostalCode\u003e\u003c/postalCode\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccity\u003e\u003c/city\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003c/concierge\u003e"
      }
    ],
    "authorContributionMap": {
      "teowz46": 2,
      "JIaqingTan": 2,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validConcierge.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003cconcierge\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003cguests\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    \u003c/guests\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teowz46"
        },
        "content": "\u003c/concierge\u003e"
      }
    ],
    "authorContributionMap": {
      "teowz46": 2,
      "JIaqingTan": 18,
      "-": 37
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validGuest.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003cguests\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "\u003c/guests\u003e"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 2,
      "-": 6
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/GuestCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Provides a handle to a guest card in the guest list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuestCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuestCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns true if this handle contains {@code guest}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public boolean equals(Guest guest) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return getName().equals(guest.getName().fullName)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 getPhone().equals(guest.getPhone().value)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(guest.getTags().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 1,
      "adamwth": 6,
      "-": 65
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/GuestDetailedCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " * Provides a handle to a guest card in the guest list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class GuestDetailedCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public GuestDetailedCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Returns true if this handle contains {@code guest}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public boolean equals(Guest guest) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        boolean name \u003d getName().equals(guest.getName().fullName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        boolean phone \u003d getPhone().equals(guest.getPhone().value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        boolean email \u003d getEmail().equals(guest.getEmail().value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return getName().equals(guest.getName().fullName)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u0026\u0026 getPhone().equals(guest.getPhone().value)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u0026\u0026 getEmail().equals(guest.getEmail().value)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(guest.getTags().stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 16,
      "-": 60
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/GuestDetailedPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " * Provides a handle for {@code GuestListPanel} containing the list of {@code GuestCard}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class GuestDetailedPanelHandle extends NodeHandle\u003cListView\u003cGuest\u003e\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public static final String GUEST_LIST_VIEW_ID \u003d \"#guestDetailedView\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public GuestDetailedPanelHandle(ListView\u003cGuest\u003e guestListPanelNode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        super(guestListPanelNode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Navigates the listview to display {@code guest}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void navigateToCard(Guest guest) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (!getRootNode().getItems().contains(guest)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            throw new IllegalArgumentException(\"Guest does not exist.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            getRootNode().scrollTo(guest);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Returns the guest card handle of a guest associated with the {@code index} in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public GuestDetailedCardHandle getGuestDetailedCardHandle(int index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Set\u003cNode\u003e allNodes \u003d getAllCardNodes();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(GuestDetailedCardHandle::new)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .filter(handle -\u003e handle.equals(getGuest(index)))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private Guest getGuest(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 61
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/GuestListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code GuestListPanel} containing the list of {@code GuestCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuestListPanelHandle extends NodeHandle\u003cListView\u003cGuest\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String GUEST_LIST_VIEW_ID \u003d \"#guestListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cGuest\u003e lastRememberedSelectedGuestCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuestListPanelHandle(ListView\u003cGuest\u003e guestListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(guestListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a handle to the selected {@code GuestCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuestCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        List\u003cGuest\u003e selectedGuestList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (selectedGuestList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new AssertionError(\"Guest list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(GuestCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedGuestList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        List\u003cGuest\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Navigates the listview to display {@code guest}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void navigateToCard(Guest guest) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (!getRootNode().getItems().contains(guest)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new IllegalArgumentException(\"Guest does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            getRootNode().scrollTo(guest);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the {@code GuestCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns the guest card handle of a guest associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuestCardHandle getGuestCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(GuestCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(getGuest(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private Guest getGuest(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the selected {@code GuestCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSelectedGuestCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        List\u003cGuest\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedGuestCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedGuestCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the selected {@code GuestCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedGuestCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSelectedGuestCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        List\u003cGuest\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedGuestCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedGuestCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !lastRememberedSelectedGuestCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 13,
      "-": 146
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/HelpWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle to the {@code HelpWindow} of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_WINDOW_TITLE \u003d \"Help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String HELP_WINDOW_BROWSER_ID \u003d \"#browser\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindowHandle(Stage helpWindowStage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(helpWindowStage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a help window is currently present in the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isWindowPresent() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiRobot().isWindowShown(HELP_WINDOW_TITLE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public URL getLoadedUrl() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return WebViewUtil.getLoadedUrl(getChildNode(HELP_WINDOW_BROWSER_ID));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuestListPanelHandle guestListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private final RoomListPanelHandle roomListPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        guestListPanel \u003d new GuestListPanelHandle(getChildNode(GuestListPanelHandle.GUEST_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomListPanel \u003d new RoomListPanelHandle(getChildNode(RoomListPanelHandle.ROOM_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuestListPanelHandle getGuestListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return guestListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public RoomListPanelHandle getRoomListPanel() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return roomListPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RoomCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " * Provides a handle to a room card in the room list panel."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class RoomCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String ROOMNUMBER_FIELD_ID \u003d \"#roomNumber\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String CAPACITY_FIELD_ID \u003d \"#capacity\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String BOOKING_FIELD_ID \u003d \"#bookings\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private final Label roomNumberLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private final Label capacityLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private final List\u003cLabel\u003e firstBookingLabels;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public RoomCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomNumberLabel \u003d getChildNode(ROOMNUMBER_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        capacityLabel \u003d getChildNode(CAPACITY_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Region bookingsContainer \u003d getChildNode(BOOKING_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        firstBookingLabels \u003d bookingsContainer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        firstBookingLabels.remove(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public String getRoomNumber() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return roomNumberLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public String getCapacity() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return capacityLabel.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public List\u003cString\u003e getBookings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return firstBookingLabels"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public List\u003cString\u003e getFirstBooking() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return firstBookingLabels"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Returns true if this handle contains {@code Room}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public boolean equals(Room room) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return getRoomNumber().equals(\"Room: \" + room.getRoomNumber())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u0026\u0026 getCapacity().equals(\"Capacity: \" + room.getCapacity())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(room.getTags().stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 90
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RoomDetailedCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " * Provides a handle to a room card in the room list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class RoomDetailedCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String ROOMNUMBER_FIELD_ID \u003d \"#roomNumber\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String CAPACITY_FIELD_ID \u003d \"#capacity\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String BOOKING_FIELD_ID \u003d \"#bookings\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String EXPENSES_FIELD_ID \u003d \"#expenses\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private final Label roomNumberLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private final Label capacityLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private final Label expensesLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private final List\u003cLabel\u003e firstBookingLabels;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public RoomDetailedCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomNumberLabel \u003d getChildNode(ROOMNUMBER_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        capacityLabel \u003d getChildNode(CAPACITY_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        expensesLabel \u003d getChildNode(EXPENSES_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Region bookingsContainer \u003d getChildNode(BOOKING_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        firstBookingLabels \u003d bookingsContainer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        firstBookingLabels.remove(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public String getRoomNumber() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return roomNumberLabel.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public String getCapacity() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return capacityLabel.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public String getExpenses() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return expensesLabel.getText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public List\u003cString\u003e getBookings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return firstBookingLabels"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public List\u003cString\u003e getFirstBooking() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return firstBookingLabels"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Returns true if this handle contains {@code Room}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public boolean equals(Room room) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return getRoomNumber().equals(\"Room: \" + room.getRoomNumber())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u0026\u0026 getCapacity().equals(\"Capacity: \" + room.getCapacity())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u0026\u0026 getExpenses().equals(\"Expenses: \" + room.getExpenses().getTotalCost())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(room.getTags().stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 97
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RoomDetailedPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " * Provides a handle for {@code RoomListPanel} containing the list of {@code RoomCard}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class RoomDetailedPanelHandle extends NodeHandle\u003cListView\u003cRoom\u003e\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public static final String ROOM_LIST_VIEW_ID \u003d \"#roomDetailedView\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public RoomDetailedPanelHandle(ListView\u003cRoom\u003e roomListPanelNode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        super(roomListPanelNode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Navigates the listview to display {@code room}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void navigateToCard(Room room) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (!getRootNode().getItems().contains(room)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            throw new IllegalArgumentException(\"Room does not exist.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            getRootNode().scrollTo(room);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Returns the room card handle of a room associated with the {@code index} in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public RoomDetailedCardHandle getRoomDetailedCardHandle(int index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Set\u003cNode\u003e allNodes \u003d getAllCardNodes();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(RoomDetailedCardHandle::new)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .filter(handle -\u003e handle.equals(getRoom(index)))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private Room getRoom(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 62
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RoomListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " * Provides a handle for {@code RoomListPanel} containing the list of {@code RoomCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class RoomListPanelHandle extends NodeHandle\u003cListView\u003cRoom\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public static final String ROOM_LIST_VIEW_ID \u003d \"#roomListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private Optional\u003cRoom\u003e lastRememberedSelectedRoomCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public RoomListPanelHandle(ListView\u003cRoom\u003e roomListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        super(roomListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Returns a handle to the selected {@code RoomCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public RoomCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        List\u003cRoom\u003e selectedRoomList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (selectedRoomList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            throw new AssertionError(\"Room list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(RoomCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedRoomList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        List\u003cRoom\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Navigates the listview to display {@code guest}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void navigateToCard(Room room) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        if (!getRootNode().getItems().contains(room)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            throw new IllegalArgumentException(\"Room does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            getRootNode().scrollTo(room);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Selects the {@code RoomCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Returns the room card handle of a room associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public RoomCardHandle getRoomCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .map(RoomCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                .filter(handle -\u003e handle.equals(getRoom(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private Room getRoom(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Remembers the selected {@code RoomCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void rememberSelectedRoomCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        List\u003cRoom\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            lastRememberedSelectedRoomCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            lastRememberedSelectedRoomCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Returns true if the selected {@code GuestCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * {@code rememberSelectedGuestCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public boolean isSelectedRoomCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        List\u003cRoom\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            return lastRememberedSelectedRoomCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            return !lastRememberedSelectedRoomCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                    || !lastRememberedSelectedRoomCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 38,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.ReadOnlyConcierge;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.storage.XmlSerializableConcierge;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    protected Supplier\u003cReadOnlyConcierge\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyConcierge\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            createDataFileWithData(new XmlSerializableConcierge(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        userPrefs.setConciergeFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Returns a defensive copy of Concierge data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Concierge readStorageConcierge() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            return new Concierge(storage.readConcierge().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            throw new AssertionError(\"Data is not in the Concierge format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return storage.getConciergeFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Model copy \u003d new ModelManager((model.getConcierge()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredGuestList(copy, model.getFilteredGuestList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredRoomList(copy, model.getFilteredRoomList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 13,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Concierge\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedGuest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.storage.XmlSerializableConcierge;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.testutil.ConciergeBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.GuestBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validConcierge.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_GUEST_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingGuestField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_GUEST_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidGuestField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_GUEST_FILE \u003d TEST_DATA_FOLDER.resolve(\"validGuest.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempConcierge.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlUtil.getDataFromFile(null, Concierge.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, Concierge.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, Concierge.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Concierge dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableConcierge.class).toModelType();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getGuestList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedGuestFromFile_fileWithMissingGuestField_validResult() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedGuest actualGuest \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_GUEST_FIELD_FILE, XmlAdaptedGuestWithRootElement.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedGuest expectedGuest \u003d new XmlAdaptedGuest("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedGuest, actualGuest);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedGuestFromFile_fileWithInvalidGuestField_validResult() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedGuest actualGuest \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_GUEST_FIELD_FILE, XmlAdaptedGuestWithRootElement.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedGuest expectedGuest \u003d new XmlAdaptedGuest("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedGuest, actualGuest);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedGuestFromFile_fileWithValidGuest_validResult() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedGuest actualGuest \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_GUEST_FILE, XmlAdaptedGuestWithRootElement.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedGuest expectedGuest \u003d new XmlAdaptedGuest("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedGuest, actualGuest);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlUtil.saveDataToFile(null, new Concierge());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new Concierge());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlSerializableConcierge dataToWrite \u003d new XmlSerializableConcierge(new Concierge());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlSerializableConcierge dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableConcierge.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        ConciergeBuilder builder \u003d new ConciergeBuilder(new Concierge());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        dataToWrite \u003d new XmlSerializableConcierge("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withGuest(new GuestBuilder().build()).build());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableConcierge.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedGuest}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @XmlRootElement(name \u003d \"guests\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedGuestWithRootElement extends XmlAdaptedGuest {}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 16,
      "JIaqingTan": 1,
      "adamwth": 1,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void execute_invalidCommand_noFlag() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertParseException(listCommand, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void execute_validCommand_roomListSuccess() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD + \" -r\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void execute_validCommand_guestListSuccess() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD + \" -g\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredGuestList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredGuestList().remove(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     *      - {@code expectedModel}\u0027s Concierge was saved to the storage file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 2,
      "JIaqingTan": 8,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static seedu.address.testutil.TypicalConcierge.getTypicalConcierge;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.booking.BookingPeriod;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.GuestBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalBookingPeriods;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalRoomNumbers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        model \u003d new ModelManager(getTypicalConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newGuest_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest validGuest \u003d new GuestBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        RoomNumber validRoomNumber \u003d TypicalRoomNumbers.ROOM_NUMBER_002;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        BookingPeriod validBookingPeriod \u003d TypicalBookingPeriods.TODAY_TOMORROW;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addGuest(validGuest);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.commitConcierge();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validGuest, validRoomNumber, validBookingPeriod),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validGuest,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        validRoomNumber, validBookingPeriod),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateGuest_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Guest guestInList \u003d model.getConcierge().getGuestList().get(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        RoomNumber validRoomNumber \u003d TypicalRoomNumbers.ROOM_NUMBER_002;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        BookingPeriod validBookingPeriod \u003d TypicalBookingPeriods.TODAY_TOMORROW;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(guestInList, validRoomNumber, validBookingPeriod),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                model, commandHistory, AddCommand.MESSAGE_DUPLICATE_GUEST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 5,
      "adamwth": 2,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.ReadOnlyConcierge;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Booking;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.booking.BookingPeriod;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.GuestBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalBookingPeriods;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalRoomNumbers;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullGuest_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        RoomNumber validRoomNumber \u003d TypicalRoomNumbers.ROOM_NUMBER_002;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        BookingPeriod validBookingPeriod \u003d TypicalBookingPeriods.TODAY_TOMORROW;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null, validRoomNumber, validBookingPeriod);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_guestAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingGuestAdded modelStub \u003d new ModelStubAcceptingGuestAdded();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest validGuest \u003d new GuestBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        RoomNumber validRoomNumber \u003d TypicalRoomNumbers.ROOM_NUMBER_002;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        BookingPeriod validBookingPeriod \u003d TypicalBookingPeriods.TODAY_TOMORROW;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(validGuest, validRoomNumber, validBookingPeriod)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                        .execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validGuest,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                validRoomNumber, validBookingPeriod), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validGuest), modelStub.guestsAdded);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateGuest_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest validGuest \u003d new GuestBuilder().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        RoomNumber validRoomNumber \u003d TypicalRoomNumbers.ROOM_NUMBER_002;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        BookingPeriod validBookingPeriod \u003d TypicalBookingPeriods.TODAY_TOMORROW;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validGuest, validRoomNumber, validBookingPeriod);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithGuest(validGuest);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_GUEST);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest alice \u003d new GuestBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest bob \u003d new GuestBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        RoomNumber validRoomNumber \u003d TypicalRoomNumbers.ROOM_NUMBER_002;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        BookingPeriod validBookingPeriod \u003d TypicalBookingPeriods.TODAY_TOMORROW;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice, validRoomNumber, validBookingPeriod);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob, validRoomNumber, validBookingPeriod);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice, validRoomNumber, validBookingPeriod);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // different guest -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addGuest(Guest guest) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        public void resetData(ReadOnlyConcierge newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        public ReadOnlyConcierge getConcierge() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasGuest(Guest guest) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deleteGuest(Guest target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateGuest(Guest target, Guest editedGuest) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cGuest\u003e getFilteredGuestList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredGuestList(Predicate\u003cGuest\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        public boolean canUndoConcierge() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        public boolean canRedoConcierge() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        public void undoConcierge() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        public void redoConcierge() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        public void commitConcierge() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        public void checkInRoom(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        public void checkoutRoom(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        public boolean isRoomCheckedIn(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        public boolean roomHasBooking(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        public boolean roomHasActiveBooking(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        public boolean roomHasActiveOrExpiredBooking(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        public void addBooking(RoomNumber roomNumber, Booking booking) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * A Model stub that contains a single guest."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithGuest extends ModelStub {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        private final Guest guest;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithGuest(Guest guest) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            requireNonNull(guest);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            this.guest \u003d guest;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasGuest(Guest guest) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            requireNonNull(guest);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return this.guest.isSameGuest(guest);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the guest and assigns a room to him."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingGuestAdded extends ModelStub {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cGuest\u003e guestsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasGuest(Guest guest) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            requireNonNull(guest);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            return guestsAdded.stream().anyMatch(guest::isSameGuest);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addGuest(Guest guest) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            requireNonNull(guest);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            guestsAdded.add(guest);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addBooking(RoomNumber roomNumber, Booking booking) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        public void commitConcierge() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        public ReadOnlyConcierge getConcierge() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            return new Concierge();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 12,
      "JIaqingTan": 1,
      "adamwth": 33,
      "-": 229
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CheckoutCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static seedu.address.testutil.TypicalConcierge.getTypicalConcierge;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.TypicalBookings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.TypicalRoomNumbers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * {@code CheckoutCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class CheckoutCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        model.addBooking(TypicalRoomNumbers.ROOM_NUMBER_001, TypicalBookings.LASTWEEK_YESTERDAY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        model.addBooking(TypicalRoomNumbers.ROOM_NUMBER_002, TypicalBookings.YESTERDAY_TODAY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        model.checkInRoom(TypicalRoomNumbers.ROOM_NUMBER_002);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        model.addBooking(TypicalRoomNumbers.ROOM_NUMBER_010, TypicalBookings.TODAY_TOMORROW);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        model.checkInRoom(TypicalRoomNumbers.ROOM_NUMBER_010);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        model.addBooking(TypicalRoomNumbers.ROOM_NUMBER_011, TypicalBookings.TOMORROW_NEXTWEEK);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        model.addBooking(TypicalRoomNumbers.ROOM_NUMBER_012, TypicalBookings.TODAY_TOMORROW);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void execute_invalidCheckoutExpiredBookingLastweekYesterday_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        RoomNumber roomNumberToCheckout \u003d TypicalRoomNumbers.ROOM_NUMBER_001;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        CheckoutCommand checkoutCommand \u003d new CheckoutCommand(roomNumberToCheckout);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        String expectedMessage \u003d String.format(CheckoutCommand.MESSAGE_CHECKOUT_ROOM_SUCCESS, roomNumberToCheckout);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        expectedModel.checkoutRoom(roomNumberToCheckout);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.commitConcierge();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertCommandSuccess(checkoutCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void execute_validCheckoutActiveBookingYesterdayToday_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        RoomNumber roomNumberToCheckout \u003d TypicalRoomNumbers.ROOM_NUMBER_002;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        CheckoutCommand checkoutCommand \u003d new CheckoutCommand(roomNumberToCheckout);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        String expectedMessage \u003d String.format(CheckoutCommand.MESSAGE_CHECKOUT_ROOM_SUCCESS, roomNumberToCheckout);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        expectedModel.checkoutRoom(roomNumberToCheckout);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.commitConcierge();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertCommandSuccess(checkoutCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void execute_validCheckoutActiveBookingTodayTomorrow_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        RoomNumber roomNumberToCheckout \u003d TypicalRoomNumbers.ROOM_NUMBER_010;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        CheckoutCommand checkoutCommand \u003d new CheckoutCommand(roomNumberToCheckout);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        String expectedMessage \u003d String.format(CheckoutCommand.MESSAGE_CHECKOUT_ROOM_SUCCESS, roomNumberToCheckout);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        expectedModel.checkoutRoom(roomNumberToCheckout);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.commitConcierge();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertCommandSuccess(checkoutCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void execute_invalidCheckoutUpcomingBooking_throwsCommandException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        RoomNumber roomNumberToCheckout \u003d TypicalRoomNumbers.ROOM_NUMBER_011;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        CheckoutCommand checkoutCommand \u003d new CheckoutCommand(roomNumberToCheckout);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        String expectedMessage \u003d String.format(CheckoutCommand.MESSAGE_NO_ACTIVE_OR_EXPIRED_ROOM_BOOKING_CHECKOUT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            roomNumberToCheckout);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertCommandFailure(checkoutCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void execute_invalidCheckoutNoBooking_throwsCommandException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        RoomNumber roomNumberToCheckout \u003d TypicalRoomNumbers.ROOM_NUMBER_020;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        CheckoutCommand checkoutCommand \u003d new CheckoutCommand(roomNumberToCheckout);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        String expectedMessage \u003d String.format(CheckoutCommand.MESSAGE_NO_ROOM_BOOKING, roomNumberToCheckout);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertCommandFailure(checkoutCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        // to be completed after Concierge is refactored"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        // to be completed after Concierge is refactored"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        CheckoutCommand checkoutFirstCommand \u003d new CheckoutCommand(TypicalRoomNumbers.ROOM_NUMBER_001);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        CheckoutCommand checkoutSecondCommand \u003d new CheckoutCommand(TypicalRoomNumbers.ROOM_NUMBER_002);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(checkoutFirstCommand.equals(checkoutFirstCommand));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        CheckoutCommand deleteFirstCommandCopy \u003d new CheckoutCommand(TypicalRoomNumbers.ROOM_NUMBER_001);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(checkoutFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(checkoutFirstCommand.equals(1));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(checkoutFirstCommand.equals(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // different room number -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(checkoutFirstCommand.equals(checkoutSecondCommand));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 10,
      "adamwth": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static seedu.address.testutil.TypicalConcierge.getTypicalConcierge;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void execute_emptyConcierge_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.commitConcierge();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void execute_nonEmptyConcierge_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.resetData(new Concierge());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.commitConcierge();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 9,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_END;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_START;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GUEST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditGuestDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalRoomNumbers;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String VALID_TAG_HANDICAP \u003d \"handicap\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ROOM_NUMBER_AMY \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            TypicalRoomNumbers.ROOM_NUMBER_010.value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ROOM_NUMBER_BOB \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            TypicalRoomNumbers.ROOM_NUMBER_002.value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ROOM_NUMBER_001 \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            TypicalRoomNumbers.ROOM_NUMBER_001.value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ROOM_NUMBER_020 \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            TypicalRoomNumbers.ROOM_NUMBER_020.value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Integer VALID_CAPACITY_SINGLE \u003d 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Integer VALID_CAPACITY_DOUBLE \u003d 2;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Integer VALID_CAPACITY_SUITE \u003d 5;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_DATE_START_AMY \u003d \"14/11/2018\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_DATE_END_AMY \u003d \"17/11/2018\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_DATE_START_BOB \u003d \"03/11/2018\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_DATE_END_BOB \u003d \"05/11/2018\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ROOM_DESC_001 \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            \" \" + PREFIX_ROOM + \" \" + VALID_ROOM_NUMBER_001;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ROOM_DESC_020 \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            \" \" + PREFIX_ROOM + \" \" + VALID_ROOM_NUMBER_020;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ROOM_DESC_AMY \u003d \" \" + PREFIX_ROOM + \" \" + VALID_ROOM_NUMBER_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ROOM_DESC_BOB \u003d \" \" + PREFIX_ROOM + \" \" + VALID_ROOM_NUMBER_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DATE_START_DESC_AMY \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            \" \" + PREFIX_DATE_START + \" \" + VALID_DATE_START_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DATE_END_DESC_AMY \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            \" \" + PREFIX_DATE_END + \" \" + VALID_DATE_END_AMY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DATE_START_DESC_BOB \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            \" \" + PREFIX_DATE_START + \" \" + VALID_DATE_START_BOB;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DATE_END_DESC_BOB \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            \" \" + PREFIX_DATE_END + \" \" + VALID_DATE_END_BOB;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ROOM_DESC \u003d \" \" + PREFIX_ROOM + \"101\"; // rooms only valid from 001 to 100."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_INDEX_DESC \u003d \" \" + PREFIX_INDEX + \"-1\"; // index has to be a counting number"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_DATE_START_DESC \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            \" \" + PREFIX_DATE_START + \"138213\"; // date has to be in dd/MM/yyyy format"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_DATE_END_DESC \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            \" \" + PREFIX_DATE_END + \"33/33/3333\"; // invalid month format"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditGuestDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditGuestDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public static final String VALID_FLAG_ROOM \u003d PREFIX_ROOM.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public static final String VALID_FLAG_GUEST \u003d PREFIX_GUEST.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditGuestDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditGuestDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail. Failure reason: \" + ce.getMessage(), ce);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * - Concierge and the filtered guest list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Concierge expectedConcierge \u003d new Concierge(actualModel.getConcierge());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cGuest\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredGuestList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            assertEquals(expectedConcierge, actualModel.getConcierge());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredGuestList());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the guest at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code model}\u0027s Concierge."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showGuestAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredGuestList().size());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest guest \u003d model.getFilteredGuestList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        final String[] splitName \u003d guest.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredGuestList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredGuestList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Deletes the first guest in {@code model}\u0027s filtered list from {@code model}\u0027s Concierge."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstGuest(Model model) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest firstGuest \u003d model.getFilteredGuestList().get(0);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deleteGuest(firstGuest);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        model.commitConcierge();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 7,
      "JIaqingTan": 3,
      "adamwth": 7,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showGuestAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static seedu.address.testutil.TypicalConcierge.getTypicalConcierge;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GUEST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_GUEST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditGuestDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditGuestDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.GuestBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest editedGuest \u003d new GuestBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditGuestDescriptor descriptor \u003d new EditGuestDescriptorBuilder(editedGuest).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_GUEST, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_GUEST_SUCCESS, editedGuest);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Concierge(model.getConcierge()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateGuest(model.getFilteredGuestList().get(0), editedGuest);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.commitConcierge();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastGuest \u003d Index.fromOneBased(model.getFilteredGuestList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest lastGuest \u003d model.getFilteredGuestList().get(indexLastGuest.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuestBuilder guestInList \u003d new GuestBuilder(lastGuest);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest editedGuest \u003d guestInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditGuestDescriptor descriptor \u003d new EditGuestDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastGuest, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_GUEST_SUCCESS, editedGuest);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Concierge(model.getConcierge()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateGuest(lastGuest, editedGuest);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.commitConcierge();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_GUEST, new EditGuestDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest editedGuest \u003d model.getFilteredGuestList().get(INDEX_FIRST_GUEST.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_GUEST_SUCCESS, editedGuest);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Concierge(model.getConcierge()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.commitConcierge();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showGuestAtIndex(model, INDEX_FIRST_GUEST);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest guestInFilteredList \u003d model.getFilteredGuestList().get(INDEX_FIRST_GUEST.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest editedGuest \u003d new GuestBuilder(guestInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_GUEST,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditGuestDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_GUEST_SUCCESS, editedGuest);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Concierge(model.getConcierge()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateGuest(model.getFilteredGuestList().get(0), editedGuest);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.commitConcierge();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateGuestUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest firstGuest \u003d model.getFilteredGuestList().get(INDEX_FIRST_GUEST.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditGuestDescriptor descriptor \u003d new EditGuestDescriptorBuilder(firstGuest).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_GUEST, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_GUEST);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateGuestFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        showGuestAtIndex(model, INDEX_FIRST_GUEST);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        // edit guest in filtered list into a duplicate in Concierge"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Guest guestInList \u003d model.getConcierge().getGuestList().get(INDEX_SECOND_GUEST.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_GUEST,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditGuestDescriptorBuilder(guestInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_GUEST);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidGuestIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGuestList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditGuestDescriptor descriptor \u003d new EditGuestDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_GUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * but smaller than size of Concierge"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidGuestIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        showGuestAtIndex(model, INDEX_FIRST_GUEST);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_GUEST;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of Concierge list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getConcierge().getGuestList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditGuestDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_GUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest editedGuest \u003d new GuestBuilder().build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest guestToEdit \u003d model.getFilteredGuestList().get(INDEX_FIRST_GUEST.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditGuestDescriptor descriptor \u003d new EditGuestDescriptorBuilder(editedGuest).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_GUEST, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Concierge(model.getConcierge()), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateGuest(guestToEdit, editedGuest);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.commitConcierge();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // edit -\u003e first guest edited"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        // undo -\u003e reverts concierge back to previous state and filtered guest list to show all guests"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.undoConcierge();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // redo -\u003e same first guest edited again"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.redoConcierge();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGuestList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditGuestDescriptor descriptor \u003d new EditGuestDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        // execution failed -\u003e Concierge state not added into model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_GUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        // single Concierge state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * 1. Edits a {@code Guest} from a filtered list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited guest in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the guest object regardless of indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameGuestEdited() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest editedGuest \u003d new GuestBuilder().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditGuestDescriptor descriptor \u003d new EditGuestDescriptorBuilder(editedGuest).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_GUEST, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Concierge(model.getConcierge()), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        showGuestAtIndex(model, INDEX_SECOND_GUEST);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest guestToEdit \u003d model.getFilteredGuestList().get(INDEX_FIRST_GUEST.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateGuest(guestToEdit, editedGuest);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.commitConcierge();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // edit -\u003e edits second guest in unfiltered guest list / first guest in filtered guest list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        // undo -\u003e reverts concierge back to previous state and filtered guest list to show all guests"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.undoConcierge();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredGuestList().get(INDEX_FIRST_GUEST.getZeroBased()), guestToEdit);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // redo -\u003e edits same second guest in unfiltered guest list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.redoConcierge();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_GUEST, DESC_AMY);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        EditGuestDescriptor copyDescriptor \u003d new EditGuestDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_GUEST, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_GUEST, DESC_AMY)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_GUEST, DESC_BOB)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 28,
      "adamwth": 12,
      "-": 208
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditGuestDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditGuestDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditGuestDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class EditGuestDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EditGuestDescriptor descriptorWithSameValues \u003d new EditGuestDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        EditGuestDescriptor editedAmy \u003d new EditGuestDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditGuestDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditGuestDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditGuestDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 1,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_GUESTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static seedu.address.testutil.TypicalConcierge.getTypicalConcierge;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // different guest -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noGuestFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_GUESTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredGuestList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredGuestList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multipleGuestsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_GUESTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredGuestList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredGuestList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 3,
      "adamwth": 1,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static seedu.address.testutil.TypicalConcierge.getTypicalConcierge;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        model \u003d new ModelManager(getTypicalConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameRoomList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertCommandSuccess(new ListCommand(\"list -r \".trim().split(\"\\\\s+\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameGuestList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertCommandSuccess(new ListCommand(\"list -g \".trim().split(\"\\\\s+\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 3,
      "JIaqingTan": 6,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstGuest;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static seedu.address.testutil.TypicalConcierge.getTypicalConcierge;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstGuest(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstGuest(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        model.undoConcierge();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        model.undoConcierge();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstGuest(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstGuest(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.undoConcierge();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.undoConcierge();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.redoConcierge();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.redoConcierge();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 9,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showGuestAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static seedu.address.testutil.TypicalConcierge.getTypicalConcierge;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GUEST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_GUEST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_GUEST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastGuestIndex \u003d Index.fromOneBased(model.getFilteredGuestList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_GUEST);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_GUEST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastGuestIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredGuestList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_GUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        showGuestAtIndex(model, INDEX_FIRST_GUEST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showGuestAtIndex(expectedModel, INDEX_FIRST_GUEST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_GUEST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showGuestAtIndex(model, INDEX_FIRST_GUEST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showGuestAtIndex(expectedModel, INDEX_FIRST_GUEST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_GUEST;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of Concierge list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getConcierge().getGuestList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_GUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_GUEST);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_GUEST);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_GUEST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // different guest -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_GUEST_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 5,
      "adamwth": 1,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstGuest;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static seedu.address.testutil.TypicalConcierge.getTypicalConcierge;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalConcierge(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstGuest(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstGuest(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstGuest(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstGuest(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.undoConcierge();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedModel.undoConcierge();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 5,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_END_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_END_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_START_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_START_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_END_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_START_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROOM_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_END_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_END_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_START_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_START_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.booking.BookingPeriod;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.GuestBuilder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest expectedGuest \u003d new GuestBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        RoomNumber expectedRoomNumber \u003d new RoomNumber(VALID_ROOM_NUMBER_BOB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        BookingPeriod expectedBookingPeriod \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                new BookingPeriod(VALID_DATE_START_BOB, VALID_DATE_END_BOB);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_BOB + TAG_DESC_FRIEND + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                        + DATE_START_DESC_BOB + DATE_END_DESC_BOB,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedGuest, expectedRoomNumber, expectedBookingPeriod));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ROOM_DESC_BOB + DATE_START_DESC_BOB + DATE_END_DESC_BOB,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedGuest, expectedRoomNumber, expectedBookingPeriod));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ROOM_DESC_BOB + DATE_START_DESC_BOB + DATE_END_DESC_BOB,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedGuest, expectedRoomNumber, expectedBookingPeriod));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_AMY + EMAIL_DESC_BOB + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ROOM_DESC_BOB + DATE_START_DESC_BOB + DATE_END_DESC_BOB,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedGuest, expectedRoomNumber, expectedBookingPeriod));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_BOB + TAG_DESC_FRIEND + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                        + DATE_START_DESC_BOB + DATE_END_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedGuest, expectedRoomNumber, expectedBookingPeriod));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest expectedGuestMultipleTags \u003d new GuestBuilder(BOB)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ROOM_DESC_BOB + DATE_START_DESC_BOB + DATE_END_DESC_BOB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedGuestMultipleTags, expectedRoomNumber,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                        expectedBookingPeriod));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple rooms - last room accepted"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_BOB + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ROOM_DESC_AMY + DATE_START_DESC_BOB + DATE_END_DESC_BOB,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedGuest, expectedRoomNumber, expectedBookingPeriod));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest expectedGuest \u003d new GuestBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        RoomNumber expectedRoomNumber \u003d new RoomNumber(VALID_ROOM_NUMBER_AMY);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        BookingPeriod expectedBookingPeriod \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                new BookingPeriod(VALID_DATE_START_AMY, VALID_DATE_END_AMY);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_AMY + ROOM_DESC_AMY"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                        + DATE_START_DESC_AMY + DATE_END_DESC_AMY,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedGuest, expectedRoomNumber, expectedBookingPeriod));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                        + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                        + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ROOM_DESC_BOB + DATE_START_DESC_BOB + DATE_END_DESC_BOB,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                 Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ROOM_DESC_BOB + DATE_START_DESC_BOB + DATE_END_DESC_BOB,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                 Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                        + INVALID_EMAIL_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ROOM_DESC_BOB + DATE_START_DESC_BOB + DATE_END_DESC_BOB,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ROOM_DESC_BOB + DATE_START_DESC_BOB + DATE_END_DESC_BOB,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid room number"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_BOB + TAG_DESC_HUSBAND + INVALID_ROOM_DESC"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                        + DATE_START_DESC_BOB + DATE_END_DESC_BOB,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                RoomNumber.MESSAGE_ROOM_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid start date"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ROOM_DESC_BOB + INVALID_DATE_START_DESC + DATE_END_DESC_BOB,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                BookingPeriod.MESSAGE_BOOKING_PERIOD_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid end date"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ROOM_DESC_BOB + DATE_START_DESC_BOB + INVALID_DATE_END_DESC,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                BookingPeriod.MESSAGE_BOOKING_PERIOD_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                        + DATE_START_DESC_BOB + DATE_END_DESC_BOB,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 3,
      "-": 207
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CheckoutCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.logic.commands.CheckoutCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.TypicalRoomNumbers;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * outside of the CheckoutCommand code. For example, inputs \"1\", \"01\" , and \"0001\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the CheckoutCommand, and therefore we test only one of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * them. The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class CheckoutCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private CheckoutCommandParser parser \u003d new CheckoutCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsCheckoutCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertParseSuccess(parser, \"001\", new CheckoutCommand(TypicalRoomNumbers.ROOM_NUMBER_001));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckoutCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 29,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ConciergeParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalBookingPeriods.TODAY_NEXTWEEK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GUEST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRoomNumbers.ROOM_NUMBER_002;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditGuestDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.booking.BookingPeriod;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditGuestDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.GuestBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.GuestUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class ConciergeParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final ConciergeParser parser \u003d new ConciergeParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest guest \u003d new GuestBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        RoomNumber roomNumber \u003d ROOM_NUMBER_002;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        BookingPeriod bookingPeriod \u003d TODAY_NEXTWEEK;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                GuestUtil.getAddCommand(guest, roomNumber, bookingPeriod));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(guest, roomNumber, bookingPeriod),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest guest \u003d new GuestBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditGuestDescriptor descriptor \u003d new EditGuestDescriptorBuilder(guest).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_GUEST.getOneBased() + \" \" + GuestUtil.getEditGuestDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_GUEST, descriptor), command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" -r\") instanceof ListCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" -g\") instanceof ListCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_GUEST.getOneBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_GUEST), command);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 2,
      "JIaqingTan": 2,
      "adamwth": 3,
      "-": 137
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GUEST;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_GUEST;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_GUEST;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditGuestDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditGuestDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Guest} being edited,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_GUEST;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        EditGuestDescriptor descriptor \u003d new EditGuestDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_GUEST;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditGuestDescriptor descriptor \u003d new EditGuestDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_GUEST;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditGuestDescriptor descriptor \u003d new EditGuestDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditGuestDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditGuestDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditGuestDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_GUEST;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditGuestDescriptor descriptor \u003d new EditGuestDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_GUEST;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        EditGuestDescriptor descriptor \u003d new EditGuestDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditGuestDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_GUEST;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        EditGuestDescriptor descriptor \u003d new EditGuestDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 1,
      "-": 198
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FLAG_GUEST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FLAG_ROOM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void parse_noFlag_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void parse_doubleFlag_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertParseFailure(parser, VALID_FLAG_ROOM + \" \" + VALID_FLAG_GUEST,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertParseFailure(parser, VALID_FLAG_GUEST + \" \" + VALID_FLAG_ROOM,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void parse_wrongFlag_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertParseFailure(parser, \"-a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void parse_validArgs_returnsListCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        ListCommand expectedRoomListCommand \u003d new ListCommand(new String[]{VALID_FLAG_ROOM});"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        ListCommand expectedGuestListCommand \u003d new ListCommand(new String[]{VALID_FLAG_GUEST});"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertParseSuccess(parser, \"-r\", expectedRoomListCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // Newline after list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertParseSuccess(parser, \" \\n -r\", expectedRoomListCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertParseSuccess(parser, \"-g\", expectedGuestListCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // Newline after list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertParseSuccess(parser, \" \\n -g\", expectedGuestListCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ConciergeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static seedu.address.testutil.TypicalConcierge.getTypicalConcierge;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.expenses.ExpenseType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.exceptions.DuplicateGuestException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.GuestBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class ConciergeTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final Concierge concierge \u003d new Concierge();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertEquals(Collections.emptyList(), concierge.getGuestList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        concierge.resetData(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void resetData_withValidReadOnlyConcierge_replacesData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Concierge newData \u003d getTypicalConcierge();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        concierge.resetData(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertEquals(newData, concierge);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicateGuests_throwsDuplicateGuestException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // Two guests with the same identity fields"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest editedAlice \u003d new GuestBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        List\u003cGuest\u003e newGuests \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        ConciergeStub newData \u003d new ConciergeStub(newGuests, null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        thrown.expect(DuplicateGuestException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        concierge.resetData(newData);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasGuest_nullGuest_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        concierge.hasGuest(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void hasGuest_guestNotInConcierge_returnsFalse() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertFalse(concierge.hasGuest(ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void hasGuest_guestInConcierge_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        concierge.addGuest(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertTrue(concierge.hasGuest(ALICE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void hasGuest_guestWithSameIdentityFieldsInConcierge_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        concierge.addGuest(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest editedAlice \u003d new GuestBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertTrue(concierge.hasGuest(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getGuestList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        concierge.getGuestList().remove(0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void getMenuMap_modifyMap_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        concierge.getMenuMap().put(\"1\", new ExpenseType(\"1\", \"-\", 0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * A stub ReadOnlyConcierge whose guests list can violate interface constraints."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private static class ConciergeStub implements ReadOnlyConcierge {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        private final ObservableList\u003cGuest\u003e guests \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        private final ObservableList\u003cRoom\u003e rooms \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        ConciergeStub(Collection\u003cGuest\u003e guests, Collection\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            this.guests.setAll(guests);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cGuest\u003e getGuestList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return guests;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            return rooms;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        public Menu getMenu() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            return new Menu();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        public Map\u003cString, ExpenseType\u003e getMenuMap() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            return new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 43,
      "JIaqingTan": 7,
      "adamwth": 8,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/MenuTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teowz46"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.expenses.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class MenuTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private static final Menu validMenu \u003d new Menu();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Menu(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void setMenu_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e validMenu.setMenu(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void isValidMenuNumber_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e validMenu.isValidMenuNumber(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void isValidMenuNumber_invalidString_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertFalse(validMenu.isValidMenuNumber(\"-\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void getExpenseType_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e validMenu.getExpenseType(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void getExpenseType_invalidString_throwsItemNotFoundException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(ItemNotFoundException.class, () -\u003e validMenu.getExpenseType(\"-\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teowz46"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GUESTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.testutil.ConciergeBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasGuest_nullGuest_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasGuest(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void hasGuest_guestNotInConcierge_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasGuest(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void hasGuest_guestInConcierge_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addGuest(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasGuest(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredGuestList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredGuestList().remove(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Concierge concierge \u003d new ConciergeBuilder().withGuest(ALICE).withGuest(BENSON).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Concierge differentConcierge \u003d new Concierge();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        modelManager \u003d new ModelManager(concierge, userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(concierge, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        // different concierge -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentConcierge, userPrefs)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredGuestList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(concierge, userPrefs)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredGuestList(PREDICATE_SHOW_ALL_GUESTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        differentUserPrefs.setConciergeFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(concierge, differentUserPrefs)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 12,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedConciergeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.testutil.ConciergeBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class VersionedConciergeTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final ReadOnlyConcierge conciergeWithAmy \u003d new ConciergeBuilder().withGuest(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final ReadOnlyConcierge conciergeWithBob \u003d new ConciergeBuilder().withGuest(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final ReadOnlyConcierge conciergeWithCarl \u003d new ConciergeBuilder().withGuest(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final ReadOnlyConcierge emptyConcierge \u003d new ConciergeBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void commit_singleConcierge_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList(emptyConcierge);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertConciergeListStatus(versionedConcierge,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                Collections.singletonList(emptyConcierge),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                emptyConcierge,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void commit_multipleConciergePointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                emptyConcierge, conciergeWithAmy, conciergeWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertConciergeListStatus(versionedConcierge,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                Arrays.asList(emptyConcierge, conciergeWithAmy, conciergeWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                conciergeWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void commit_multipleConciergePointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                emptyConcierge, conciergeWithAmy, conciergeWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedConcierge, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertConciergeListStatus(versionedConcierge,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                Collections.singletonList(emptyConcierge),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                emptyConcierge,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void canUndo_multipleConciergePointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                emptyConcierge, conciergeWithAmy, conciergeWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertTrue(versionedConcierge.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void canUndo_multipleConciergePointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                emptyConcierge, conciergeWithAmy, conciergeWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedConcierge, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertTrue(versionedConcierge.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void canUndo_singleConcierge_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList(emptyConcierge);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertFalse(versionedConcierge.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void canUndo_multipleConciergePointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                emptyConcierge, conciergeWithAmy, conciergeWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedConcierge, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertFalse(versionedConcierge.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void canRedo_multipleConciergePointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                emptyConcierge, conciergeWithAmy, conciergeWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedConcierge, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertTrue(versionedConcierge.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void canRedo_multipleConciergePointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                emptyConcierge, conciergeWithAmy, conciergeWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedConcierge, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertTrue(versionedConcierge.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void canRedo_singleConcierge_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList(emptyConcierge);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertFalse(versionedConcierge.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void canRedo_multipleConciergePointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                emptyConcierge, conciergeWithAmy, conciergeWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertFalse(versionedConcierge.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void undo_multipleConciergePointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                emptyConcierge, conciergeWithAmy, conciergeWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertConciergeListStatus(versionedConcierge,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                Collections.singletonList(emptyConcierge),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                conciergeWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                Collections.singletonList(conciergeWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void undo_multipleConciergePointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                emptyConcierge, conciergeWithAmy, conciergeWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedConcierge, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertConciergeListStatus(versionedConcierge,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                emptyConcierge,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                Arrays.asList(conciergeWithAmy, conciergeWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void undo_singleConcierge_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList(emptyConcierge);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertThrows(VersionedConcierge.NoUndoableStateException.class, versionedConcierge::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void undo_multipleConciergePointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                emptyConcierge, conciergeWithAmy, conciergeWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedConcierge, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertThrows(VersionedConcierge.NoUndoableStateException.class, versionedConcierge::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void redo_multipleConciergePointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                emptyConcierge, conciergeWithAmy, conciergeWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedConcierge, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertConciergeListStatus(versionedConcierge,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                Arrays.asList(emptyConcierge, conciergeWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                conciergeWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void redo_multipleConciergePointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                emptyConcierge, conciergeWithAmy, conciergeWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedConcierge, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        versionedConcierge.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertConciergeListStatus(versionedConcierge,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                Collections.singletonList(emptyConcierge),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                conciergeWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                Collections.singletonList(conciergeWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void redo_singleConcierge_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList(emptyConcierge);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertThrows(VersionedConcierge.NoRedoableStateException.class, versionedConcierge::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void redo_multipleConciergePointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                emptyConcierge, conciergeWithAmy, conciergeWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertThrows(VersionedConcierge.NoRedoableStateException.class, versionedConcierge::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d prepareConciergeList(conciergeWithAmy, conciergeWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge copy \u003d prepareConciergeList(conciergeWithAmy, conciergeWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertTrue(versionedConcierge.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertTrue(versionedConcierge.equals(versionedConcierge));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertFalse(versionedConcierge.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertFalse(versionedConcierge.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge differentConciergeList \u003d prepareConciergeList(conciergeWithBob, conciergeWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertFalse(versionedConcierge.equals(differentConciergeList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge differentCurrentStatePointer \u003d prepareConciergeList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                conciergeWithAmy, conciergeWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedConcierge, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertFalse(versionedConcierge.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Asserts that {@code versionedConcierge} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * states before {@code versionedConcierge#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * and states after {@code versionedConcierge#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private void assertConciergeListStatus(VersionedConcierge versionedConcierge,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                                             List\u003cReadOnlyConcierge\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                                             ReadOnlyConcierge expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                                             List\u003cReadOnlyConcierge\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertEquals(new Concierge(versionedConcierge), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        while (versionedConcierge.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            versionedConcierge.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        for (ReadOnlyConcierge expectedConcierge : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            assertEquals(expectedConcierge, new Concierge(versionedConcierge));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            versionedConcierge.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        for (ReadOnlyConcierge expectedConcierge : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            versionedConcierge.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            assertEquals(expectedConcierge, new Concierge(versionedConcierge));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertFalse(versionedConcierge.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedConcierge.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Creates and returns a {@code VersionedConcierge} with the {@code conciergeStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code VersionedConcierge#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private VersionedConcierge prepareConciergeList(ReadOnlyConcierge... conciergeStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertFalse(conciergeStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VersionedConcierge versionedConcierge \u003d new VersionedConcierge(conciergeStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        for (int i \u003d 1; i \u003c conciergeStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            versionedConcierge.resetData(conciergeStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            versionedConcierge.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return versionedConcierge;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Shifts the {@code versionedConcierge#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedConcierge versionedConcierge, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            versionedConcierge.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 154,
      "-": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expenses/ExpenseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teowz46"
        },
        "content": "package seedu.address.model.expenses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Expense(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Expense(null, 0));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Expense(null, 0, LocalDateTime.now()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                new Expense(new ExpenseType(\"1\", \"-\", 0), 0, null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 20,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expenses/ExpenseTypeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teowz46"
        },
        "content": "package seedu.address.model.expenses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class ExpenseTypeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private final ExpenseType validExpenseType \u003d new ExpenseType(\"1\", \"-\", 0);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ExpenseType(null, \"-\", 0));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ExpenseType(\"1\", null, 0));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void constructor_emptyString_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                ExpenseType.MESSAGE_NUMBER_EMPTY, () -\u003e new ExpenseType(\"\", \"-\", 0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                ExpenseType.MESSAGE_NAME_EMPTY, () -\u003e new ExpenseType(\"1\", \"\", 0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void getItemNumber() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assert validExpenseType.getItemNumber().equals(\"1\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void getItemName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assert validExpenseType.getItemName().equals(\"-\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void getItemCost() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assert validExpenseType.getItemCost() \u003d\u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teowz46"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expenses/ExpensesTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teowz46"
        },
        "content": "package seedu.address.model.expenses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class ExpensesTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Expenses(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void addExpense() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        // null expense added"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e (new Expenses()).addExpense(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/guest/GuestTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.guest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.GuestBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class GuestTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest guest \u003d new GuestBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        guest.getTags().remove(0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSameGuest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(ALICE.isSameGuest(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(ALICE.isSameGuest(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest editedAlice \u003d new GuestBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(ALICE.isSameGuest(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedAlice \u003d new GuestBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(ALICE.isSameGuest(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new GuestBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(ALICE.isSameGuest(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new GuestBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(ALICE.isSameGuest(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new GuestBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(ALICE.isSameGuest(editedAlice));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest aliceCopy \u003d new GuestBuilder(ALICE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // different guest -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest editedAlice \u003d new GuestBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedAlice \u003d new GuestBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedAlice \u003d new GuestBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedAlice \u003d new GuestBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 19,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/model/guest/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.guest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.GuestBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // different guest -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(predicate.test(new GuestBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(predicate.test(new GuestBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(predicate.test(new GuestBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(predicate.test(new GuestBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(predicate.test(new GuestBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(predicate.test(new GuestBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone and email, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(predicate.test(new GuestBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 9,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/model/guest/UniqueGuestListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.guest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.exceptions.DuplicateGuestException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.exceptions.GuestNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.GuestBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class UniqueGuestListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private final UniqueGuestList uniqueGuestList \u003d new UniqueGuestList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullGuest_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_guestNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(uniqueGuestList.contains(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_guestInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.add(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(uniqueGuestList.contains(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_guestWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.add(ALICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest editedAlice \u003d new GuestBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(uniqueGuestList.contains(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullGuest_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.add(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicateGuest_throwsDuplicateGuestException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.add(ALICE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        thrown.expect(DuplicateGuestException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.add(ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuest_nullTargetGuest_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.setGuest(null, ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuest_nullEditedGuest_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.setGuest(ALICE, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuest_targetGuestNotInList_throwsGuestNotFoundException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        thrown.expect(GuestNotFoundException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.setGuest(ALICE, ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuest_editedGuestIsSameGuest_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.setGuest(ALICE, ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        UniqueGuestList expectedUniqueGuestList \u003d new UniqueGuestList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        expectedUniqueGuestList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertEquals(expectedUniqueGuestList, uniqueGuestList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuest_editedGuestHasSameIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.add(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest editedAlice \u003d new GuestBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.setGuest(ALICE, editedAlice);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        UniqueGuestList expectedUniqueGuestList \u003d new UniqueGuestList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        expectedUniqueGuestList.add(editedAlice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertEquals(expectedUniqueGuestList, uniqueGuestList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuest_editedGuestHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.setGuest(ALICE, BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        UniqueGuestList expectedUniqueGuestList \u003d new UniqueGuestList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        expectedUniqueGuestList.add(BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertEquals(expectedUniqueGuestList, uniqueGuestList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuest_editedGuestHasNonUniqueIdentity_throwsDuplicateGuestException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.add(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.add(BOB);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        thrown.expect(DuplicateGuestException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.setGuest(ALICE, BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullGuest_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.remove(null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_guestDoesNotExist_throwsGuestNotFoundException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        thrown.expect(GuestNotFoundException.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.remove(ALICE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingGuest_removesGuest() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.add(ALICE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.remove(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        UniqueGuestList expectedUniqueGuestList \u003d new UniqueGuestList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertEquals(expectedUniqueGuestList, uniqueGuestList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuests_nullUniqueGuestList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.setGuests((UniqueGuestList) null);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuests_uniqueGuestList_replacesOwnListWithProvidedUniqueGuestList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.add(ALICE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        UniqueGuestList expectedUniqueGuestList \u003d new UniqueGuestList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        expectedUniqueGuestList.add(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.setGuests(expectedUniqueGuestList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertEquals(expectedUniqueGuestList, uniqueGuestList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuests_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.setGuests((List\u003cGuest\u003e) null);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuests_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.add(ALICE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        List\u003cGuest\u003e guestList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.setGuests(guestList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        UniqueGuestList expectedUniqueGuestList \u003d new UniqueGuestList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        expectedUniqueGuestList.add(BOB);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertEquals(expectedUniqueGuestList, uniqueGuestList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuests_listWithDuplicateGuests_throwsDuplicateGuestException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        List\u003cGuest\u003e listWithDuplicateGuests \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        thrown.expect(DuplicateGuestException.class);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.setGuests(listWithDuplicateGuests);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        uniqueGuestList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 60,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/model/room/RoomNumberTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class RoomNumberTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new RoomNumber(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void constructor_invalidRoomNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        String invalidRoomNumber \u003d \"101\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new RoomNumber(invalidRoomNumber));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void isValidRoomNumber() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // null room number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e RoomNumber.isValidRoomNumber(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // invalid room numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(RoomNumber.isValidRoomNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(RoomNumber.isValidRoomNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(RoomNumber.isValidRoomNumber(\"000\")); // not within 001 to 100"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(RoomNumber.isValidRoomNumber(\"01\")); // not 3 digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(RoomNumber.isValidRoomNumber(\"room number\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(RoomNumber.isValidRoomNumber(\"050a\")); // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(RoomNumber.isValidRoomNumber(\"0 01\")); // spaces within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // valid room numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(RoomNumber.isValidRoomNumber(\"001\")); // exactly 3 digits and within 001 to 100"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(RoomNumber.isValidRoomNumber(\"099\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(RoomNumber.isValidRoomNumber(\"100\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/room/RoomTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CAPACITY_DOUBLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HANDICAP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Booking;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.exceptions.NoActiveBookingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.exceptions.NoActiveOrExpiredBookingException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.booking.exceptions.NoBookingException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.exceptions.OccupiedRoomCheckinException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.TypicalBookings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class RoomTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private final Room testRoomWithLastWeekYesterdayBooking \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withBookings(TypicalBookings.getTypicalBookingsLastWeekYesterday()).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private final Room testRoomWithLastWeekYesterdayBookingCheckedIn \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withBookings(TypicalBookings.getTypicalBookingsLastWeekYesterdayCheckedIn()).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private final Room testRoomWithYesterdayTodayBooking \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withBookings(TypicalBookings.getTypicalBookingsYesterdayToday()).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private final Room testRoomWithTodayTomorrowBooking \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withBookings(TypicalBookings.getTypicalBookingsTodayTomorrow()).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private final Room testRoomWithTomorrowNextWeekBooking \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withBookings(TypicalBookings.getTypicalBookingsTomorrowNextWeek()).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private final Room testRoomWithoutBooking \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Room room \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        room.getTags().remove(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void addBooking() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Booking bookingToAdd \u003d testRoomWithTodayTomorrowBooking.getBookings().getFirstBooking();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Room editedRoom \u003d testRoomWithoutBooking.addBooking(bookingToAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(editedRoom.equals(testRoomWithTodayTomorrowBooking));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void updateBooking() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Booking originalBooking \u003d testRoomWithTodayTomorrowBooking.getBookings().getFirstBooking();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Booking editedBooking \u003d testRoomWithTomorrowNextWeekBooking.getBookings().getFirstBooking();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Room editedRoom \u003d testRoomWithTodayTomorrowBooking.updateBooking(originalBooking, editedBooking);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(editedRoom.equals(testRoomWithTomorrowNextWeekBooking));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void isCheckedIn() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithLastWeekYesterdayBooking.isCheckedIn());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(testRoomWithLastWeekYesterdayBookingCheckedIn.isCheckedIn());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithYesterdayTodayBooking.isCheckedIn());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithTodayTomorrowBooking.isCheckedIn());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithTomorrowNextWeekBooking.isCheckedIn());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isCheckedIn_throwsNoBookingException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NoBookingException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        testRoomWithoutBooking.isCheckedIn();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void hasBookings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(testRoomWithLastWeekYesterdayBooking.hasBookings());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(testRoomWithYesterdayTodayBooking.hasBookings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(testRoomWithTodayTomorrowBooking.hasBookings());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(testRoomWithTomorrowNextWeekBooking.hasBookings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithoutBooking.hasBookings());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void hasActiveBooking() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithLastWeekYesterdayBooking.hasActiveBooking());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(testRoomWithYesterdayTodayBooking.hasActiveBooking());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(testRoomWithTodayTomorrowBooking.hasActiveBooking());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithTomorrowNextWeekBooking.hasActiveBooking());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasActiveBooking_throwsNoBookingException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NoBookingException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        testRoomWithoutBooking.hasActiveBooking();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void hasActiveOrExpiredBooking() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(testRoomWithLastWeekYesterdayBooking.hasActiveOrExpiredBooking());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(testRoomWithYesterdayTodayBooking.hasActiveOrExpiredBooking());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(testRoomWithTodayTomorrowBooking.hasActiveOrExpiredBooking());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithTomorrowNextWeekBooking.hasActiveOrExpiredBooking());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasActiveOrExpiredBooking_throwsNoBookingException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NoBookingException.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        testRoomWithoutBooking.hasActiveOrExpiredBooking();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void checkIn_expiredBooking_throwsNoActiveBookingException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        thrown.expect(NoActiveBookingException.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        testRoomWithLastWeekYesterdayBooking.checkIn();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void checkIn_yesterdayToday_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Room editedRoom \u003d testRoomWithYesterdayTodayBooking.checkIn();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(editedRoom.isCheckedIn());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void checkIn_todayTomorrow_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Room editedRoom \u003d testRoomWithTodayTomorrowBooking.checkIn();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(editedRoom.isCheckedIn());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void checkIn_upcomingBooking_throwsNoActiveBookingException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        thrown.expect(NoActiveBookingException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        testRoomWithTomorrowNextWeekBooking.checkIn();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void checkIn_occupiedRoomCheckin_throwsOccupiedRoomCheckinException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Room editedRoom \u003d testRoomWithTodayTomorrowBooking.checkIn();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        thrown.expect(OccupiedRoomCheckinException.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedRoom.checkIn();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkIn_noBooking_throwsNoBookingException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NoBookingException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        testRoomWithoutBooking.checkIn();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void checkOut_lastweekYesterday_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Room editedRoom \u003d testRoomWithLastWeekYesterdayBookingCheckedIn.checkout();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(editedRoom.equals(testRoomWithoutBooking));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void checkOut_yesterdayTodaysuccess() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Room editedRoom \u003d testRoomWithYesterdayTodayBooking.checkIn().checkout();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(editedRoom.equals(testRoomWithoutBooking));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void checkOut_todayTomorrowsuccess() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Room editedRoom \u003d testRoomWithTodayTomorrowBooking.checkIn().checkout();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(editedRoom.equals(testRoomWithoutBooking));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void checkOut_upcomingBooking_throwsNoActiveBookingException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        thrown.expect(NoActiveOrExpiredBookingException.class);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        testRoomWithTomorrowNextWeekBooking.checkout();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkOut_noBooking_throwsNoBookingException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NoBookingException.class);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        testRoomWithoutBooking.checkout();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void isSameRoom() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(testRoomWithYesterdayTodayBooking.isSameRoom(testRoomWithTodayTomorrowBooking));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithYesterdayTodayBooking.isSameRoom(null));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // different room number -\u003e returns false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Room editedRoom \u003d new RoomBuilder(testRoomWithYesterdayTodayBooking).withRoomNumber(\"002\").build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithYesterdayTodayBooking.isSameRoom(editedRoom));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // same room number, different capacity -\u003e returns true"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedRoom \u003d new RoomBuilder(testRoomWithYesterdayTodayBooking).withCapacity(VALID_CAPACITY_DOUBLE).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(testRoomWithYesterdayTodayBooking.isSameRoom(editedRoom));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* KIV Expenses"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // same room number, different expenses -\u003e returns true"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedSingle001 \u003d new RoomBuilder(testRoomWithYesterdayTodayBooking).withExpenses(new Expenses()).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(testRoomWithYesterdayTodayBooking.isSameRoom(editedSingle001));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // same room number, different bookings -\u003e returns true"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedRoom \u003d new RoomBuilder(testRoomWithYesterdayTodayBooking)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            .withBookings(TypicalBookings.getTypicalBookingsTodayTomorrow()).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(testRoomWithYesterdayTodayBooking.isSameRoom(editedRoom));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // same room number, different tags -\u003e return true"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedRoom \u003d new RoomBuilder(testRoomWithYesterdayTodayBooking).withTags(VALID_TAG_HANDICAP).build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(testRoomWithYesterdayTodayBooking.isSameRoom(editedRoom));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Room roomCopy \u003d new RoomBuilder(testRoomWithYesterdayTodayBooking).build();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(testRoomWithYesterdayTodayBooking.equals(roomCopy));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertTrue(testRoomWithYesterdayTodayBooking.equals(testRoomWithYesterdayTodayBooking));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithYesterdayTodayBooking.equals(null));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithYesterdayTodayBooking.equals(5));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // different guest -\u003e returns false"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithYesterdayTodayBooking.equals(testRoomWithTodayTomorrowBooking));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // different room number -\u003e returns false"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Room editedRoom \u003d new RoomBuilder(testRoomWithYesterdayTodayBooking).withRoomNumber(VALID_ROOM_NUMBER_BOB)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithYesterdayTodayBooking.equals(editedRoom));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // different capacity -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedRoom \u003d new RoomBuilder(testRoomWithYesterdayTodayBooking).withCapacity(VALID_CAPACITY_DOUBLE)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithYesterdayTodayBooking.equals(editedRoom));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* KIV Expenses"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // different capacity -\u003e returns false"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedSingle001 \u003d new RoomBuilder(testRoomWithYesterdayTodayBooking).withExpenses(new Expenses()).build();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithYesterdayTodayBooking.equals(editedSingle001));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // different bookings -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedRoom \u003d new RoomBuilder(testRoomWithYesterdayTodayBooking)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            .withBookings(TypicalBookings.getTypicalBookingsTodayTomorrow()).build();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithYesterdayTodayBooking.equals(editedRoom));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedRoom \u003d new RoomBuilder(testRoomWithYesterdayTodayBooking).withTags(VALID_TAG_HANDICAP).build();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertFalse(testRoomWithYesterdayTodayBooking.equals(editedRoom));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 241,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        userPrefs.setConciergeFilePath(Paths.get(\"concierge.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static seedu.address.testutil.TypicalConcierge.getTypicalConcierge;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.commons.events.model.ConciergeChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.ReadOnlyConcierge;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlConciergeStorage conciergeStorage \u003d new XmlConciergeStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        storageManager \u003d new StorageManager(conciergeStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void conciergeReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teowz46"
        },
        "content": "         * {@link XmlConciergeStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teowz46"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlConciergeStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Concierge original \u003d getTypicalConcierge();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        storageManager.saveConcierge(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        ReadOnlyConcierge retrieved \u003d storageManager.readConcierge().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertEquals(original, new Concierge(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void getConciergeFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertNotNull(storageManager.getConciergeFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void handleConciergeChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlConciergeStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        storage.handleConciergeChangedEvent(new ConciergeChangedEvent(new Concierge()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    class XmlConciergeStorageExceptionThrowingStub extends XmlConciergeStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        public XmlConciergeStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        public void saveConcierge(ReadOnlyConcierge concierge, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 21,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedExpenseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teowz46"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Menu;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.expenses.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.expenses.ExpenseType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class XmlAdaptedExpenseTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private static final String INVALID_ITEM \u003d \"1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ITEM_EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_DATETIME \u003d \"2018-10-14T22:34:40.283201400\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Expense VALID_EXPENSE \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ExpenseType VALID_EXPENSE_TYPE \u003d VALID_EXPENSE.getExpenseType();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ITEM \u003d VALID_EXPENSE.getItemName();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double VALID_COST \u003d VALID_EXPENSE.getCost();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_DATETIME \u003d VALID_EXPENSE.getDateTimeString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private static final Menu VALID_MENU \u003d new Menu();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        HashMap\u003cString, ExpenseType\u003e validMenuMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        validMenuMap.put(VALID_ITEM, VALID_EXPENSE_TYPE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        VALID_MENU.setMenu(validMenuMap);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void toModelType_validDetails_returnsNormalExpense() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedExpense testExpense \u003d new XmlAdaptedExpense(VALID_ITEM, VALID_COST, VALID_DATETIME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Expense convertedExpense \u003d testExpense.toModelType(VALID_MENU);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertEquals(convertedExpense.getExpenseType(), VALID_MENU.getExpenseType(VALID_ITEM));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(convertedExpense.getDateTimeString(), VALID_DATETIME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void toModelType_invalidItem_returnsUnknownExpense() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedExpense testExpense \u003d new XmlAdaptedExpense(INVALID_ITEM, VALID_COST, VALID_DATETIME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Expense convertedExpense \u003d testExpense.toModelType(VALID_MENU);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        ExpenseType unknownType \u003d new ExpenseType(INVALID_ITEM,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                XmlAdaptedExpense.EXPENSETYPE_UNKNOWN_NAME, XmlAdaptedExpense.EXPENSETYPE_UNKNOWN_COST);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertEquals(convertedExpense.getExpenseType(), unknownType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(convertedExpense.getDateTimeString(), VALID_DATETIME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void toModelType_emptyItem_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedExpense testExpense \u003d new XmlAdaptedExpense(INVALID_ITEM_EMPTY, VALID_COST, VALID_DATETIME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                ExpenseType.MESSAGE_NUMBER_EMPTY, () -\u003e testExpense.toModelType(VALID_MENU));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void toModelType_invalidDatetime_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedExpense testExpense \u003d new XmlAdaptedExpense(VALID_ITEM, VALID_COST, INVALID_DATETIME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(DateTimeParseException.class, () -\u003e testExpense.toModelType(VALID_MENU));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teowz46"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 48,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedExpenseTypeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teowz46"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.expenses.ExpenseType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class XmlAdaptedExpenseTypeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void toModelType_validArguments_returnsExpenseTypeObject() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        String number \u003d \"1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        double cost \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        String name \u003d \"-\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlAdaptedExpenseType testType \u003d new XmlAdaptedExpenseType(number, name, cost);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            assertEquals(testType.toModelType(), new ExpenseType(number, name, cost));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void toModelType_emptyNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlAdaptedExpenseType testType \u003d new XmlAdaptedExpenseType(\"\", \"-\", 0.0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, ExpenseType.MESSAGE_NUMBER_EMPTY, testType::toModelType);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void toModelType_emptyName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlAdaptedExpenseType testType \u003d new XmlAdaptedExpenseType(\"1\", \"\", 0.0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, ExpenseType.MESSAGE_NAME_EMPTY, testType::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void toModelType_nullNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlAdaptedExpenseType testType \u003d new XmlAdaptedExpenseType(null, \"-\", 0.0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                XmlAdaptedExpenseType.MESSAGE_NUMBER_MISSING, testType::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlAdaptedExpenseType testType \u003d new XmlAdaptedExpenseType(\"1\", null, 0.0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                XmlAdaptedExpenseType.MESSAGE_NAME_MISSING, testType::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void toModelType_nullCost_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlAdaptedExpenseType testType \u003d new XmlAdaptedExpenseType(\"1\", \"-\", null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                XmlAdaptedExpenseType.MESSAGE_COST_MISSING, testType::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teowz46"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teowz46"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedGuestTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedGuest.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class XmlAdaptedGuestTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validGuestDetails_returnsGuest() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedGuest guest \u003d new XmlAdaptedGuest(BENSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, guest.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedGuest guest \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedGuest(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, guest::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedGuest guest \u003d new XmlAdaptedGuest(null, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, guest::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedGuest guest \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedGuest(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, guest::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedGuest guest \u003d new XmlAdaptedGuest(VALID_NAME, null, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, guest::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedGuest guest \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedGuest(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, guest::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedGuest guest \u003d new XmlAdaptedGuest(VALID_NAME, VALID_PHONE, null, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, guest::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedGuest guest \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedGuest(VALID_NAME, VALID_PHONE, VALID_EMAIL, invalidTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, guest::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 1,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlConciergeStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static seedu.address.testutil.TypicalConcierge.getTypicalConcierge;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.ReadOnlyConcierge;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class XmlConciergeStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlConciergeStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void readConcierge_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        readConcierge(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private java.util.Optional\u003cReadOnlyConcierge\u003e readConcierge(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return new XmlConciergeStorage(Paths.get(filePath)).readConcierge(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertFalse(readConcierge(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        readConcierge(\"NotXmlFormatConcierge.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void readConcierge_invalidConcierge_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        readConcierge(\"invalidGuestConcierge.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void readConcierge_invalidAndValidConcierge_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        readConcierge(\"invalidAndValidGuestConcierge.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void readAndSaveConcierge_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempConcierge.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Concierge original \u003d getTypicalConcierge();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlConciergeStorage xmlConciergeStorage \u003d new XmlConciergeStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        xmlConciergeStorage.saveConcierge(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        ReadOnlyConcierge readBack \u003d xmlConciergeStorage.readConcierge(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertEquals(original, new Concierge(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addGuest(HOON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removeGuest(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        xmlConciergeStorage.saveConcierge(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        readBack \u003d xmlConciergeStorage.readConcierge(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertEquals(original, new Concierge(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addGuest(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        xmlConciergeStorage.saveConcierge(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        readBack \u003d xmlConciergeStorage.readConcierge().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertEquals(original, new Concierge(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void saveConcierge_nullConcierge_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        saveConcierge(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Saves {@code concierge} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private void saveConcierge(ReadOnlyConcierge concierge, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            new XmlConciergeStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                    .saveConcierge(concierge, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void saveConcierge_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        saveConcierge(new Concierge(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 36,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableConciergeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static seedu.address.testutil.TypicalConcierge.getTypicalConcierge;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class XmlSerializableConciergeTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableConciergeTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private static final Path TYPICAL_GUESTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalGuestsConcierge.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private static final Path INVALID_GUEST_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidGuestConcierge.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private static final Path DUPLICATE_GUEST_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateGuestConcierge.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalGuestsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlSerializableConcierge dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_GUESTS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                XmlSerializableConcierge.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Concierge conciergeFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Concierge typicalGuestsConcierge \u003d getTypicalConcierge();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertEquals(conciergeFromFile, typicalGuestsConcierge);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidGuestFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlSerializableConcierge dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_GUEST_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                XmlSerializableConcierge.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicateGuests_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlSerializableConcierge dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_GUEST_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                XmlSerializableConcierge.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        thrown.expectMessage(XmlSerializableConcierge.MESSAGE_DUPLICATE_GUEST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 17,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookingBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Booking;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.BookingPeriod;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * A utility class to help with building Booking objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class BookingBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Guest DEFAULT_GUEST \u003d new GuestBuilder().build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final BookingPeriod DEFAULT_BOOKING_PERIOD_TODAY_TOMORROW \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        new BookingPeriod(LocalDate.now().format(BookingPeriod.DATE_TO_STRING_FORMAT),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDate.now().plusDays(1).format(BookingPeriod.DATE_TO_STRING_FORMAT));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Boolean DEFAULT_CHECKIN \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private Guest guest;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private BookingPeriod bookingPeriod;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private Boolean checkIn;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public BookingBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        guest \u003d DEFAULT_GUEST;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        bookingPeriod \u003d DEFAULT_BOOKING_PERIOD_TODAY_TOMORROW;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        checkIn \u003d DEFAULT_CHECKIN;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Initializes the BookingBuilder with the data of {@code bookingToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public BookingBuilder(Booking bookingToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        guest \u003d bookingToCopy.getGuest();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        bookingPeriod \u003d bookingToCopy.getBookingPeriod();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        checkIn \u003d bookingToCopy.getIsCheckedIn();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Sets the {@code Guest} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public BookingBuilder withGuest(Guest guest) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.guest \u003d new Guest(guest);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Sets the {@code BookingPeriod} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public BookingBuilder withBookingPeriod(BookingPeriod bookingPeriod) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.bookingPeriod \u003d new BookingPeriod(bookingPeriod.getStartDateAsFormattedString(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            bookingPeriod.getEndDateAsFormattedString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Sets the {@code Boolean} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public BookingBuilder withCheckIn(boolean checkIn) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.checkIn \u003d checkIn;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Booking build() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return new Booking(guest, bookingPeriod, checkIn);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 64,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ConciergeBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * A utility class to help with building Concierge objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teowz46"
        },
        "content": " *     {@code Concierge ab \u003d new ConciergeBuilder().withGuest(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class ConciergeBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private Concierge concierge;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public ConciergeBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        concierge \u003d new Concierge();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public ConciergeBuilder(Concierge concierge) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        this.concierge \u003d concierge;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Adds a new {@code Guest} to the {@code Concierge} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public ConciergeBuilder withGuest(Guest guest) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        concierge.addGuest(guest);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public Concierge build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return concierge;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 14,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GuestBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * A utility class to help with building Guest objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class GuestBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public GuestBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Initializes the GuestBuilder with the data of {@code guestToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public GuestBuilder(Guest guestToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        name \u003d guestToCopy.getName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        phone \u003d guestToCopy.getPhone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        email \u003d guestToCopy.getEmail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(guestToCopy.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Sets the {@code Name} of the {@code Guest} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public GuestBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Guest} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public GuestBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Sets the {@code Phone} of the {@code Guest} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public GuestBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Sets the {@code Email} of the {@code Guest} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public GuestBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Guest build() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Guest(name, phone, email, tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 18,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GuestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_END;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_START;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.booking.BookingPeriod;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * A utility class for Guest."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuestUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns an add command string for adding the {@code guest}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Guest guest, RoomNumber roomNumber,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                                       BookingPeriod bookingPeriod) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getGuestDetails(guest) + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                + getRoomDesc(roomNumber) + \" \" + getBookingPeriodDesc(bookingPeriod);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code roomNumber}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getRoomDesc(RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return PREFIX_ROOM + \" \" + roomNumber.value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code bookingPeriod}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getBookingPeriodDesc(BookingPeriod bookingPeriod) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_DATE_START + bookingPeriod.getStartDateAsFormattedString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\" \" + PREFIX_DATE_END + bookingPeriod.getEndDateAsFormattedString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns the part of command string for the given {@code guest}\u0027s details."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getGuestDetails(Guest guest) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        sb.append(PREFIX_NAME + guest.getName().fullName + \" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        sb.append(PREFIX_PHONE + guest.getPhone().value + \" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        sb.append(PREFIX_EMAIL + guest.getEmail().value + \" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        guest.getTags().stream().forEach("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditGuestDescriptor}\u0027s details."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditGuestDescriptorDetails(EditCommand.EditGuestDescriptor descriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 7,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RoomBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.expenses.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.expenses.Expenses;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.Capacity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.DoubleRoom;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.SingleRoom;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.SuiteRoom;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Booking;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Bookings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * A utility class to help with building Room objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class RoomBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final String DEFAULT_ROOM_NUMBER \u003d \"001\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final int DEFAULT_CAPACITY \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private RoomNumber roomNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private Capacity capacity;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private Expenses expenses;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private Bookings bookings;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public RoomBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        roomNumber \u003d new RoomNumber(DEFAULT_ROOM_NUMBER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        capacity \u003d new Capacity(DEFAULT_CAPACITY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        expenses \u003d new Expenses();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        bookings \u003d new Bookings();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Initializes the RoomBuilder with the data of {@code roomToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public RoomBuilder(Room roomToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        roomNumber \u003d roomToCopy.getRoomNumber();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        capacity \u003d roomToCopy.getCapacity();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        expenses \u003d roomToCopy.getExpenses();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        bookings \u003d roomToCopy.getBookings();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(roomToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Sets the {@code RoomNumber} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public RoomBuilder withRoomNumber(String roomNumber) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.roomNumber \u003d new RoomNumber(roomNumber);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Room} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public RoomBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Sets the {@code Capacity} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public RoomBuilder withCapacity(int capacity) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.capacity \u003d new Capacity(capacity);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Sets the {@code Expenses} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public RoomBuilder withExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.expenses \u003d new Expenses(expenses);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Sets the {@code Bookings} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public RoomBuilder withBookings(SortedSet\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        this.bookings \u003d new Bookings(bookings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Builds the room type depending on the capacity"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public Room build() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        if (capacity.equals(SingleRoom.CAPACITY_SINGLE_ROOM)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return new SingleRoom(this.roomNumber, this.expenses, this.bookings, this.tags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        } else if (capacity.equals(DoubleRoom.CAPACITY_DOUBLE_ROOM)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return new DoubleRoom(this.roomNumber, this.expenses, this.bookings, this.tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        } else if (capacity.equals(SuiteRoom.CAPACITY_SUITE_ROOM)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            return new SuiteRoom(this.roomNumber, this.expenses, this.bookings, this.tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            throw new IllegalArgumentException(Capacity.MESSAGE_CAPACITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns the middle index of the guest in the {@code model}\u0027s guest list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredGuestList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns the last index of the guest in the {@code model}\u0027s guest list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredGuestList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns the guest in the {@code model}\u0027s guest list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Guest getGuest(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredGuestList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 3,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBookingPeriods.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_END_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_END_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_START_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_START_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.BookingPeriod;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * A utility class containing a list of {@code BookingPeriod} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class TypicalBookingPeriods {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final BookingPeriod LASTWEEK_YESTERDAY \u003d new BookingPeriod("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate.now().minusWeeks(1).format(BookingPeriod.DATE_TO_STRING_FORMAT),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate.now().minusDays(1).format(BookingPeriod.DATE_TO_STRING_FORMAT));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final BookingPeriod YESTERDAY_TODAY \u003d new BookingPeriod("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate.now().minusDays(1).format(BookingPeriod.DATE_TO_STRING_FORMAT),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate.now().format(BookingPeriod.DATE_TO_STRING_FORMAT));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final BookingPeriod TODAY_TOMORROW \u003d new BookingPeriod("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate.now().format(BookingPeriod.DATE_TO_STRING_FORMAT),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate.now().plusDays(1).format(BookingPeriod.DATE_TO_STRING_FORMAT));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final BookingPeriod TODAY_NEXTWEEK \u003d new BookingPeriod("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate.now().format(BookingPeriod.DATE_TO_STRING_FORMAT),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate.now().plusWeeks(1).format(BookingPeriod.DATE_TO_STRING_FORMAT));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final BookingPeriod TOMORROW_NEXTWEEK \u003d new BookingPeriod("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate.now().plusDays(1).format(BookingPeriod.DATE_TO_STRING_FORMAT),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate.now().plusWeeks(1).format(BookingPeriod.DATE_TO_STRING_FORMAT));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - BookingPeriod found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final BookingPeriod BOOKING_PERIOD_AMY \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new BookingPeriod(VALID_DATE_START_AMY, VALID_DATE_END_AMY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final BookingPeriod BOOKING_PERIOD_BOB \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new BookingPeriod(VALID_DATE_START_BOB, VALID_DATE_END_BOB);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 16,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBookings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.booking.Booking;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * A utility class containing a list of {@code Booking} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class TypicalBookings {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Booking LASTWEEK_YESTERDAY \u003d new BookingBuilder()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withBookingPeriod(TypicalBookingPeriods.LASTWEEK_YESTERDAY).build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Booking LASTWEEK_YESTERDAY_CHECKEDIN \u003d new BookingBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withBookingPeriod(TypicalBookingPeriods.LASTWEEK_YESTERDAY)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withCheckIn(true).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Booking YESTERDAY_TODAY \u003d new BookingBuilder()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withBookingPeriod(TypicalBookingPeriods.YESTERDAY_TODAY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Booking TODAY_TOMORROW \u003d new BookingBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withBookingPeriod(TypicalBookingPeriods.TODAY_TOMORROW).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Booking TODAY_NEXTWEEK \u003d new BookingBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withBookingPeriod(TypicalBookingPeriods.TODAY_NEXTWEEK).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Booking TOMORROW_NEXTWEEK \u003d new BookingBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withBookingPeriod(TypicalBookingPeriods.TOMORROW_NEXTWEEK).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static SortedSet\u003cBooking\u003e getTypicalBookingsSet() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        SortedSet\u003cBooking\u003e bookings \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Collections.addAll(bookings,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            LASTWEEK_YESTERDAY, YESTERDAY_TODAY, TODAY_TOMORROW, TODAY_NEXTWEEK, TOMORROW_NEXTWEEK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return bookings;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static SortedSet\u003cBooking\u003e getTypicalBookingsLastWeekYesterday() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        SortedSet\u003cBooking\u003e bookings \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        bookings.add(LASTWEEK_YESTERDAY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return bookings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static SortedSet\u003cBooking\u003e getTypicalBookingsLastWeekYesterdayCheckedIn() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        SortedSet\u003cBooking\u003e bookings \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        bookings.add(LASTWEEK_YESTERDAY_CHECKEDIN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return bookings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static SortedSet\u003cBooking\u003e getTypicalBookingsYesterdayToday() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        SortedSet\u003cBooking\u003e bookings \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        bookings.add(YESTERDAY_TODAY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return bookings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static SortedSet\u003cBooking\u003e getTypicalBookingsTodayTomorrow() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        SortedSet\u003cBooking\u003e bookings \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        bookings.add(TODAY_TOMORROW);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return bookings;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static SortedSet\u003cBooking\u003e getTypicalBookingsTodayNextWeek() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        SortedSet\u003cBooking\u003e bookings \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        bookings.add(TODAY_NEXTWEEK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return bookings;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static SortedSet\u003cBooking\u003e getTypicalBookingsTomorrowNextWeek() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        SortedSet\u003cBooking\u003e bookings \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        bookings.add(TOMORROW_NEXTWEEK);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return bookings;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalConcierge.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.UniqueGuestList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.UniqueRoomList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * A utility class containing a {@code UniqueGuestList} and {@code UniqueRoomList} objects to be used in tests."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class TypicalConcierge {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final UniqueGuestList GUEST_LIST \u003d TypicalGuests.getTypicalUniqueGuestList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final UniqueRoomList ROOM_LIST \u003d TypicalRooms.getTypicalUniqueRoomList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private TypicalConcierge() {} // prevents instantiation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Returns an {@code Concierge} with all the typical guests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public static Concierge getTypicalConcierge() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Concierge ab \u003d new Concierge();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        ab.setGuests(GUEST_LIST.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        ab.setRooms(ROOM_LIST.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 6,
      "adamwth": 17,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalGuests.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.UniqueGuestList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * A utility class containing a list of {@code Guest} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalGuests {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Guest ALICE \u003d new GuestBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Guest BENSON \u003d new GuestBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Guest CARL \u003d new GuestBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Guest DANIEL \u003d new GuestBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Guest ELLE \u003d new GuestBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Guest FIONA \u003d new GuestBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Guest GEORGE \u003d new GuestBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Guest HOON \u003d new GuestBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Guest IDA \u003d new GuestBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Guest JAKOB \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            new GuestBuilder().withName(\"Jakob Hitlier\").withPhone(\"89817221\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"naaazi@example.de\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    // Manually added - Guest\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Guest AMY \u003d new GuestBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Guest BOB \u003d new GuestBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalGuests() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cGuest\u003e getTypicalGuests() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static UniqueGuestList getTypicalUniqueGuestList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        UniqueGuestList uniqueGuestList \u003d new UniqueGuestList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueGuestList.setGuests(getTypicalGuests());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return uniqueGuestList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 18,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRoomNumbers.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * A utility class containing a list of {@code RoomNumber} objects to be used in tests."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class TypicalRoomNumbers {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final RoomNumber ROOM_NUMBER_001 \u003d new RoomNumber(\"001\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final RoomNumber ROOM_NUMBER_002 \u003d new RoomNumber(\"002\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final RoomNumber ROOM_NUMBER_010 \u003d new RoomNumber(\"010\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final RoomNumber ROOM_NUMBER_011 \u003d new RoomNumber(\"011\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final RoomNumber ROOM_NUMBER_012 \u003d new RoomNumber(\"012\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final RoomNumber ROOM_NUMBER_020 \u003d new RoomNumber(\"020\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final RoomNumber ROOM_NUMBER_023 \u003d new RoomNumber(\"023\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final RoomNumber ROOM_NUMBER_024 \u003d new RoomNumber(\"024\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final RoomNumber ROOM_NUMBER_099 \u003d new RoomNumber(\"099\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - RoomNumber found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final RoomNumber ROOM_NUMBER_AMY \u003d new RoomNumber(VALID_ROOM_NUMBER_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final RoomNumber ROOM_NUMBER_BOB \u003d new RoomNumber(VALID_ROOM_NUMBER_BOB);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 16,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRooms.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.DoubleRoom;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.SingleRoom;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.SuiteRoom;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.model.room.UniqueRoomList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adamwth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adamwth"
        },
        "content": " * A utility class containing a list of {@code Room} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class TypicalRooms {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private static final int CAPACITY_SINGLE_ROOM \u003d SingleRoom.getCapacityValue();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private static final int CAPACITY_DOUBLE_ROOM \u003d DoubleRoom.getCapacityValue();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private static final int CAPACITY_SUITE_ROOM \u003d SuiteRoom.getCapacityValue();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Room SINGLE_001 \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withRoomNumber(TypicalRoomNumbers.ROOM_NUMBER_001.toString()).withCapacity(CAPACITY_SINGLE_ROOM)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Room DOUBLE_002 \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withRoomNumber(TypicalRoomNumbers.ROOM_NUMBER_002.toString()).withCapacity(CAPACITY_DOUBLE_ROOM)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Room SUITE_010 \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withRoomNumber(TypicalRoomNumbers.ROOM_NUMBER_010.toString()).withCapacity(CAPACITY_SUITE_ROOM)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Room SINGLE_011 \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withRoomNumber(TypicalRoomNumbers.ROOM_NUMBER_011.toString()).withCapacity(CAPACITY_SINGLE_ROOM)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Room DOUBLE_012 \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withRoomNumber(TypicalRoomNumbers.ROOM_NUMBER_012.toString()).withCapacity(CAPACITY_DOUBLE_ROOM)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static final Room SUITE_020 \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .withRoomNumber(TypicalRoomNumbers.ROOM_NUMBER_020.toString()).withCapacity(CAPACITY_SUITE_ROOM)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Room SINGLE_023 \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        .withRoomNumber(TypicalRoomNumbers.ROOM_NUMBER_023.toString()).withCapacity(CAPACITY_SINGLE_ROOM)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Room DOUBLE_024 \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        .withRoomNumber(TypicalRoomNumbers.ROOM_NUMBER_024.toString()).withCapacity(CAPACITY_DOUBLE_ROOM)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Room SUITE_099 \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        .withRoomNumber(TypicalRoomNumbers.ROOM_NUMBER_099.toString()).withCapacity(CAPACITY_SUITE_ROOM)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns a {@code UniqueRoomList} with all the typical rooms."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Note: All rooms do not have bookings or expenses. Use @Before in tests to initialize bookings and expenses."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public static UniqueRoomList getTypicalUniqueRoomList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        return new UniqueRoomList(RoomNumber.MAX_ROOM_NUMBER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 50,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.GuestPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuestPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        selectionChangedEventStub \u003d new GuestPanelSelectionChangedEvent(ALICE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // associated web page of a guest"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedGuestUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedGuestUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 1,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD + \" -r\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        String thirdCommand \u003d \"list -r\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 2,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuestCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adamwth"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysGuest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.GuestCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.GuestBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class GuestCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest guestWithNoTags \u003d new GuestBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        GuestCard guestCard \u003d new GuestCard(guestWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        uiPartRule.setUiPart(guestCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertCardDisplay(guestCard, guestWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest guestWithTags \u003d new GuestBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestCard \u003d new GuestCard(guestWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        uiPartRule.setUiPart(guestCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertCardDisplay(guestCard, guestWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest guest \u003d new GuestBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        GuestCard guestCard \u003d new GuestCard(guest, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // same guest, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        GuestCard copy \u003d new GuestCard(guest, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertTrue(guestCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertTrue(guestCard.equals(guestCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertFalse(guestCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertFalse(guestCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // different guest, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest differentGuest \u003d new GuestBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertFalse(guestCard.equals(new GuestCard(differentGuest, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // same guest, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertFalse(guestCard.equals(new GuestCard(guest, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code guestCard} displays the details of {@code expectedGuest} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private void assertCardDisplay(GuestCard guestCard, Guest expectedGuest, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        GuestCardHandle guestCardHandle \u003d new GuestCardHandle(guestCard.getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", guestCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adamwth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // verify guest details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplaysGuest(expectedGuest, guestCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adamwth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 15,
      "adamwth": 50,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuestDetailedCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysDetailedGuest;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import guitests.guihandles.GuestDetailedCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.testutil.GuestBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class GuestDetailedCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Guest guestWithNoTags \u003d new GuestBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        GuestDetailedCard guestDetailedCard \u003d new GuestDetailedCard(guestWithNoTags);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        uiPartRule.setUiPart(guestDetailedCard);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertCardDisplay(guestDetailedCard, guestWithNoTags);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Guest guestWithTags \u003d new GuestBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestDetailedCard \u003d new GuestDetailedCard(guestWithTags);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        uiPartRule.setUiPart(guestDetailedCard);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertCardDisplay(guestDetailedCard, guestWithTags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Guest guest \u003d new GuestBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        GuestDetailedCard guestDetailedCard \u003d new GuestDetailedCard(guest);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // same guest, same index -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        GuestDetailedCard copy \u003d new GuestDetailedCard(guest);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertTrue(guestDetailedCard.equals(copy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertTrue(guestDetailedCard.equals(guestDetailedCard));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertFalse(guestDetailedCard.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertFalse(guestDetailedCard.equals(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // different guest, same index -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Guest differentGuest \u003d new GuestBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertFalse(guestDetailedCard.equals(new GuestDetailedCard(differentGuest)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // same guest, different index -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertFalse(guestDetailedCard.equals(new GuestDetailedCard(differentGuest)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedGuest} correctly and matches"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private void assertCardDisplay(GuestDetailedCard guestDetailedCard, Guest expectedGuest) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        GuestDetailedCardHandle guestDetailedCardHandle \u003d new GuestDetailedCardHandle(guestDetailedCard.getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // verify guest details are displayed correctly"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertCardDisplaysDetailedGuest(expectedGuest, guestDetailedCardHandle);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuestDetailedPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.getTypicalGuests;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysDetailedGuest;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import guitests.guihandles.GuestDetailedCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import guitests.guihandles.GuestDetailedPanelHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.events.ui.GuestPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class GuestDetailedPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final ObservableList\u003cGuest\u003e TYPICAL_GUESTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            FXCollections.observableList(getTypicalGuests());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private GuestPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private GuestDetailedPanel guestDetailedPanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private GuestDetailedPanelHandle guestDetailedPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guiRobot.interact(() -\u003e guestDetailedPanel \u003d new GuestDetailedPanel());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        uiPartRule.setUiPart(guestDetailedPanel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guestDetailedPanelHandle \u003d new GuestDetailedPanelHandle(getChildNode(guestDetailedPanel.getRoot(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                GuestDetailedPanelHandle.GUEST_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_GUESTS.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            selectionChangedEventStub \u003d new GuestPanelSelectionChangedEvent(TYPICAL_GUESTS.get(i));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            Guest expectedGuest \u003d TYPICAL_GUESTS.get(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            guestDetailedPanelHandle.navigateToCard(TYPICAL_GUESTS.get(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            GuestDetailedCardHandle actualCard \u003d guestDetailedPanelHandle.getGuestDetailedCardHandle(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            assertCardDisplaysDetailedGuest(expectedGuest, actualCard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuestListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.getTypicalGuests;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_GUEST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysGuest;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.GuestCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.GuestListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.storage.XmlSerializableConcierge;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adamwth"
        },
        "content": "public class GuestListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private static final ObservableList\u003cGuest\u003e TYPICAL_GUESTS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalGuests());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_GUEST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuestListPanelHandle guestListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        initUi(TYPICAL_GUESTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_GUESTS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            guestListPanelHandle.navigateToCard(TYPICAL_GUESTS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "            Guest expectedGuest \u003d TYPICAL_GUESTS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            GuestCardHandle actualCard \u003d guestListPanelHandle.getGuestCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysGuest(expectedGuest, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        initUi(TYPICAL_GUESTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuestCardHandle expectedGuest \u003d guestListPanelHandle.getGuestCardHandle(INDEX_SECOND_GUEST.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuestCardHandle selectedGuest \u003d guestListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedGuest, selectedGuest);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of guests in {@code GuestListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        ObservableList\u003cGuest\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        }, \"Creation and deletion of guest cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of guests containing {@code guestCount} guests that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code GuestListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cGuest\u003e createBackingList(int guestCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithGuests(guestCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        XmlSerializableConcierge xmlConcierge \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teowz46"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableConcierge.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return FXCollections.observableArrayList(xmlConcierge.toModelType().getGuestList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code guestCount} guests."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithGuests(int guestCount) throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        builder.append(\"\u003cconcierge\u003e\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c guestCount; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cguest\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/guest\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        builder.append(\"\u003c/concierge\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyGuestsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyGuests.xml\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyGuestsFile);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyGuestsFile, builder.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        manyGuestsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyGuestsFile;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code guestListPanelHandle} with a {@code GuestListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code GuestListPanel}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private void initUi(ObservableList\u003cGuest\u003e backingList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        GuestListPanel guestListPanel \u003d new GuestListPanel(backingList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(guestListPanel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        guestListPanelHandle \u003d new GuestListPanelHandle(getChildNode(guestListPanel.getRoot(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                GuestListPanelHandle.GUEST_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 6,
      "adamwth": 9,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * A GUI unit test class for Concierge."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowGuiChangeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GUEST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertMainWindowDisplaysGuestList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertMainWindowDisplaysRoomList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.events.ui.ListingChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class MainWindowGuiChangeTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new Config(), new UserPrefs(), new LogicManager(new ModelManager()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            stage.setScene(mainWindow.getRoot().getScene());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void listing_listGuiChanges() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                postNow(new ListingChangedEvent(PREFIX_GUEST.toString()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                assertMainWindowDisplaysGuestList(mainWindow);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                postNow(new ListingChangedEvent(PREFIX_ROOM.toString()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                assertMainWindowDisplaysRoomList(mainWindow);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/RoomCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysRoom;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import guitests.guihandles.RoomCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class RoomCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Room roomWithNoTags \u003d new RoomBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        RoomCard roomCard \u003d new RoomCard(roomWithNoTags);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        uiPartRule.setUiPart(roomCard);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertCardDisplay(roomCard, roomWithNoTags);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Room roomWithTags \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomCard \u003d new RoomCard(roomWithTags);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        uiPartRule.setUiPart(roomCard);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertCardDisplay(roomCard, roomWithTags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Room room \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        RoomCard roomCard \u003d new RoomCard(room);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // same room, same index -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        RoomCard copy \u003d new RoomCard(room);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertTrue(roomCard.equals(copy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertTrue(roomCard.equals(roomCard));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertFalse(roomCard.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertFalse(roomCard.equals(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // different room number -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Room differentRoom \u003d new RoomBuilder().withRoomNumber(\"099\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertFalse(roomCard.equals(new RoomCard(differentRoom)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Asserts that {@code roomCard} displays the details of {@code expectedRoom} correctly and matches"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private void assertCardDisplay(RoomCard roomCard, Room expectedRoom) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        RoomCardHandle roomCardHandle \u003d new RoomCardHandle(roomCard.getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // verify room details are displayed correctly"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertCardDisplaysRoom(expectedRoom, roomCardHandle);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/RoomDetailedCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysDetailedRoom;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import guitests.guihandles.RoomDetailedCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class RoomDetailedCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Room roomWithNoTags \u003d new RoomBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        RoomDetailedCard roomDetailedCard \u003d new RoomDetailedCard(roomWithNoTags);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        uiPartRule.setUiPart(roomDetailedCard);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertCardDisplay(roomDetailedCard, roomWithNoTags);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Room roomWithTags \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomDetailedCard \u003d new RoomDetailedCard(roomWithTags);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        uiPartRule.setUiPart(roomDetailedCard);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertCardDisplay(roomDetailedCard, roomWithTags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Room room \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        RoomDetailedCard roomDetailedCard \u003d new RoomDetailedCard(room);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // same room, same index -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        RoomDetailedCard copy \u003d new RoomDetailedCard(room);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertTrue(roomDetailedCard.equals(copy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertTrue(roomDetailedCard.equals(roomDetailedCard));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertFalse(roomDetailedCard.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertFalse(roomDetailedCard.equals(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // different room number -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        Room differentRoom \u003d new RoomBuilder().withRoomNumber(\"099\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertFalse(roomDetailedCard.equals(new RoomDetailedCard(differentRoom)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedRoom} correctly and matches"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private void assertCardDisplay(RoomDetailedCard roomDetailedCard, Room expectedRoom) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        RoomDetailedCardHandle roomDetailedCardHandle \u003d new RoomDetailedCardHandle(roomDetailedCard.getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        // verify room details are displayed correctly"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertCardDisplaysDetailedRoom(expectedRoom, roomDetailedCardHandle);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/RoomDetailedPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalUniqueRoomList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysDetailedRoom;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import guitests.guihandles.RoomDetailedCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import guitests.guihandles.RoomDetailedPanelHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.events.ui.RoomPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class RoomDetailedPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private static final ObservableList\u003cRoom\u003e TYPICAL_ROOMS \u003d getTypicalUniqueRoomList().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private RoomPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private RoomDetailedPanel roomDetailedPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private RoomDetailedPanelHandle roomDetailedPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guiRobot.interact(() -\u003e roomDetailedPanel \u003d new RoomDetailedPanel());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        uiPartRule.setUiPart(roomDetailedPanel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomDetailedPanelHandle \u003d new RoomDetailedPanelHandle(getChildNode(roomDetailedPanel.getRoot(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                RoomDetailedPanelHandle.ROOM_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_ROOMS.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            selectionChangedEventStub \u003d new RoomPanelSelectionChangedEvent(TYPICAL_ROOMS.get(i));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            Room expectedRoom \u003d TYPICAL_ROOMS.get(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            roomDetailedPanelHandle.navigateToCard(TYPICAL_ROOMS.get(i));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            RoomDetailedCardHandle actualCard \u003d roomDetailedPanelHandle.getRoomDetailedCardHandle(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            assertCardDisplaysDetailedRoom(expectedRoom, actualCard);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 45,
      "adamwth": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/RoomListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalUniqueRoomList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysRoom;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import guitests.guihandles.RoomCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import guitests.guihandles.RoomListPanelHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "public class RoomListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private static final ObservableList\u003cRoom\u003e TYPICAL_ROOMS \u003d getTypicalUniqueRoomList().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            new JumpToListRequestEvent(Index.fromZeroBased(2));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private RoomListPanelHandle roomListPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        initUi(TYPICAL_ROOMS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_ROOMS.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            roomListPanelHandle.navigateToCard(TYPICAL_ROOMS.get(i));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            Room expectedRoom \u003d TYPICAL_ROOMS.get(i);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            RoomCardHandle actualCard \u003d roomListPanelHandle.getRoomCardHandle(i);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "            assertCardDisplaysRoom(expectedRoom, actualCard);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        initUi(TYPICAL_ROOMS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        RoomCardHandle expectedRoom \u003d roomListPanelHandle.getRoomCardHandle(2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        RoomCardHandle selectedRoom \u003d roomListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertCardEquals(expectedRoom, selectedRoom);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Initializes {@code roomListPanelHandsle} with a {@code RoomListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code RoomListPanel}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    private void initUi(ObservableList\u003cRoom\u003e backingList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        RoomListPanel roomListPanel \u003d new RoomListPanel(backingList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        uiPartRule.setUiPart(roomListPanel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        roomListPanelHandle \u003d new RoomListPanelHandle(getChildNode(roomListPanel.getRoot(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                RoomListPanelHandle.ROOM_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 61,
      "adamwth": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.commons.events.model.ConciergeChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    private static final ConciergeChangedEvent EVENT_STUB \u003d new ConciergeChangedEvent(new Concierge());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        // after Concierge is updated"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 4,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.GuestCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import guitests.guihandles.GuestDetailedCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.GuestListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import guitests.guihandles.RoomCardHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import guitests.guihandles.RoomDetailedCardHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard} for guests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(GuestCardHandle expectedCard, GuestCardHandle actualCard) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard} for rooms."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public static void assertCardEquals(RoomCardHandle expectedCard, RoomCardHandle actualCard) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(expectedCard.getRoomNumber(), actualCard.getRoomNumber());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(expectedCard.getCapacity(), actualCard.getCapacity());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedGuest}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysGuest(Guest expectedGuest, GuestCardHandle actualCard) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertEquals(expectedGuest.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertEquals(expectedGuest.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertEquals(expectedGuest.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedGuest}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public static void assertCardDisplaysDetailedGuest(Guest expectedGuest, GuestDetailedCardHandle actualCard) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(expectedGuest.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(expectedGuest.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(expectedGuest.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedRoom}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public static void assertCardDisplaysRoom(Room expectedRoom, RoomCardHandle actualCard) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(\"Room: \" + expectedRoom.getRoomNumber(), actualCard.getRoomNumber());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(\"Capacity: \" + expectedRoom.getCapacity(), actualCard.getCapacity());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(expectedRoom.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedRoom}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public static void assertCardDisplaysDetailedRoom(Room expectedRoom, RoomDetailedCardHandle actualCard) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(\"Room: \" + expectedRoom.getRoomNumber(), actualCard.getRoomNumber());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(\"Capacity: \" + expectedRoom.getCapacity(), actualCard.getCapacity());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(\"Expenses: \" + expectedRoom.getExpenses().toStringTotalCost(), actualCard.getExpenses());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(expectedRoom.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Asserts that {@code mainWindow} guestlist is visible."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public static void assertMainWindowDisplaysGuestList(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(mainWindow.isGuestListVisible(), true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(mainWindow.isRoomListVisible(), false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        mainWindow.showRoomList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(mainWindow.isGuestListVisible(), false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(mainWindow.isRoomListVisible(), true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     * Asserts that {@code mainWindow} roomlist is visible."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    public static void assertMainWindowDisplaysRoomList(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(mainWindow.isGuestListVisible(), false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(mainWindow.isRoomListVisible(), true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        mainWindow.showGuestList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(mainWindow.isGuestListVisible(), true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        assertEquals(mainWindow.isRoomListVisible(), false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code guestListPanelHandle} displays the details of {@code guests} correctly and"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(GuestListPanelHandle guestListPanelHandle, Guest... guests) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        for (int i \u003d 0; i \u003c guests.length; i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            guestListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysGuest(guests[i], guestListPanelHandle.getGuestCardHandle(i));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code guestListPanelHandle} displays the details of {@code guests} correctly and"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(GuestListPanelHandle guestListPanelHandle, List\u003cGuest\u003e guests) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(guestListPanelHandle, guests.toArray(new Guest[0]));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code guestListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(GuestListPanelHandle guestListPanelHandle, int size) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d guestListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JIaqingTan": 65,
      "adamwth": 5,
      "-": 69
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_END_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_END_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_START_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_START_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_001;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_020;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalBookingPeriods.BOOKING_PERIOD_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalBookingPeriods.BOOKING_PERIOD_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalBookingPeriods.TOMORROW_NEXTWEEK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.HOON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.IDA;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.JAKOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRoomNumbers.ROOM_NUMBER_001;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRoomNumbers.ROOM_NUMBER_020;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRoomNumbers.ROOM_NUMBER_023;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRoomNumbers.ROOM_NUMBER_024;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRoomNumbers.ROOM_NUMBER_099;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRoomNumbers.ROOM_NUMBER_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.RoomNumber;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.booking.Booking;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.booking.BookingPeriod;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.BookingBuilder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.GuestBuilder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.GuestUtil;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalBookingPeriods;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalRoomNumbers;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class AddCommandSystemTest extends ConciergeSystemTest {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: add a guest without tags to a non-empty Concierge, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest guestToAdd \u003d AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        RoomNumber roomNumberToAdd \u003d ROOM_NUMBER_AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        BookingPeriod bookingPeriodToAdd \u003d BOOKING_PERIOD_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"  \" + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"   \" + TAG_DESC_FRIEND + \" \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_AMY + \" \" + DATE_START_DESC_AMY + \" \" + DATE_END_DESC_AMY + \"   \";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, guestToAdd, roomNumberToAdd, bookingPeriodToAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addGuest(guestToAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a guest with all fields same as another guest in the"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        Concierge except name and room -\u003e added */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        guestToAdd \u003d new GuestBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        roomNumberToAdd \u003d TypicalRoomNumbers.ROOM_NUMBER_001;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        bookingPeriodToAdd \u003d TypicalBookingPeriods.BOOKING_PERIOD_AMY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + ROOM_DESC_001 + DATE_START_DESC_AMY + DATE_END_DESC_AMY;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, guestToAdd, roomNumberToAdd, bookingPeriodToAdd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: add a guest with all fields same as another guest in Concierge except phone and email"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        guestToAdd \u003d new GuestBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        roomNumberToAdd \u003d TypicalRoomNumbers.ROOM_NUMBER_011;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        bookingPeriodToAdd \u003d TypicalBookingPeriods.BOOKING_PERIOD_AMY;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d GuestUtil.getAddCommand(guestToAdd, roomNumberToAdd, bookingPeriodToAdd);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, guestToAdd, roomNumberToAdd, bookingPeriodToAdd);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: add a guest with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        guestToAdd \u003d BOB;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        roomNumberToAdd \u003d ROOM_NUMBER_020;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        bookingPeriodToAdd \u003d BOOKING_PERIOD_BOB;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                + DATE_END_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + ROOM_DESC_020"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                + DATE_START_DESC_BOB + PHONE_DESC_BOB + NAME_DESC_BOB + DATE_END_DESC_BOB;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, guestToAdd, roomNumberToAdd,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                 bookingPeriodToAdd);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: add a guest, missing tags -\u003e added */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        roomNumberToAdd \u003d ROOM_NUMBER_023;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        bookingPeriodToAdd \u003d TOMORROW_NEXTWEEK;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON, roomNumberToAdd, bookingPeriodToAdd);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: filters the guest list before adding -\u003e added */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        showGuestsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        roomNumberToAdd \u003d ROOM_NUMBER_024;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA, roomNumberToAdd, bookingPeriodToAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* ------------------------ Perform add operation while a guest card is selected --------------------------- */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: selects first card in the guest list, add a guest -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        selectGuest(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        roomNumberToAdd \u003d ROOM_NUMBER_099;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(JAKOB, roomNumberToAdd, bookingPeriodToAdd);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest validGuest \u003d new GuestBuilder().build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        RoomNumber validRoomNumber \u003d ROOM_NUMBER_001;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        BookingPeriod validBookingPeriod \u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                BookingBuilder.DEFAULT_BOOKING_PERIOD_TODAY_TOMORROW;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: add a duplicate guest -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d GuestUtil.getAddCommand(HOON, validRoomNumber, validBookingPeriod);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_GUEST);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: add a duplicate guest except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        guestToAdd \u003d new GuestBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d GuestUtil.getAddCommand(guestToAdd, validRoomNumber, validBookingPeriod);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_GUEST);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: add a duplicate guest except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        guestToAdd \u003d new GuestBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d GuestUtil.getAddCommand(guestToAdd, validRoomNumber, validBookingPeriod);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_GUEST);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: add a duplicate guest except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        guestToAdd \u003d new GuestBuilder(HOON).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d GuestUtil.getAddCommand(guestToAdd, validRoomNumber, validBookingPeriod);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_GUEST);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: add a duplicate guest except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        guestToAdd \u003d new GuestBuilder(HOON).withTags(\"friends\").build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d GuestUtil.getAddCommand(guestToAdd, validRoomNumber, validBookingPeriod);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_GUEST);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_AMY + DATE_START_DESC_AMY + DATE_END_DESC_AMY;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_AMY + DATE_START_DESC_AMY + DATE_END_DESC_AMY;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_AMY + DATE_START_DESC_AMY + DATE_END_DESC_AMY;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + GuestUtil.getAddCommand(validGuest,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                validRoomNumber, validBookingPeriod);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_AMY + ROOM_DESC_AMY"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                        + DATE_START_DESC_AMY + DATE_END_DESC_AMY;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ROOM_DESC_AMY + DATE_START_DESC_AMY"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                + DATE_END_DESC_AMY;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_EMAIL_DESC + ROOM_DESC_AMY + DATE_START_DESC_AMY"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                + DATE_END_DESC_AMY;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + INVALID_TAG_DESC + ROOM_DESC_AMY"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                + DATE_START_DESC_AMY + DATE_END_DESC_AMY;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code guestToAdd} to the"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code guestToAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code GuestListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code guestToAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Guest guestToAdd,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                                      RoomNumber roomNumberToAdd,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                                      BookingPeriod bookingPeriodToAdd) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d GuestUtil.getAddCommand(guestToAdd,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                roomNumberToAdd, bookingPeriodToAdd);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                guestToAdd, roomNumberToAdd, bookingPeriodToAdd);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Guest,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * RoomNumber, BookingPeriod)}. Executes {@code command} instead."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Guest, RoomNumber, BookingPeriod)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Guest guestToAdd,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                                       RoomNumber roomNumber, BookingPeriod bookingPeriod) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addGuest(guestToAdd);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        Booking expectedBooking \u003d new Booking(guestToAdd, bookingPeriod);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addBooking(roomNumber, expectedBooking);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, guestToAdd,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                        roomNumber, bookingPeriod);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Guest, RoomNumber, BookingPeriod)} except asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code GuestListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Guest, RoomNumber, BookingPeriod)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code GuestListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 8,
      "adamwth": 11,
      "-": 285
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class ClearCommandSystemTest extends ConciergeSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: clear non-empty Concierge, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: undo clearing Concierge -\u003e original Concierge restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: redo clearing Concierge -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: selects first card in guest list and clears Concierge -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original Concierge"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectGuest(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: filters the guest list before clearing -\u003e entire Concierge cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original Concierge"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        showGuestsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: clear empty Concierge -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 13,
      "-": 88
    }
  },
  {
    "path": "src/test/java/systemtests/ConciergeSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import static seedu.address.testutil.TypicalConcierge.getTypicalConcierge;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.GuestListPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teowz46"
        },
        "content": " * A system test class for Concierge, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public abstract class ConciergeSystemTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    protected Concierge getInitialData() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        return getTypicalConcierge();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuestListPanelHandle getGuestListPanel() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getGuestListPanel();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Displays all guests in Concierge."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllGuests() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD + \" -g\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertEquals(getModel().getConcierge().getGuestList().size(), getModel().getFilteredGuestList().size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all guests with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showGuestsWithName(String keyword) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertTrue(getModel().getFilteredGuestList().size() \u003c getModel().getConcierge().getGuestList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Selects the guest at {@code index} of the displayed list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectGuest(Index index) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getGuestListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * Deletes all guests in Concierge."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllGuests() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertEquals(0, getModel().getConcierge().getGuestList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same guest objects as {@code expectedModel}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the guest list panel displays the guests in the model correctly."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertEquals(new Concierge(expectedModel.getConcierge()), testApp.readStorageConcierge());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getGuestListPanel(), expectedModel.getFilteredGuestList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code GuestListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        getGuestListPanel().rememberSelectedGuestCard();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * of the previously selected guest."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getGuestListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the guest in the guest list panel at"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see GuestListPanelHandle#isSelectedGuestCardChanged()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        getGuestListPanel().navigateToCard(getGuestListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getGuestListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getGuestListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the guest list panel remain unchanged."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see GuestListPanelHandle#isSelectedGuestCardChanged()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getGuestListPanel().isSelectedGuestCardChanged());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getGuestListPanel(), getModel().getFilteredGuestList());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JIaqingTan"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 12,
      "JIaqingTan": 3,
      "adamwth": 5,
      "-": 250
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GUESTS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalBookingPeriods.BOOKING_PERIOD_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GUEST;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_GUEST;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRoomNumbers.ROOM_NUMBER_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adamwth"
        },
        "content": "import seedu.address.testutil.GuestBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.GuestUtil;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class EditCommandSystemTest extends ConciergeSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_GUEST;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Guest editedGuest \u003d new GuestBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertCommandSuccess(command, index, editedGuest);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: undo editing the last guest in the list -\u003e last guest restored */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: redo editing the last guest in the list -\u003e last guest edited again */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateGuest("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredGuestList().get(INDEX_FIRST_GUEST.getZeroBased()), editedGuest);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: edit a guest with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: edit a guest with new values same as another guest\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertTrue(getModel().getConcierge().getGuestList().contains(BOB));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_GUEST;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredGuestList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedGuest \u003d new GuestBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertCommandSuccess(command, index, editedGuest);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: edit a guest with new values same as another guest\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_GUEST;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedGuest \u003d new GuestBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertCommandSuccess(command, index, editedGuest);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_GUEST;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest guestToEdit \u003d getModel().getFilteredGuestList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedGuest \u003d new GuestBuilder(guestToEdit).withTags().build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertCommandSuccess(command, index, editedGuest);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: filtered guest list, edit index within bounds of Concierge and guest list -\u003e edited */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        showGuestsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_GUEST;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredGuestList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        guestToEdit \u003d getModel().getFilteredGuestList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        editedGuest \u003d new GuestBuilder(guestToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertCommandSuccess(command, index, editedGuest);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: filtered guest list, edit index within bounds of Concierge but out of bounds of guest list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        showGuestsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        int invalidIndex \u003d getModel().getConcierge().getGuestList().size();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_GUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* --------------------- Performing edit operation while a guest card is selected -------------------------- */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: selects first card in the guest list, edit a guest -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllGuests();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_GUEST;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        selectGuest(index);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        // browser\u0027s url is updated to reflect the new guest\u0027s name"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredGuestList().size() + 1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_GUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_GUEST.getOneBased(),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_GUEST.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_GUEST.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_GUEST.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_GUEST.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: edit a guest with new values same as another guest\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(GuestUtil.getAddCommand(BOB, ROOM_NUMBER_BOB, BOOKING_PERIOD_BOB));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        assertTrue(getModel().getConcierge().getGuestList().contains(BOB));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_GUEST;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredGuestList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_GUEST);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: edit a guest with new values same as another guest\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_GUEST);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: edit a guest with new values same as another guest\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_GUEST);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: edit a guest with new values same as another guest\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_GUEST);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Guest, Index)} except that"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Guest, Index)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Guest editedGuest) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedGuest, null);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the guest at index {@code toEdit} being"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * updated to values specified {@code editedGuest}.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "adamwth"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Guest editedGuest,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateGuest(expectedModel.getFilteredGuestList().get(toEdit.getZeroBased()), editedGuest);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredGuestList(PREDICATE_SHOW_ALL_GUESTS);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_GUEST_SUCCESS, editedGuest), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see ConciergeSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredGuestList(PREDICATE_SHOW_ALL_GUESTS);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 11,
      "adamwth": 30,
      "-": 247
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class ErrorDialogGuiTest extends ConciergeSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                alertDialog.getContentText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_GUESTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class FindCommandSystemTest extends ConciergeSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: find multiple guests in Concierge, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 guests found"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredGuestList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where guest list is displaying the guests we are finding"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 guests found"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: find guest where guest list is not displaying the guest we are finding -\u003e 1 guest found */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredGuestList(expectedModel, CARL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: find multiple guests in Concierge, 2 keywords -\u003e 2 guests found */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredGuestList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: find multiple guests in Concierge, 2 keywords in reversed order -\u003e 2 guests found */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: find multiple guests in Concierge, 2 keywords with 1 repeat -\u003e 2 guests found */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: find multiple guests in Concierge, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 guests found"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: find guest in Concierge, keyword is same as name but of different case -\u003e 1 guest found */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: find guest in Concierge, keyword is substring of name -\u003e 0 guests found */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredGuestList(expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: find guest in Concierge, name is substring of keyword -\u003e 0 guests found */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredGuestList(expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: find guest not in Concierge -\u003e 0 guests found */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: find phone number of guest in Concierge -\u003e 0 guests found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: find email of guest in Concierge -\u003e 0 persons found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: find tags of guest in Concierge -\u003e 0 guests found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: find while a guest is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllGuests();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        selectGuest(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getGuestListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredGuestList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: find guest in empty Concierge -\u003e 0 guests found */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllGuests();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredGuestList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_GUESTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedModel.getFilteredGuestList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 18,
      "adamwth": 2,
      "-": 161
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GUEST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class HelpCommandSystemTest extends ConciergeSystemTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getGuestListPanel().click();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_GUEST.getOneBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getGuestListPanel(), getModel().getFilteredGuestList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 1,
      "-": 95
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Predicate\u003cGuest\u003e PREDICATE_MATCHING_NO_GUESTS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Predicate\u003cRoom\u003e PREDICATE_MATCHING_NO_ROOMS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered guest list to display only {@code"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * toDisplay}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredGuestList(Model model, List\u003cGuest\u003e toDisplay) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        Optional\u003cPredicate\u003cGuest\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatchingGuest).reduce(Predicate::or);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredGuestList(predicate.orElse(PREDICATE_MATCHING_NO_GUESTS));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredGuestList(Model, List)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredGuestList(Model model, Guest... toDisplay) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredGuestList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Guest} equals to {@code other}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Predicate\u003cGuest\u003e getPredicateMatchingGuest(Guest other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return guest -\u003e guest.equals(other);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered room list to display only"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code roomsToDisplay}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredRoomList(Model model,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                                           List\u003cRoom\u003e roomsToDisplay) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPredicate\u003cRoom\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                roomsToDisplay.stream().map(ModelHelper::getPredicateMatchingRoom).reduce(Predicate::or);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredRoomList(predicate.orElse(PREDICATE_MATCHING_NO_ROOMS));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Room} equals to"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code other}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Predicate\u003cRoom\u003e getPredicateMatchingRoom(Room other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return room -\u003e room.equals(other);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adamwth": 2,
      "-": 60
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.Concierge;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.guest.Guest;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class SampleDataTest extends ConciergeSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    protected Concierge getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public void concierge_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Guest[] expectedList \u003d SampleDataUtil.getSampleGuests();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getGuestListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_GUEST_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_GUEST_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalGuests.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GUEST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teowz46"
        },
        "content": "public class SelectCommandSystemTest extends ConciergeSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: select the first card in the guest list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_GUEST.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_GUEST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: select the last card in the guest list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index guestCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + guestCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, guestCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adamwth"
        },
        "content": "        /* Case: select the middle card in the guest list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: filtered guest list, select index within bounds of Concierge but out of bounds of guest list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showGuestsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        int invalidIndex \u003d getModel().getConcierge().getGuestList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_GUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: filtered guest list, select index within bounds of Concierge and guest list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredGuestList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredGuestList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_GUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teowz46"
        },
        "content": "        /* Case: select from empty Concierge -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllGuests();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_GUEST.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_GUEST_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adamwth"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected guest.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code GuestListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see ConciergeSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_GUEST_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getGuestListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code GuestListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * {@code ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teowz46"
        },
        "content": "     * @see ConciergeSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 10,
      "adamwth": 4,
      "-": 140
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teowz46"
        },
        "content": "import seedu.address.model.ReadOnlyConcierge;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teowz46"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyConcierge\u003e concierge, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teowz46"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(concierge, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teowz46": 3,
      "-": 71
    }
  }
]
