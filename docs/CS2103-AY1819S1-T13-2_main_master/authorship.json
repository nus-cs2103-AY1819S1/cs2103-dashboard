[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d SSENISUB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-T13-2/main[image:https://travis-ci.org/CS2103-AY1819S1-T13-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://ci.appveyor.com/project/DanKhoo/main/branch/master[image:https://ci.appveyor.com/api/projects/status/pw5iprwm6q97wbo0/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-T13-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-T13-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://www.codacy.com/app/DanKhoo/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103-AY1819S1-T13-2/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/f88a4818748d488192c6ab654eb1caba[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* SSENISUB is a desktop application to assist the HR department of a company to manage its staff. On top of just assisting HR, this application also allows the staff themselves to view their workplace performance and improve themselves."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* SSENISUB also doubles as a contacts manager to allow staff to easily find the contact information of their superior or colleagues."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* Features of SSENISUB:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Allows a staff to view contact information of their superiors and coworkers."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Allow managers to rate and feedback on their staff\u0027s performance."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Allows a HR staff to upload/edit contact information."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* Original source code was adopted from https://github.com/se-edu/ (addressbook-level4)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 8,
      "DanKhoo": 5,
      "-": 28
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"githubId\": \"DanKhoo\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"displayName\": \"Daniel Khoo\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"authorNames\": [\"DanKhoo\", \"Daniel Khoo\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"githubId\": \"IamRENCE\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"displayName\": \"Terence Goh\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"authorNames\": [\"Terence Goh\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"githubId\": \"valensia0711\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"displayName\": \"Valensia Sebastiani\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"authorNames\": [\"Valensia Sebastiani\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"githubId\": \"NgeowXiuQi\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"displayName\": \"Ngeow Xiu Qi\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"authorNames\": [\"NgeowXiuQi\", \"Xiu Qi\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"githubId\": \"abtyx\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"displayName\": \"Ashburn Tan\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"authorNames\": [\"abtyx\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 30
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "SSENISUB was developed by Team https://github.com/CS2103-AY1819S1-T13-2[T13-2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Daniel Khoo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "image::dankhoo.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "{empty}[https://github.com/DanKhoo[github]] [https://dankhoo.github.io/[portfolio]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Valensia Sebastiani"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "image::valensia0711.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "{empty}[https://github.com/valensia0711[github]] [\u003c\u003cvalensia#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Terence Goh"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "image::iamrence.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "{empty}[https://github.com/IamRENCE[github]] [\u003c\u003cterence#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Ngeow Xiu Qi"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "image::ngeowxiuqi.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "{empty}[https://github.com/NgeowXiuQi[github]] [\u003c\u003cxiuqi#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Ashburn Tan"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "image::abtyx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "{empty}[https://github.com/abtyx[github]] [\u003c\u003cashburn#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 19,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-T13-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Email us* : You can also reach us at `e0254012 [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d SSENISUB - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T13-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "By: `Team T13-2`      Since: `Oct 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a staff) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th staff in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new staff. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Step 4. The user now decides that adding the staff was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the staff being deleted)."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "// tag::ratecommand[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d\u003d\u003d Rate command feature"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "We have implemented a rate command feature as an enhancement, which focuses on the `Logic` component."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "A `Rating` class is implemented to support this, which the `Person` class is dependent on. This command"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "allows users, especially for managers to update ratings of employees within an organisation."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "This command differs from the add and edit command, because users cannot simply add an employee with a rating through"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "the add command or edit an employee\u0027s rating through the edit command."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Any updates to an employee\u0027s rating should only"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "be done by a *person of authority*, i.e. `Manager`."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "The rate command, as mentioned, executes asynchronous to the add and edit command. Upon adding an employee, a `Rating.DEFAULT_INITIAL_RATING`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "with a default value of 0, is initialised on the `Person` and then saved."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "There are 2 validation regular expressions found in the `Rating` class:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* `VALIDATION_REGEX` which checks for integer values from 0 - 10 of `Rating` which have already been added. 0 is included"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "as there may be a case when a `Person` has already been added but his/her `Rating` has yet to be updated."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* `VALIDATION_INPUT_REGEX` which checks for integer values from 1 - 10 of \u0027Rating\u0027 to be added by users with the rate"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "command."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Given below is a sequence diagram shows how the rate operation works:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "image::RateSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "// end::ratecommand[]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "abtyx"
        },
        "content": "// tag::privacycommand[]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d\u003d\u003d Privacy Feature"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "abtyx"
        },
        "content": "We have implemented a privacy feature to fields that we deem to have importance in having an option to be"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "abtyx"
        },
        "content": "made private. A Privacy Command is implemented to be able to toggle the privacy value of the information of"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "abtyx"
        },
        "content": "the selected person."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "abtyx"
        },
        "content": "The privacy feature is currently implemented as a boolean field under information classes that can be made private"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "abtyx"
        },
        "content": "(Phone, Email, Address as of v1.2)."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "abtyx"
        },
        "content": "A new command PrivacyCommand is implemented to be able to toggle the boolean values of classes that have a Privacy field."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "abtyx"
        },
        "content": "The add command can also add a Person with private field directly."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "abtyx"
        },
        "content": "The UI will also display private fields as private."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "abtyx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "abtyx"
        },
        "content": "This command can only change fields that can be made private, and will throw an exception otherwise."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "abtyx"
        },
        "content": "To change a field to private or not private, a \u0027y\u0027 or \u0027n\u0027 is the expected input respectively. This is planned to"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "abtyx"
        },
        "content": "change in future updates where there can be different levels of privacy for different fields."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "abtyx"
        },
        "content": "Given below is an activity diagram that shows how the Privacy command works:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "abtyx"
        },
        "content": "image::PrivacyCommandActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d How to implement Privacy"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* **Alternative 1 (current choice):** Use privacy as a boolean value"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "abtyx"
        },
        "content": "** Pros: Easy to implement as there is only 2 values to take note off"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "abtyx"
        },
        "content": "** Cons: Restrictive in what it can do looking at a future aspect where different level of privacy may be required"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* **Alternative 2:** Implement Privacy as a Enum class"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "abtyx"
        },
        "content": "** Pros: Able to have different level of Privacy and prevents wrong input automatically"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "abtyx"
        },
        "content": "** Cons: Harder to implement and extra work not required in current stage of project"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "abtyx"
        },
        "content": "// end::privacycommand[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// tag::addcommand[]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Add Feature"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "The `add` command allows HR users to add staff into SSENISSUB. It will ensure that there will be no duplicate with"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "any existing staff."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "The following sequence diagram shows the sequence flow from the `LogicManager` to the `ModelManager` when a HR user"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "enter a `add` command:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "image::AddSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Figure 3.4.1.1 Sequence Diagram for `add` command"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "From the sequence diagram:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "1. When `Logic Manager` receives the `execute` command from the app, it calls the parseCommand method in"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "`AddressBookParser`."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "2. `AddressBookParser` will receive add as the command and instantiate `AddCommandParser` to parse the rest of the"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "command."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "3. If the arguments specified are valid, a `AddCommand` would be created and returned by to the `LogicManager`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "4. `LogicManager` would proceed to call `execute` of the `AddCommand`."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "5. A new staff would be added and a successful `CommandResult` would be returned and displayed."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "SSENISSUB\u0027s staff is stored with name, phone, email address, home address, department, manager name and can"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "be search and listed only with names."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "All fields are checked against respective validations with each model. If the provided command either does not have"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "any field, or field with invalid input, a `ParseException` would be thrown."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of `AddCommandParser`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* ** Alternative 1 (current choice):** `add` is parsed first, then the rest of the arguments as `AddCommandParser`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Pros: Better modularization for commands"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Cons: More classes will be needed \u003d more code to be written"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* ** Alternative 2:** `add` is parsed straight from `AddressBookParser`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Pros: Reduces the number of classes needed \u003d less code to be written"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Cons: Poor modularization for commands"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// end::addcommand[]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::unlockcommand[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Unlock Feature"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "We have implemented an unlock command that focuses on the `Storage` component. An `UnlockCommand` class is added"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "and an `UnlockEvent` event is also added."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "The `unlock` command allows changes made to be saved to the address book."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Without the correct (for now hardcoded) password, all the changes made (add, edit, delete)during the session"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "will not be saved and will not be shown once the window is closed and reopened."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "The following activity diagram shows how the current `Unlock` command works:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "image::UnlockActivityDiagram.png[height\u003d\"650\"]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Figure 3.8.2.1 Activity Diagram for `unlock` command"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of unlock"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 1 (current choice):** Unlocking is handled as an event rather than a command."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Unlocking can be done at any time and event handler is used"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Does not resemble a real unlocking function, minimal functionality"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 2:** Unlocking is a command that overrides all other commands"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Makes more sense as an unlock function"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Harder to implement"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::unlockcommand[]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "//tag::Salary, OT Hours, OT Rate and Pay Deductibles For Staff[]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "\u003d\u003d\u003d Salary, OT Hours, OT Rate and Pay Deductibles For Staff"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "\u003d\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "We have introduced four new fields to a staff namely the salary, overtime(OT) hours, OT rate and Pay deductibles"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "for a staff. This is to allow the HR department of the company to keep track of individual staff\u0027s details."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "The current implementation of this feature is embedded into a Person object together with the other information"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "that was originally in the Person object. Prefixes for the respective fields were also created to allow the HR user"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "to edit the necessary information whenever needed."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "A newly added staff into SSENISUB would be assigned the default values of 0 for all four fields. This is to better"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "allow the HR staff to manage the information of the staff. Naturally, when a person first joins the company, he would"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "not have raked up any OT hours and the rate is dependent on the job of the individual."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Should the user now want to edit a staff\u0027s salary, OT hours, OT rate or pay deductibles, the user can now simply"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "input the prefixes followed by the numerals of each field to edit in the edit command. The fields would then be"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "edited depending if the prefixes were there or not (similar to the edit command)."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* ** Alternative 1 (First Implementation):** Merging the OT hours, OT rate and pay deductibles within a Salary class"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Pros: Easier to calculate net pay"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Cons: Harder to implement and would result in many conflicts within the software itself. Harder to debug"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "image::FirstImplementation.png[height\u003d\"450\"]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Figure 3.9.3.1 Idea of First Implementation"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* **Alternative 2 (Current Implementation):** Separating out each field to their own classes"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Pros: Easier to implement and allows for more flexibility if the fields are required to be computed/used for other"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " information, easier to identify issues when something goes wrong"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Cons: Does not seem intuitive to separate it out since OT hours, OT rate and pay deductibles are used to compute salary"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "image::SecondImplementation.png[height\u003d\"450\"]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Figure 3.9.3.2 Idea of Second Implementation"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "// end::Salary, OT Hours, OT Rate and Pay Deductibles For Staff[]"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all staff in the list."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each staff, and remove the `tag` from each staff."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* For organisations to maintain a hierarchical form of managing manpower within the organisation itself"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* Has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* Prefer desktop apps over other types"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* Prefers typing over mouse input"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*Value proposition*: This software allows the organisation to manage their staff and details, improving work productivity."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "| Priority | As a ... | I want to be able to …                                                                                         | So that I can ...                                                        |"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Staff    | Log in                                                                                                         | Access the system                                                         |"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Staff    | Log out                                                                                                        | Safely log out of the system and prevent others from accessing my account |"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Staff    | Edit my profile                                                                                                | Update personal information                                               |"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Staff    | See a help page                                                                                                | Know what is the functionality of the software                            |"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Staff    | Have my personal information set to private                                                                    | Continue working in peace                                                 |"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Staff    | View current personal ratings and feedbacks                                                                    | Improve myself to work better                                             |"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Staff    | Find staff by name                                                                                             | I can find his/her contact information                                    |"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * *       | Staff    | Undo my last command                                                                                           | I can undo my mistakes                                                    |"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " *        | Staff    | View past personal ratings and feedbacks                                                                       | Look at my progress performance                                           |"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " *        | Staff    | Be able to give my manager feedback                                                                            | Allow my manager to improve on himself/herself                            |"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " *        | Staff    | Receive an email if rating fall before average                                                                 | Track my work progress and set reminder to myself to work harder          |"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " *        | Staff    | Set a rating goal                                                                                              | Strive to work harder to hit my promotion                                 |"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " *        | Staff    | Change command keywords                                                                                        | Use words i prefer                                                        |"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " *        | Staff    | Upload a display picture                                                                                       | Allow other users of the system to identify who I am                      |"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " *        | Staff    | Arrange for meetings with other staff                                                                          | Discuss project details with the other core members                       |"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | HR User  | Add a new staff                                                                                                | Update the organisation’s structure appropriately                         |"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | HR User  | Delete a staff                                                                                                 | Remove entries that no longer work here                                   |"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | HR User  | Edit staff details                                                                                             | Update the staff position if he/she is promoted                           |"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * *       | HR User  | Have different authorization settings for people                                                               | Staff can only use commands they should be able to                    |"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | HR User  | Allocate staff to a department                                                                                 | Manage the manpower within the organization                               |"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | HR User  | Allocate staff to a manager                                                                                    | Manage staff to manager                                                   |"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * *       | HR User  | Set a salary for a staff                                                                                   | Maintain a record of the staff’s payroll                               |"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * *       | HR User  | Know the number of staff in each department                                                                    | Plan for activities                                                       |"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Manager  | Be able to look for a particular staff information from a particular department                                | Search a list of contacts by tags                                         |"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Manager  | Be able to list the staff                                                                                      | View all the staff under my supervision                                   |"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * *       | Manager  | Set work ratings \u0026 feedback for certain staff                                                                  | Evaluate the staff under me                                           |"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * *       | Manager  | Update work ratings \u0026 feedback for certain staff                                                               | Edit the staff’s rating under me                                       |"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * *       | Manager  | Sort by ratings                                                                                                | Reward the highly rated performers and identify the weaker ones           |"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * *       | Manager  | Search by staff tags                                                                                        | Find the people I require more conveniently                               |"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " *        | Manager  | Receive notification to rate staff                                                                             | Remember to rate my staff and give timely feedback                        |"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " *        | Manager  | Receive notification of staff whose rating falls below average for 3 months consecutively under my supervision | Better manage my staff and find out if they need any help             |"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: delete person"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "\u003d\u003d\u003d Use case: view personal ratings"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "1. Staff logs into SSENISUB"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "2. Staff inputs keyword to view his own ratings"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "3. SSENISUB displays the current user’s ratings and feedback (if any)"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "\u003d\u003d\u003d Use case: view help page"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "1. A user logs into SSENISUB"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "2. User keys in the keyword to display the help page"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "3. SSENISUB displays the help page"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "\u003d\u003d\u003d Use case: undo last action"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "1. User does some action on SSENISUB"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "2. User enters the command to undo the last action made"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "3. SSENISUB undo last action and tells user that previous action has been undone"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: edit a staff information"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "1. HR staff logs in to SSENISUB"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "2. HR staff searches for the staff to edit and selects it"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "3. HR staff makes the necessary changes to the staff"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "4. SSENISUB confirms with the HR staff the changes"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "5. HR staff confirms and the changes are made"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* 2a.  No staff are being displayed by SSENISUB"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: search for staff"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "1. Staff logs in to SSENISUB"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "2. Staff inputs the keyword to search followed by certain keywords pertaining to the staff."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "3. SSENISUB displays the list of staff that matches the keywords supplied."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* 3a. SSENISUB shows no staff with the matching keywords"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: add staff"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "1. HR staff logs in to SSENISUB"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "2. HR staff adds the staff details into SSENISUB"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "3. SSENISUB shows success details of the add"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* 1b. User inputs wrong login information, receives warning"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* 2b. Staff details already exists, receives a warning"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** 2c. User does not have authorization to add staff, receives warning"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Information of User gets sent to higher up in charge"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: rate staff"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "1. Manager logs in to SSENISUB"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "2. Manager requests to look for staff"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "3. SSENISUB shows a list of staff"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "4. Manager requests to update review of a particular staff"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "5. SSENISUB updates review of staff"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* 3a. The list is empty, receives warning"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends     "
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* 4a. The given index is invalid, SSENISUB shows an error message"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: remove staff"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "1. HR staff logs in to SSENISUB"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "2. HR staff searches for the particular staff to remove"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "3. HR inputs command to remove the staff"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "4. SSENISUB confirms with the HR staff before removing the staff"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "5. SSENISUB removes the staff and displays a success message"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* 3a. The staff cannot be found"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: set staff’ feedback"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "1. Manager logs into SSENISUB"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "2. Manager searches for a staff"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "3. SSENISUB shows the user the staff and the manager selects the staff"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "4. Manager enters feedback for the staff and submits the feedback"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "5. SSENISUB displays the feedback made and stores it"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* 3a. The staff cannot be found"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: sort ratings of staff"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "1. Manager logs into SSENISUB"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "2. Manager displays all staff under him/her"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "3. Manager inputs the command to sort the staff by their ratings"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "4. SSENISUB sorts the staff by the user’s preference and displays"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* 2a. SSENISUB does not show any staff under the user"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".  Should be able to hold up to 100,000 staff without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ".  Should have a customizable personalized interface."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ". Should be able to change font size."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Deleting a staff"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ". Deleting a staff while all staff are listed"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".. Prerequisites: List all staff using the `list` command. Multiple staff in the list."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "   Expected: No staff is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 87,
      "IamRENCE": 32,
      "NgeowXiuQi": 214,
      "abtyx": 41,
      "DanKhoo": 44,
      "-": 908
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d SSENISUB - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "By: `Team T13-2`      Since: `Oct 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "SSENISUB is intended for organizations who follows a strict hierarchical structure to manage their manpower and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "allows the staff to use this as contact book. Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ".  Download the latest `SSENISUB.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for the SSENISUB software."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *`list`* : lists all staff"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 d/Accounting m/Alice Tan` :"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "adds a staff named `John Doe` to SSENISUB."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* **`delete`**`3` : deletes the 3rd staff shown in the current list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "`{nbsp}` (i.e. 0 times), `t/staff`, `t/manager` etc."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* Adding a \u0027p\u0027 infront of the parameter private. e.g. pp/PHONE makes the phone number private to the other user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Adding a staff: `add`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Adds a staff to the SSENISUB +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Format: `add n/NAME [p]p/PHONE_NUMBER [p]e/EMAIL [p]a/ADDRESS d/DEPARTMENT m/MANAGER [t/TAG]...`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "A staff can have any number of tags (including 0)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 d/Accounting m/Marcus Lim t/staff`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 d/Marketing m/Edmund Tan t/staff`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Listing all staff : `list`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Shows a list of all staff in SSENISUB. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Editing a staff : `edit`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Edits an existing staff in SSENISUB. +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [s/SALARY] [oth/OTHOUR] [otr/OTRATE] [de/DEDUCTIBLES] [d/DEPARTMENT] [m/MANAGER] [t/TAG]...`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Edits the staff at the specified `INDEX`. The index refers to the index number shown in the displayed staff list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* When editing tags, the existing tags of the staff will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* You can remove all the staff\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com s/1000` +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Edits the phone number, email address, salary of the 1st staff to be `91234567`, `johndoe@example.com` and `1000`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "respectively."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Edits the name of the 2nd staff to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Rating a staff: `rate`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Rates an existing staff in SSENISUB +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Format: `rate INDEX r/8`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* `rate 3 r/8` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Rate the 3rd staff of a rating 8."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Locating staff by name: `find`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Finds staff whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Staff matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Returns any staff having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Deleting a staff : `delete`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Deletes the specified staff from SSENISUB. +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Deletes the staff at the specified `INDEX`."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The index refers to the index number shown in the displayed staff list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Deletes the 2nd staff in SSENISUB."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Deletes the 1st staff in the results of the `find` command."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Selecting a staff : `select`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Selects the staff identified by the index number used in the displayed staff list. +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Selects the staff and loads the Google search page the staff at the specified `INDEX`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The index refers to the index number shown in the displayed staff list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Selects the 2nd staff in SSENISUB."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Selects the 1st staff in the results of the `find` command."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Restores SSENISUB to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Undoable commands: those commands that modify SSENISUB\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Clears all entries from SSENISUB. +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Locking SSENISUB: `lock`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Locks the SSENISUB with a specified password. +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Format: `lock PASSWORD`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Unlocking SSENISUB: `unlock`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Unlocks the SSENISUB with a specified password. +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Format: `unlock PASSWORD`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "SSENISUB data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Add* `add n/NAME [p]p/PHONE_NUMBER [p]e/EMAIL [p]a/ADDRESS d/DEPARTMENT m/MANAGER [t/TAG]...` +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 d/Accounting m/David Choo t/staff`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [s/SALARY] [oth/OTHOUR] [otr/OTRATE] [de/DEDUCTIBLES] [d/DEPARTMENT] [m/MANAGER] [t/TAG].."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ".` +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com oth/10`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Feedback* : `feedback INDEX [f/FEEDBACK]` +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "e.g. `feedback 1 f/Excellent`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Rate* : `rate INDEX [r/RATING]` +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "e.g. `rate 1 r/8`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Sort* : `sort [KEYWORD]` +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "e.g. `sort ASCENDING`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Delete All* : `deleteall`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Lock SSENISUB* : `lock PASSWORD`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Unlock SSENISUB* : `unlock PASSWORD`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 33,
      "NgeowXiuQi": 3,
      "DanKhoo": 48,
      "-": 212
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private String appTitle \u003d \"SSENISUB\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MANAGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + PREFIX_DEPARTMENT + \"DEPARTMENT \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + PREFIX_MANAGER + \"MANAGER \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + PREFIX_DEPARTMENT + \"Accounting \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + PREFIX_MANAGER + \"Ben Leong \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + PREFIX_TAG + \"staff \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 7,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEDUCTIBLES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MANAGER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTHOUR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTRATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtHour;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtRate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.PayDeductibles;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"[\" + PREFIX_DEPARTMENT + \"DEPARTMENT] \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"[\" + PREFIX_MANAGER + \"MANAGER] \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            + \"[\" + PREFIX_SALARY + \"SALARY]\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            + \"[\" + PREFIX_OTHOUR + \"OT HOUR]\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            + \"[\" + PREFIX_OTRATE + \"OT RATE]\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            + \"[\" + PREFIX_DEDUCTIBLES + \"DEDUCTIBLES]\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Salary updatedSalary \u003d editPersonDescriptor.getSalary().orElse(personToEdit.getSalary());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        OtHour updatedHours \u003d editPersonDescriptor.getHours().orElse(personToEdit.getOtHours());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        OtRate updatedRate \u003d editPersonDescriptor.getRate().orElse(personToEdit.getOtRate());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        PayDeductibles updatedDeductibles \u003d editPersonDescriptor.getDeductibles().orElse(personToEdit.getDeductibles());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Rating updatedRating \u003d editPersonDescriptor.getRating().orElse(personToEdit.getRating());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Department updatedDepartment \u003d editPersonDescriptor.getDepartment().orElse(personToEdit.getDepartment());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Manager updatedManager \u003d editPersonDescriptor.getManager().orElse(personToEdit.getManager());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRating, updatedDepartment,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                updatedManager, updatedSalary, updatedHours, updatedRate, updatedDeductibles, updatedTags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        private Salary salary;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        private OtHour hours;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        private OtRate rate;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        private PayDeductibles deductibles;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        private Rating rating;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        private Department department;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        private Manager manager;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            setSalary(toCopy.salary);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            setHours(toCopy.hours);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            setRate(toCopy.rate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            setDeductibles(toCopy.deductibles);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            setRating(toCopy.rating);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            setDepartment(toCopy.department);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            setManager(toCopy.manager);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, department, manager,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "              salary, hours, rate, deductibles, tags);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        public void setSalary(Salary salary) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            this.salary \u003d salary;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        public Optional\u003cSalary\u003e getSalary() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            return Optional.ofNullable(salary);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        public void setHours(OtHour hours) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            this.hours \u003d hours;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        public Optional\u003cOtHour\u003e getHours() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            return Optional.ofNullable(hours);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        public void setRate(OtRate rate) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            this.rate \u003d rate;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        public Optional\u003cOtRate\u003e getRate() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            return Optional.ofNullable(rate);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        public void setDeductibles(PayDeductibles deductibles) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            this.deductibles \u003d deductibles;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        public Optional\u003cPayDeductibles\u003e getDeductibles() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            return Optional.ofNullable(deductibles);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        public void setRating(Rating rating) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            this.rating \u003d rating;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        public Optional\u003cRating\u003e getRating() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            return Optional.ofNullable(rating);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        public void setDepartment(Department department) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            this.department \u003d department;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        public Optional\u003cDepartment\u003e getDepartment() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            return Optional.ofNullable(department);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        public void setManager(Manager manager) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            this.manager \u003d manager;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        public Optional\u003cManager\u003e getManager() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            return Optional.ofNullable(manager);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    \u0026\u0026 getSalary().equals(e.getSalary())"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    \u0026\u0026 getHours().equals(e.getHours())"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    \u0026\u0026 getRate().equals(e.getRate())"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    \u0026\u0026 getDeductibles().equals(e.getDeductibles())"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    \u0026\u0026 getRating().equals(e.getRating())"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    \u0026\u0026 getDepartment().equals(e.getDepartment())"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    \u0026\u0026 getManager().equals(e.getManager())"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 64,
      "IamRENCE": 13,
      "DanKhoo": 31,
      "-": 226
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class RateCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rate\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Rates the person identified \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"by the index number used in the displayed person list from 1 to 10. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"[\" + PREFIX_RATING + \"RATING]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"r/5\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String MESSAGE_RATING_PERSON_SUCCESS \u003d \"Rate updated for Person: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String MESSAGE_RATING_UNCHANGED \u003d \"This person already has this rating.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @param rating of the person to edit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public RateCommand(Index index, Rating rating) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (personToEdit.getRating().equals(rating)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new CommandException(MESSAGE_RATING_UNCHANGED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                personToEdit.getAddress(), rating, personToEdit.getDepartment(), personToEdit.getManager(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                personToEdit.getSalary(), personToEdit.getOtHours(), personToEdit.getOtRate(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                personToEdit.getDeductibles(), personToEdit.getTags());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_RATING_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                || (other instanceof RateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                \u0026\u0026 index.equals(((RateCommand) other).index)); // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 78,
      "NgeowXiuQi": 2,
      "DanKhoo": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MANAGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIVATE_ADDRESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIVATE_EMAIL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIVATE_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtHour;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtRate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.PayDeductibles;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PRIVATE_PHONE, PREFIX_PHONE, PREFIX_PRIVATE_EMAIL,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                        PREFIX_EMAIL, PREFIX_PRIVATE_ADDRESS, PREFIX_ADDRESS, PREFIX_DEPARTMENT, PREFIX_MANAGER,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                        PREFIX_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        /*        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                PREFIX_DEPARTMENT, PREFIX_MANAGER)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                     throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            wrongFormat();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            wrongFormat();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PRIVATE_PHONE) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_PHONE)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            wrongFormat();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PRIVATE_ADDRESS)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_ADDRESS)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            wrongFormat();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PRIVATE_EMAIL) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_EMAIL)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            wrongFormat();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DEPARTMENT)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            wrongFormat();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MANAGER)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            wrongFormat();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Phone phone;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_PRIVATE_PHONE)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PRIVATE_PHONE).get());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            phone.setPrivate(\"Y\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Email email;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_PRIVATE_EMAIL)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_PRIVATE_EMAIL).get());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            email.setPrivate(\"Y\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Address address;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_PRIVATE_ADDRESS)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_PRIVATE_ADDRESS).get());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            address.setPrivate(\"Y\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Rating rating \u003d Rating.DEFAULT_INITIAL_RATING;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Salary salary \u003d Salary.DEFAULT_INITIAL_SALARY;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        OtHour hours \u003d OtHour.DEFAULT_INITIAL_OTHOUR;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        OtRate rate \u003d OtRate.DEFAULT_INITIAL_OTRATE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        PayDeductibles deductibles \u003d PayDeductibles.DEFAULT_INITIAL_DEDUCTIBLES;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Department department \u003d ParserUtil.parseDepartment(argMultimap.getValue(PREFIX_DEPARTMENT).get());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Manager manager \u003d ParserUtil.parseManager(argMultimap.getValue(PREFIX_MANAGER).get());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, rating, department, manager,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            salary, hours, rate, deductibles, tagList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Throws a ParseException to tell user that the command format was entered wrongly."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static void wrongFormat() throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 10,
      "IamRENCE": 2,
      "abtyx": 63,
      "DanKhoo": 7,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.RateCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        case RateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            return new RateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 4,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final Prefix PREFIX_PRIVATE_PHONE \u003d new Prefix(\"pp/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final Prefix PREFIX_PRIVATE_EMAIL \u003d new Prefix(\"pe/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final Prefix PREFIX_PRIVATE_ADDRESS \u003d new Prefix(\"pa/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final Prefix PREFIX_DEPARTMENT \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final Prefix PREFIX_MANAGER \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final Prefix PREFIX_SALARY \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final Prefix PREFIX_OTHOUR \u003d new Prefix(\"oth/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final Prefix PREFIX_OTRATE \u003d new Prefix(\"otr/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final Prefix PREFIX_DEDUCTIBLES \u003d new Prefix(\"de/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "NgeowXiuQi": 5,
      "abtyx": 3,
      "DanKhoo": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEDUCTIBLES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MANAGER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTHOUR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTRATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                        PREFIX_RATING, PREFIX_DEPARTMENT, PREFIX_MANAGER, PREFIX_SALARY, PREFIX_OTHOUR,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                        PREFIX_OTRATE, PREFIX_DEDUCTIBLES, PREFIX_TAG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SALARY).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            editPersonDescriptor.setSalary(ParserUtil.parseSalary(argMultimap.getValue(PREFIX_SALARY).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OTHOUR).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            editPersonDescriptor.setHours(ParserUtil.parseHours(argMultimap.getValue(PREFIX_OTHOUR).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OTRATE).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            editPersonDescriptor.setRate(ParserUtil.parseRate(argMultimap.getValue(PREFIX_OTRATE).get()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEDUCTIBLES).isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            editPersonDescriptor.setDeductibles(ParserUtil.parseDeductibles(argMultimap"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .getValue(PREFIX_DEDUCTIBLES).get()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            editPersonDescriptor.setRating(ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEPARTMENT).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            editPersonDescriptor.setDepartment(ParserUtil.parseDepartment(argMultimap.getValue(PREFIX_DEPARTMENT)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MANAGER).isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            editPersonDescriptor.setManager(ParserUtil.parseManager(argMultimap.getValue(PREFIX_MANAGER).get()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 20,
      "IamRENCE": 5,
      "DanKhoo": 8,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtHour;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtRate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.PayDeductibles;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Parses a (@code String salary) into an (@code Salary)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @param salary"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @return A salary object after trimming."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static Salary parseSalary(String salary) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        requireNonNull(salary);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String trimmedSalary \u003d salary.trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (!Salary.isValidSalary(trimmedSalary)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            throw new ParseException(Salary.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return new Salary(trimmedSalary);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Parses a (@code String hours) into an (@code OtHour)."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @param hours"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @return An OtHour object after trimming."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static OtHour parseHours(String hours) throws ParseException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        requireNonNull(hours);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String trimmedHours \u003d hours.trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (!OtHour.isValidTwoDecimalNumber(trimmedHours)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            throw new ParseException(OtHour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return new OtHour(trimmedHours);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Parses a (@code String rate) into an (@code OtRate)."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @param rate"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @return An OtRate object after trimming."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static OtRate parseRate(String rate) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        requireNonNull(rate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String trimmedRate \u003d rate.trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (!OtRate.isValidTwoDecimalNumber(trimmedRate)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            throw new ParseException(OtRate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return new OtRate(trimmedRate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Parses a (@code String deductibles) into an (@code PayDeductibles)."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @param deductibles"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @return A PayDeductibles object after trimming."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static PayDeductibles parseDeductibles(String deductibles) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        requireNonNull(deductibles);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String trimmedDeductibles \u003d deductibles.trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (!PayDeductibles.isValidTwoDecimalNumber(trimmedDeductibles)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            throw new ParseException(PayDeductibles.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return new PayDeductibles(trimmedDeductibles);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Parses a {@code String department} into an {@code Department}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Leading and trailing whitespaces wil be trimmed."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * @throws ParseException if the given {@code department} is invalid."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static Department parseDepartment(String department) throws ParseException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        requireNonNull(department);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String trimmedDepartment \u003d department.trim();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (!Department.isValidDepartment(trimmedDepartment)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            throw new ParseException(Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return new Department(trimmedDepartment);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Parses a {@code String manager} into an {@code Manager}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Leading and trailing whitespaces wil be trimmed."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * @throws ParseException if the given {@code manager} is invalid."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static Manager parseManager(String manager) throws ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        requireNonNull(manager);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String trimmedManager \u003d manager.trim();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (!Manager.isValidManager(trimmedManager)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            throw new ParseException(Manager.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return new Manager(trimmedManager);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Parses a {@code String rating} into a {@code Rating}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @throws ParseException if the given {@code rating} is invalid."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static Rating parseRating(String rating) throws ParseException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String trimmedRating \u003d rating.trim();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (!Rating.isValidInputRating(trimmedRating)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new ParseException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return new Rating(trimmedRating);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 75,
      "IamRENCE": 16,
      "DanKhoo": 29,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RateCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.RateCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class RateCommandParser implements Parser\u003cRateCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public RateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_RATING);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String rating;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (!isPrefixPresent(argMultimap, PREFIX_RATING) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        rating \u003d argMultimap.getValue(PREFIX_RATING).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return new RateCommand(index, new Rating(rating));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Returns true if prefix does not contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static boolean isPrefixPresent(ArgumentMultimap argumentMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return argumentMultimap.getValue(prefix).isPresent();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        isPrivate \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Getter for isPrivate"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @return isPrivate"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Sets the isPrivate field to true or false depending on input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @param input a \"Y\" or \"N\" for Yes or No."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void setPrivate(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (input.equals(\"Y\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            isPrivate \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else if (input.equals(\"N\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            isPrivate \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abtyx": 21,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Department.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Represents a Person\u0027s department in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDepartment(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class Department {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            \"Departments should only contain alphabetic characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * The first character of the department must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Constructs a {@code Department}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * @param department A valid department."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public Department(String department) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        requireNonNull(department);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        checkArgument(isValidDepartment(department), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        value \u003d department;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Returns true if a given string is a valid department."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static boolean isValidDepartment(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                || (other instanceof Department // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 value.equals(((Department) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        isPrivate \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Getter for isPrivate"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @return isPrivate"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Sets the isPrivate field to true or false depending on input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @param input a \"Y\" or \"N\" for Yes or No."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void setPrivate(String input) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (input.equals(\"Y\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            isPrivate \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else if (input.equals(\"N\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            isPrivate \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abtyx": 21,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Manager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Represents a Person\u0027s manager in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidManager(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class Manager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            \"Managers should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * The first character of the manager must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public Manager(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        checkArgument(isValidManager(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static boolean isValidManager(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                || (other instanceof Manager // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 fullName.equals(((Manager) other).fullName)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/OtHour.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * OtHour class to store the necessary information about overtime hours"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "public class OtHour {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final OtHour DEFAULT_INITIAL_OTHOUR \u003d new OtHour(\"0\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \"Overtime hours should only contain numbers up to two decimal places \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "          + \"with no spaces or commas. Decimal places allowed\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String TWO_DECIMAL_DIGITS_VALIDATION_REGEX \u003d \"^\\\\d+(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public final String overTimeHour;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public OtHour(String value) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        checkArgument(isValidTwoDecimalNumber(value));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        overTimeHour \u003d value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static boolean isValidTwoDecimalNumber(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return test.matches(TWO_DECIMAL_DIGITS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return overTimeHour;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            || (other instanceof OtHour // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            \u0026\u0026 overTimeHour.equals(((OtHour) other).overTimeHour)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/OtRate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * OtRate class to store the necessary information about overtime rate"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "public class OtRate {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final OtRate DEFAULT_INITIAL_OTRATE \u003d new OtRate(\"0\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \"Overtime hours should only contain numbers up to two decimal places \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        + \"with no spaces or commas. Decimal places allowed\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String TWO_DECIMAL_DIGITS_VALIDATION_REGEX \u003d \"^\\\\d+(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public final String overTimeRate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public OtRate(String value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        checkArgument(isValidTwoDecimalNumber(value));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        overTimeRate \u003d value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static boolean isValidTwoDecimalNumber(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return test.matches(TWO_DECIMAL_DIGITS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return overTimeRate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            || (other instanceof OtRate // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            \u0026\u0026 overTimeRate.equals(((OtRate) other).overTimeRate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PayDeductibles.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * PayDeductibles class to store the necessary information about Pay Deductibles"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "public class PayDeductibles {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final PayDeductibles DEFAULT_INITIAL_DEDUCTIBLES \u003d new PayDeductibles(\"0\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \"Overtime hours should only contain numbers up to two decimal places \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        + \"with no spaces or commas. Decimal places allowed\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String TWO_DECIMAL_DIGITS_VALIDATION_REGEX \u003d \"^\\\\d+(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public final String payDeductibles;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public PayDeductibles(String value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        checkArgument(isValidTwoDecimalNumber(value));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        payDeductibles \u003d value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static boolean isValidTwoDecimalNumber(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return test.matches(TWO_DECIMAL_DIGITS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return payDeductibles;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            || (other instanceof PayDeductibles // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            \u0026\u0026 payDeductibles.equals(((PayDeductibles) other).payDeductibles)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    //"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final Department department;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final Manager manager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private final Salary salary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private final OtHour otHours;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private final OtRate otRate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private final PayDeductibles deductibles;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Rating rating, Department department,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                  Manager manager, Salary salary, OtHour hours, OtRate rate,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                  PayDeductibles deductibles, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        requireAllNonNull(name, phone, email, address, rating, department, manager, tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.salary \u003d salary;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.otHours \u003d hours;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.otRate \u003d rate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.deductibles \u003d deductibles;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.manager \u003d manager;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public Salary getSalary() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return salary;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public OtHour getOtHours() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return otHours;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public OtRate getOtRate() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return otRate;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public PayDeductibles getDeductibles() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return deductibles;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Rating getRating() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public Department getDepartment() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return department;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public Manager getManager() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return manager;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                \u0026\u0026 otherPerson.getSalary().equals(getSalary())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                \u0026\u0026 otherPerson.getOtHours().equals(getOtHours())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                \u0026\u0026 otherPerson.getOtRate().equals(getOtRate())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                \u0026\u0026 otherPerson.getDeductibles().equals(getDeductibles())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                \u0026\u0026 otherPerson.getRating().equals(getRating())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 otherPerson.getDepartment().equals(getDepartment())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 otherPerson.getManager().equals(getManager())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return Objects.hash(name, phone, email, address, rating, department, manager, tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .append(\" Salary: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .append(getSalary())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .append(\" OT Hours: \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .append(getOtHours())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .append(\" OT Rate: \")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .append(getOtRate())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .append(\" Deductibles: \")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .append(getDeductibles())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                .append(\" Rating: \")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                .append(getRating())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                .append(\" Department: \")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                .append(getDepartment())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                .append(\" Manager: \")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                .append(getManager())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 40,
      "IamRENCE": 9,
      "abtyx": 1,
      "DanKhoo": 19,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        isPrivate \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Getter for isPrivate"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @return isPrivate"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Sets the isPrivate field to true or false depending on input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @param input a \"Y\" or \"N\" for Yes or No."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void setPrivate(String input) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (input.equals(\"Y\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            isPrivate \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else if (input.equals(\"N\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            isPrivate \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abtyx": 19,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Rating.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Represents a Person\u0027s rating number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRating(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final Rating DEFAULT_INITIAL_RATING \u003d new Rating(\"0\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            \"Ratings should only contain numbers, and it should be between 1 to 10\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]|10\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String VALIDATION_INPUT_REGEX \u003d \"[1-9]|10\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Constructs a {@code Rating}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @param rating A valid rating."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Rating(String rating) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        checkArgument(isValidRating(rating), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        value \u003d rating;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Returns true if a given string is a valid rating number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static boolean isValidRating(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Returns true if a given string is a valid rating number."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static boolean isValidInputRating(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return test.matches(VALIDATION_INPUT_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                || (other instanceof Rating // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                \u0026\u0026 value.equals(((Rating) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Salary.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * Salary class to store the necessary information about a salary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "public class Salary {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final Salary DEFAULT_INITIAL_SALARY \u003d new Salary(\"0\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            \"Salary should only contain integers with no spaces or commas\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String SALARY_VALIDATION_REGEX \u003d \"^([0-9]+.[0-9]{1,2})|0$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public final String salary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public Salary(String value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        checkArgument(isValidSalary(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        salary \u003d value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static boolean isValidSalary(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return test.matches(SALARY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public String getSalary() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return salary;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            || (other instanceof Salary // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            \u0026\u0026 salary.equals(((Salary) other).salary)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return String.valueOf(salary);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtHour;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtRate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.PayDeductibles;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Rating(\"10\"), new Department(\"Accounting\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new Manager(\"Ben Leong\"), new Salary(\"2000\"), new OtHour(\"10\"), new OtRate(\"10\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new PayDeductibles(\"200\"), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Rating(\"2\"), new Department(\"Marketing\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new Manager(\"Marcus Tan\"), new Salary(\"2500\"), new OtHour(\"5\"), new OtRate(\"20\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new PayDeductibles(\"250\"), getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Rating(\"5\"), new Department(\"Tech\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new Manager(\"Moses Lim\"), new Salary(\"3000\"), new OtHour(\"15\"), new OtRate(\"15\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new PayDeductibles(\"300\"), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Rating(\"8\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new Department(\"Accounting\"), new Manager(\"Lionel Lim\"), new Salary(\"3500\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new OtHour(\"25\"), new OtRate(\"10\"), new PayDeductibles(\"350\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Rating(\"7\"), new Department(\"Marketing\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new Manager(\"Edward Loh\"), new Salary(\"4000\"), new OtHour(\"40\"), new OtRate(\"10\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new PayDeductibles(\"400\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Rating(\"3\"), new Department(\"Tech\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new Manager(\"Joanne Lee\"), new Salary(\"5000\"), new OtHour(\"10\"), new OtRate(\"10\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new PayDeductibles(\"500\"), getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 16,
      "IamRENCE": 2,
      "DanKhoo": 7,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtHour;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtRate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.PayDeductibles;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private String rating;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private String department;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private String manager;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private String salary;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private String hours;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private String rate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private String deductibles;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address, String department, String manager,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                            List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.rating \u003d \"0\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.manager \u003d manager;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.salary \u003d \"0\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.hours \u003d \"0\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.rate \u003d \"0\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.deductibles \u003d \"0\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        rating \u003d source.getRating().value;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        department \u003d source.getDepartment().value;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        manager \u003d source.getManager().fullName;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        salary \u003d source.getSalary().salary;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        hours \u003d source.getOtHours().overTimeHour;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        rate \u003d source.getOtRate().overTimeRate;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        deductibles \u003d source.getDeductibles().payDeductibles;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (rating \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (!Rating.isValidRating(rating)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new IllegalValueException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        final Rating modelRating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (department \u003d\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    Department.class.getSimpleName()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (!Department.isValidDepartment(department)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            throw new IllegalValueException(Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        final Department modelDepartment \u003d new Department(department);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (manager \u003d\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    Manager.class.getSimpleName()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (!Manager.isValidManager(manager)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            throw new IllegalValueException(Manager.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        final Manager modelManager \u003d new Manager(manager);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (salary \u003d\u003d null) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "              Salary.class.getSimpleName()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (!Salary.isValidSalary(salary)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            throw new IllegalValueException(Salary.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        final Salary modelSalary \u003d new Salary(salary);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (hours \u003d\u003d null) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "              OtHour.class.getSimpleName()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (!OtHour.isValidTwoDecimalNumber(hours)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            throw new IllegalValueException(OtHour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        final OtHour modelHours \u003d new OtHour(hours);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (rate \u003d\u003d null) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "              OtRate.class.getSimpleName()));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (!OtRate.isValidTwoDecimalNumber(rate)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            throw new IllegalValueException(OtRate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        final OtRate modelRate \u003d new OtRate(rate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (deductibles \u003d\u003d null) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "              PayDeductibles.class.getSimpleName()));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (!PayDeductibles.isValidTwoDecimalNumber(deductibles)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            throw new IllegalValueException(PayDeductibles.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        final PayDeductibles modelDeductibles \u003d new PayDeductibles(deductibles);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelRating, modelDepartment, modelManager,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                modelSalary, modelHours, modelRate, modelDeductibles, modelTags);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                \u0026\u0026 Objects.equals(rating, otherPerson.rating)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 Objects.equals(department, otherPerson.department)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 Objects.equals(manager, otherPerson.manager)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                \u0026\u0026 Objects.equals(salary, otherPerson.salary)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                \u0026\u0026 Objects.equals(hours, otherPerson.hours)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                \u0026\u0026 Objects.equals(rate, otherPerson.rate)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                \u0026\u0026 Objects.equals(deductibles, otherPerson.deductibles)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 60,
      "IamRENCE": 15,
      "DanKhoo": 31,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //        if (person.getPhone().isPrivate()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //            phone.setText(\"Private phone number\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //            phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //        if (person.getAddress().isPrivate()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //            address.setText(\"Private address\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //            address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //        if (person.getEmail().isPrivate()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //            email.setText(\"Private email\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //            email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "abtyx": 15,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/ssenisub.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 119
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    \u003cImage url\u003d\"@/images/ssenisub.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 67
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eMarcus Tan\u003c/manager\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 2,
      "NgeowXiuQi": 8,
      "DanKhoo": 4,
      "-": 20
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e10\u003c/rating\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "DanKhoo": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eMarketing\u003c/department\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eMarcus Tan\u003c/manager\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eTech\u003c/department\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eMoses Lim\u003c/manager\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eLionel Lim\u003c/manager\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eMarketing\u003c/department\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eEdward Loh\u003c/manager\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eTech\u003c/department\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eJoanne Lee\u003c/manager\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 7,
      "NgeowXiuQi": 28,
      "DanKhoo": 14,
      "-": 50
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    \u003cdepartment\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    \u003cmanager\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "NgeowXiuQi": 4,
      "DanKhoo": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    \u003cdepartment\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    \u003cmanager\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "NgeowXiuQi": 4,
      "DanKhoo": 2,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e2\u003c/rating\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eMarketing\u003c/department\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eMarcus Tan\u003c/manager\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eTech\u003c/department\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eMoses Lim\u003c/manager\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e8\u003c/rating\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eLionel Lim\u003c/manager\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e6\u003c/rating\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eMarketing\u003c/department\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eEdward Toh\u003c/manager\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e5\u003c/rating\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eTech\u003c/department\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eJoanne Lee\u003c/manager\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e10\u003c/rating\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e7\u003c/rating\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eMarketing\u003c/department\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eMarcus Tan\u003c/manager\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e5\u003c/rating\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eTech\u003c/department\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eJoanne Lee\u003c/manager\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 9,
      "NgeowXiuQi": 36,
      "DanKhoo": 18,
      "-": 57
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    \u003cdepartment\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    \u003cmanager\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "NgeowXiuQi": 4,
      "DanKhoo": 2,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : SSENISUB\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/ssenisub.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String VALID_DEPARTMENT \u003d \"Accounting\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String VALID_MANAGER \u003d \"Ben Leong\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT, VALID_MANAGER, VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT, VALID_MANAGER, VALID_TAGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT, VALID_MANAGER, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 5,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEDUCTIBLES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MANAGER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTHOUR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTRATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIVATE_ADDRESS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIVATE_EMAIL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIVATE_PHONE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALID_DEPARTMENT_AMY \u003d \"Accounting\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALID_DEPARTMENT_BOB \u003d \"Marketing\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALID_MANAGER_AMY \u003d \"Ben Leong\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALID_MANAGER_BOB \u003d \"Marcus Tan\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String VALID_SALARY_AMY \u003d \"2000\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String VALID_SALARY_BOB \u003d \"1000\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String VALID_OTHOUR_AMY \u003d \"20\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String VALID_OTHOUR_BOB \u003d \"10\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String VALID_OTRATE_AMY \u003d \"20\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String VALID_OTRATE_BOB \u003d \"10\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String VALID_DEDUCTIBLES_AMY \u003d \"200\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String VALID_DEDUCTIBLES_BOB \u003d \"100\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    //    public static final String PRIVATE_PHONE_DESC_AMY \u003d \" \" + PREFIX_PRIVATE_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final String PRIVATE_PHONE_DESC_BOB \u003d \" \" + PREFIX_PRIVATE_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    //    public static final String PRIVATE_EMAIL_DESC_AMY \u003d \" \" + PREFIX_PRIVATE_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final String PRIVATE_EMAIL_DESC_BOB \u003d \" \" + PREFIX_PRIVATE_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    //    public static final String PRIVATE_ADDRESS_DESC_AMY \u003d \" \" + PREFIX_PRIVATE_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final String PRIVATE_ADDRESS_DESC_BOB \u003d \" \" + PREFIX_PRIVATE_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String DEPARTMENT_DESC_AMY \u003d \" \" + PREFIX_DEPARTMENT + VALID_DEPARTMENT_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String DEPARTMENT_DESC_BOB \u003d \" \" + PREFIX_DEPARTMENT + VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String MANAGER_DESC_AMY \u003d \" \" + PREFIX_MANAGER + VALID_MANAGER_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String MANAGER_DESC_BOB \u003d \" \" + PREFIX_MANAGER + VALID_MANAGER_BOB;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String SALARY_DESC_AMY \u003d \" \" + PREFIX_SALARY + VALID_SALARY_AMY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String SALARY_DESC_BOB \u003d \" \" + PREFIX_SALARY + VALID_SALARY_BOB;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String OTHOUR_DESC_AMY \u003d \" \" + PREFIX_OTHOUR + VALID_OTHOUR_AMY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String OTHOUR_DESC_BOB \u003d \" \" + PREFIX_OTHOUR + VALID_OTHOUR_BOB;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String OTRATE_DESC_AMY \u003d \" \" + PREFIX_OTRATE + VALID_OTRATE_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String OTRATE_DESC_BOB \u003d \" \" + PREFIX_OTRATE + VALID_OTRATE_BOB;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String DEDUCTIBLES_DESC_AMY \u003d \" \" + PREFIX_DEDUCTIBLES + VALID_DEDUCTIBLES_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String DEDUCTIBLES_DESC_BOB \u003d \" \" + PREFIX_DEDUCTIBLES + VALID_DEDUCTIBLES_BOB;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String INVALID_DEPARTMENT_DESC \u003d \" \" + PREFIX_DEPARTMENT + \"Accounting123\"; // \u0027123\u0027 not allowed"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String INVALID_MANAGER_DESC \u003d \" \" + PREFIX_MANAGER + \"B@N\"; // \u0027@\u0027 not allowed in names"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String INVALID_SALARY_DESC \u003d \" \" + PREFIX_SALARY + \"$2000\"; // \u0027$\u0027 not allowed in salary"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String INVALID_OTHOUR_DESC \u003d \" \" + PREFIX_OTHOUR + \"25hrs\"; // letters not allowed in hours"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String INVALID_OTRATE_DESC \u003d \" \" + PREFIX_OTRATE + \"20/hr\"; // letters not allowed in rate"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String INVALID_DEDUCTIBLES_DESC \u003d \" \" + PREFIX_DEDUCTIBLES"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        + \"$1000\"; // \u0027$\u0027 not allowed in deductibles"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withRating(\"0\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                .withDepartment(VALID_DEPARTMENT_AMY).withManager(VALID_MANAGER_AMY)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .withSalary(VALID_SALARY_AMY).withHour(VALID_OTHOUR_AMY)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .withRate(VALID_OTRATE_AMY).withDeductibles(VALID_DEDUCTIBLES_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRating(\"0\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                .withDepartment(VALID_DEPARTMENT_BOB).withManager(VALID_MANAGER_BOB)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .withSalary(VALID_SALARY_BOB).withHour(VALID_OTHOUR_BOB)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .withRate(VALID_OTRATE_BOB).withDeductibles(VALID_DEDUCTIBLES_BOB)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 32,
      "IamRENCE": 2,
      "abtyx": 6,
      "DanKhoo": 14,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class RateCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        RateCommand rateFirstCommand \u003d new RateCommand(INDEX_FIRST_PERSON, new Rating(\"1\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        RateCommand rateSecondCommand \u003d new RateCommand(INDEX_SECOND_PERSON, new Rating(\"10\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(rateFirstCommand.equals(rateFirstCommand));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        RateCommand rateFirstCommandCopy \u003d new RateCommand(INDEX_FIRST_PERSON, new Rating(\"1\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(rateFirstCommand.equals(rateFirstCommandCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(rateFirstCommand.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(rateFirstCommand.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(rateFirstCommand.equals(rateSecondCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person editedPerson \u003d personInList.withRating(\"6\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        RateCommand rateCommand \u003d new RateCommand(indexLastPerson, new Rating(\"6\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String expectedMessage \u003d String.format(RateCommand.MESSAGE_RATING_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandSuccess(rateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        RateCommand rateCommand \u003d new RateCommand(outOfBoundIndex, new Rating(\"0\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(rateCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEPARTMENT_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MANAGER_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MANAGER_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abtyx"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PRIVATE_ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIVATE_ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abtyx"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PRIVATE_EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIVATE_EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abtyx"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PRIVATE_PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIVATE_PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        // private number accepted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        expectedPerson.getPhone().setPrivate(\"Y\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PRIVATE_PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        // private number and email"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        expectedPerson.getEmail().setPrivate(\"Y\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PRIVATE_PHONE_DESC_BOB + PRIVATE_EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        // private number, email and address"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        expectedPerson.getAddress().setPrivate(\"Y\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PRIVATE_PHONE_DESC_BOB + PRIVATE_EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                + PRIVATE_ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + DEPARTMENT_DESC_AMY + MANAGER_DESC_AMY,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // invalid department"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + INVALID_DEPARTMENT_DESC + MANAGER_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // invalid manager"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + DEPARTMENT_DESC_BOB + INVALID_MANAGER_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                Manager.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abtyx": 25,
      "DanKhoo": 45,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.RateCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person person \u003d new PersonBuilder().withRating(\"0\").build(); // Rating set to 0 to simulate newly added staff"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parseCommand_parseCommand_rate() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String command \u003d RateCommand.COMMAND_WORD + \" 1 \" + PREFIX_RATING + \"5\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(parser.parseCommand(command) instanceof RateCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 9,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEDUCTIBLES_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_OTHOUR_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_OTRATE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SALARY_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtHour;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtRate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.PayDeductibles;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SALARY_DESC, Salary.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_OTHOUR_DESC, OtHour.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_OTRATE_DESC, OtRate.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DEDUCTIBLES_DESC, PayDeductibles"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 13,
      "-": 211
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private static final String INVALID_SALARY \u003d \"salary\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String INVALID_RATING \u003d \"13\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private static final String VALID_SALARY \u003d \"100\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String VALID_RATING \u003d \"5\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    //parse salary test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void parseSalary_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSalary((String) null));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void parseSalary_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseSalary(INVALID_SALARY));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void parseSalary_validValueWithWhitespace_returnsTrimmedSalary() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String salaryWithWhitespace \u003d WHITESPACE + VALID_SALARY + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Salary expectedSalary \u003d new Salary(VALID_SALARY);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertEquals(expectedSalary, ParserUtil.parseSalary(salaryWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parseRating_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRating((String) null));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parseRating_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(INVALID_RATING));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parseRating_validValueWithoutWhitespace_returnsRating() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Rating expectedRating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(VALID_RATING));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parseRating_validValueWithWhitespace_returnsTrimmedRating() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String ratingWithWhitespace \u003d WHITESPACE + VALID_RATING + WHITESPACE;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Rating expectedRating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(ratingWithWhitespace));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 25,
      "NgeowXiuQi": 22,
      "-": 209
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RateCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.RateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * outside of the RateCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * same path through the RateCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class RateCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private RateCommandParser parser \u003d new RateCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseSuccess(parser, \"1 \" + PREFIX_RATING + \"5\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                new RateCommand(INDEX_FIRST_PERSON, new Rating(\"5\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"-5\" + PREFIX_RATING + \"5\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"0\" + PREFIX_RATING + \"5\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // missing rating prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, PREFIX_RATING + \"8\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parse_invalidArgs_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // larger than 10"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, PREFIX_RATING + \"11\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // non-numeric argument"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, PREFIX_RATING + \"five\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void isPrivate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Address address \u003d new Address(\"Boon Lay\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //default address"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertFalse(address.isPrivate());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void setPrivate() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Address add \u003d new Address(\"BL\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //set to private"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        add.setPrivate(\"Y\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertTrue(add.isPrivate());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //set to not private"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        add.setPrivate(\"N\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertFalse(add.isPrivate());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abtyx": 18,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/DepartmentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class DepartmentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Department(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void constructor_invalidDepartment_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String invalidDepartment \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Department(invalidDepartment));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void isValidDepartment() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // null department"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Department.isValidDepartment(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // invalid department"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Department.isValidDepartment(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Department.isValidDepartment(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Department.isValidDepartment(\"123\")); // numbers only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Department.isValidDepartment(\"Accounting123\")); // alphabets + numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // valid department"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(Department.isValidDepartment(\"Accounting\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void isPrivate() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Email email \u003d new Email(\"yxt@msn.com\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //default email"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertFalse(email.isPrivate());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void setPrivate() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Email email \u003d new Email(\"yxt@msn.com\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //set to private"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        email.setPrivate(\"Y\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertTrue(email.isPrivate());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //set to non private"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        email.setPrivate(\"N\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertFalse(email.isPrivate());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abtyx": 18,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class ManagerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Manager(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void constructor_invalidManager_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String invalidManager \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Manager(invalidManager));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void isValidManager() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // null manager"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Manager.isValidManager(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // invalid manager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Manager.isValidManager(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Manager.isValidManager(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Manager.isValidManager(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Manager.isValidManager(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // valid manager"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(Manager.isValidManager(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(Manager.isValidManager(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(Manager.isValidManager(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(Manager.isValidManager(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(Manager.isValidManager(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/OtHourTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "public class OtHourTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new OtHour(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void constructor_invalidOtHour_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String invalidHours \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new OtHour(invalidHours));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void isValidOtHours() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // null OT Hour"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e OtHour.isValidTwoDecimalNumber(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // invalid OT hour"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtHour.isValidTwoDecimalNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtHour.isValidTwoDecimalNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtHour.isValidTwoDecimalNumber(\"hours\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtHour.isValidTwoDecimalNumber(\"2o\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtHour.isValidTwoDecimalNumber(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // valid hours"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtHour.isValidTwoDecimalNumber(\"100\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtHour.isValidTwoDecimalNumber(\"100.00\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtHour.isValidTwoDecimalNumber(\"33123\")); // long hours"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/OtRateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "public class OtRateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new OtRate(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void constructor_invalidOtRate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String invalidRate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new OtRate(invalidRate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void isValidOtRate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // null OT rate"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e OtRate.isValidTwoDecimalNumber(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // invalid OT rate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtRate.isValidTwoDecimalNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtRate.isValidTwoDecimalNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtRate.isValidTwoDecimalNumber(\"hours\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtRate.isValidTwoDecimalNumber(\"2o\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtRate.isValidTwoDecimalNumber(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // valid rate"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtRate.isValidTwoDecimalNumber(\"100\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtRate.isValidTwoDecimalNumber(\"100.00\")); // decimal places"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtRate.isValidTwoDecimalNumber(\"33123\")); // long rate"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PayDeductiblesTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "public class PayDeductiblesTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new PayDeductibles(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void constructor_invalidPayDeductibles_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String invalidHours \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new OtHour(invalidHours));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void isValidPayDeductibles() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // null pay deductibles"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e PayDeductibles.isValidTwoDecimalNumber(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // invalid pay deductibles"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(PayDeductibles.isValidTwoDecimalNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(PayDeductibles.isValidTwoDecimalNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(PayDeductibles.isValidTwoDecimalNumber(\"hours\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(PayDeductibles.isValidTwoDecimalNumber(\"2o\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(PayDeductibles.isValidTwoDecimalNumber(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // valid pay deductibles"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtHour.isValidTwoDecimalNumber(\"100\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtHour.isValidTwoDecimalNumber(\"100.00\")); // decimal places"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtHour.isValidTwoDecimalNumber(\"102948200098\")); // long hours"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void isPrivate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Phone phone \u003d new Phone(\"92349234\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //default phone"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertFalse(phone.isPrivate());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void setPrivate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Phone phone \u003d new Phone(\"92349234\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //set to private"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        phone.setPrivate(\"Y\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertTrue(phone.isPrivate());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //set to non private"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        phone.setPrivate(\"N\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertFalse(phone.isPrivate());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abtyx": 18,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/RatingTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class RatingTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Rating(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void constructor_invalidRating_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String invalidRating \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Rating(invalidRating));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void isValidRating() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // null rating"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Rating.isValidRating(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // invalid rating"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidRating(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidRating(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidRating(\"91\")); // more than 10"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidRating(\"rating\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidRating(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidRating(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // valid rating"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Rating.isValidRating(\"0\")); // between 0 to 10"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Rating.isValidRating(\"10\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Rating.isValidRating(\"5\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void isValidInputRating() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // null input rating"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Rating.isValidInputRating(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // invalid input rating"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidInputRating(\"\")); // empty string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidInputRating(\" \")); // spaces only"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidInputRating(\"91\")); // more than 10"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidInputRating(\"0\")); // less than 1"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidInputRating(\"rating\")); // non-numeric"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidInputRating(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidInputRating(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // valid input rating"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Rating.isValidInputRating(\"1\")); // between 1 to 10"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Rating.isValidInputRating(\"10\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Rating.isValidInputRating(\"5\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Rating zeroRating \u003d new Rating(\"0\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Rating fullRating \u003d new Rating(\"10\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(zeroRating.equals(zeroRating));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(zeroRating.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(zeroRating.equals(\"0\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // different rating -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(zeroRating.equals(fullRating));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/SalaryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "public class SalaryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Salary(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void constructor_invalidSalary_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String invalidSalary \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Salary(invalidSalary));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void isValidSalary() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // null salary"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Salary.isValidSalary(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // invalid salaries"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(Salary.isValidSalary(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // valid salaries"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(Salary.isValidSalary(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(Salary.isValidSalary(\"93121534\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(Salary.isValidSalary(\"124293842033123\")); // long salary"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String INVALID_DEPARTMENT \u003d \"Accounting123\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String INVALID_MANAGER \u003d \"B@N\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String VALID_DEPARTMENT \u003d BENSON.getDepartment().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String VALID_MANAGER \u003d BENSON.getManager().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        VALID_MANAGER, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                VALID_DEPARTMENT, VALID_MANAGER, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        VALID_MANAGER, VALID_TAGS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                VALID_DEPARTMENT, VALID_MANAGER, VALID_TAGS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        VALID_MANAGER, VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                VALID_DEPARTMENT, VALID_MANAGER, VALID_TAGS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_DEPARTMENT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        VALID_MANAGER, VALID_TAGS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                VALID_DEPARTMENT, VALID_MANAGER, VALID_TAGS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void toModelType_invalidDepartment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_DEPARTMENT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        VALID_MANAGER, VALID_TAGS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedMessage \u003d Department.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void toModelType_nullDepartment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                null, VALID_MANAGER, VALID_TAGS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Department.class.getSimpleName());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void toModelType_invalidManager_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        INVALID_MANAGER, VALID_TAGS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedMessage \u003d Manager.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void toModelType_nullManager_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                VALID_DEPARTMENT, null, VALID_TAGS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Manager.class.getSimpleName());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        VALID_MANAGER, invalidTags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 58,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtHour;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtRate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.PayDeductibles;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        descriptor.setRating(person.getRating());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        descriptor.setDepartment(person.getDepartment());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        descriptor.setManager(person.getManager());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.setSalary(person.getSalary());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.setHours(person.getOtHours());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.setRate(person.getOtRate());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.setDeductibles(person.getDeductibles());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Sets the {@code Rating} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public EditPersonDescriptorBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        descriptor.setRating(new Rating(rating));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Sets the {@code Department} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public EditPersonDescriptorBuilder withDepartment(String department) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        descriptor.setDepartment(new Department(department));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Sets the {@code Manager} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public EditPersonDescriptorBuilder withManager(String manager) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        descriptor.setManager(new Manager(manager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Sets the {@code Salary} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public EditPersonDescriptorBuilder withSalary(String salary) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.setSalary(new Salary(salary));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Sets the {@code OtHour} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public EditPersonDescriptorBuilder withHour(String hours) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.setHours(new OtHour(hours));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Sets the {@code OtRate} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public EditPersonDescriptorBuilder withRate(String rate) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.setRate(new OtRate(rate));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Sets the {@code PayDeductibles} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public EditPersonDescriptorBuilder withDeductibles(String deductibles) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.setDeductibles(new PayDeductibles(deductibles));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 40,
      "IamRENCE": 10,
      "DanKhoo": 20,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtHour;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtRate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.PayDeductibles;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String DEFAULT_SALARY \u003d \"0\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String DEFAULT_OTHOUR \u003d \"0\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String DEFAULT_OTRATE \u003d \"0\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String DEFAULT_DEDUCTIBLES \u003d \"0\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String DEFAULT_DEPARTMENT \u003d \"Accounting\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String DEFAULT_MANAGER \u003d \"Ben Leong\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private Salary salary;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private OtHour hours;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private OtRate rate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private PayDeductibles deductibles;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Rating rating;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private Department department;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private Manager manager;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        salary \u003d new Salary(DEFAULT_SALARY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        hours \u003d new OtHour(DEFAULT_OTHOUR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        rate \u003d new OtRate(DEFAULT_OTRATE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        deductibles \u003d new PayDeductibles(DEFAULT_DEDUCTIBLES);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        rating \u003d new Rating(\"5\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        department \u003d new Department(DEFAULT_DEPARTMENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        manager \u003d new Manager(DEFAULT_MANAGER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        salary \u003d personToCopy.getSalary();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        hours \u003d personToCopy.getOtHours();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        rate \u003d personToCopy.getOtRate();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        deductibles \u003d personToCopy.getDeductibles();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        rating \u003d personToCopy.getRating();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        department \u003d personToCopy.getDepartment();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        manager \u003d personToCopy.getManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Sets the (@code Salary) of the (@code Person) that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @param salary"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public PersonBuilder withSalary(String salary) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.salary \u003d new Salary(salary);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Sets the (@code OtHour) of the (@code Person) that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @param hours"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public PersonBuilder withHours(String hours) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.hours \u003d new OtHour(hours);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Sets the (@code OtRate) of the (@code Person) that we are building."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @param rate"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public PersonBuilder withRate(String rate) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.rate \u003d new OtRate(rate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Sets the (@code PayDeductibles) of the (@code Person) that we are building."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @param deductibles"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public PersonBuilder withDeductibles(String deductibles) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.deductibles \u003d new PayDeductibles(deductibles);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Sets the {@code Rating} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public PersonBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.rating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Sets the {@code Department} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public PersonBuilder withDepartment(String department) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.department \u003d new Department(department);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Sets the {@code Manager} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public PersonBuilder withManager(String manager) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.manager \u003d new Manager(manager);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Builds a new person based on the current one."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return new Person(name, phone, email, address, rating, department, manager,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "          salary, hours, rate, deductibles, tags);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 62,
      "IamRENCE": 11,
      "DanKhoo": 26,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEDUCTIBLES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MANAGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTHOUR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTRATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        sb.append(PREFIX_DEPARTMENT + person.getDepartment().value + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        sb.append(PREFIX_MANAGER + person.getManager().fullName + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    + s.tagName + \" \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        descriptor.getRating().ifPresent(rating -\u003e sb.append(PREFIX_RATING).append(rating.value).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        descriptor.getDepartment().ifPresent(department -\u003e sb.append(PREFIX_DEPARTMENT).append(department.value)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        descriptor.getManager().ifPresent(manager -\u003e sb.append(PREFIX_MANAGER).append(manager.fullName).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.getSalary().ifPresent(salary -\u003e sb.append(PREFIX_SALARY).append(salary.salary).append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.getHours().ifPresent(hour -\u003e sb.append(PREFIX_OTHOUR).append(hour.overTimeHour).append(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.getRate().ifPresent(rate -\u003e sb.append(PREFIX_OTRATE).append(rate.overTimeRate).append(\" \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.getDeductibles().ifPresent(deductibles -\u003e sb.append(PREFIX_DEDUCTIBLES)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .append(deductibles.payDeductibles).append(\" \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 9,
      "IamRENCE": 4,
      "DanKhoo": 7,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEPARTMENT_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withPhone(\"94351253\").withRating(\"0\").withDepartment(\"Accounting\").withManager(\"Ben Leong\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withRating(\"0\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withDepartment(\"Marketing\").withManager(\"Marcus Tan\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withRating(\"0\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withDepartment(\"Tech\").withManager(\"Moses Lim\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withRating(\"0\").withDepartment(\"Accounting\").withManager(\"Lionel Lim\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withRating(\"0\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withDepartment(\"Marketing\").withManager(\"Edward Loh\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withRating(\"0\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withDepartment(\"Tech\").withManager(\"Joanne Lee\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withRating(\"0\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withDepartment(\"Accounting\").withManager(\"Ben Leong\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withRating(\"0\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withDepartment(\"Marketing\").withManager(\"Marcus Tan\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withRating(\"0\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withDepartment(\"Tech\").withManager(\"Moses Lim\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withRating(\"0\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withDepartment(VALID_DEPARTMENT_AMY).withManager(VALID_MANAGER_AMY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRating(\"0\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withDepartment(VALID_DEPARTMENT_BOB).withManager(VALID_MANAGER_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 23,
      "IamRENCE": 2,
      "DanKhoo": 18,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getPersonList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            builder.append(\"\u003crating\u003e0\u003c/rating\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            builder.append(\"\u003cdepartment\u003ea\u003c/department\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            builder.append(\"\u003cmanager\u003ea\u003c/manager\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            builder.append(\"\u003csalary\u003e0\u003c/salary\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            builder.append(\"\u003chours\u003e0\u003c/hours\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            builder.append(\"\u003crate\u003e0\u003c/rate\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            builder.append(\"\u003cdeductibles\u003e0\u003c/deductibles\u003e\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyPersonsFile \u003d TEST_DATA_FOLDER.resolve(\"manyPersons.xml\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "NgeowXiuQi": 4,
      "DanKhoo": 2,
      "-": 124
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEPARTMENT_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MANAGER_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MANAGER_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + DEPARTMENT_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + MANAGER_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_AMY + MANAGER_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + EMAIL_DESC_BOB + MANAGER_DESC_BOB + DEPARTMENT_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + DEPARTMENT_DESC_AMY"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + DEPARTMENT_DESC_AMY"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + DEPARTMENT_DESC_AMY"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + DEPARTMENT_DESC_AMY"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: missing department -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: missing manager -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_AMY + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_AMY + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_AMY + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_AMY + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: invalid department -\u003e rejected */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + INVALID_DEPARTMENT_DESC + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: invalid manager -\u003e rejected */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_AMY + INVALID_MANAGER_DESC;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, Manager.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_AMY + MANAGER_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 46,
      "-": 236
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEPARTMENT_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MANAGER_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MANAGER_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_BOB + \" \" + MANAGER_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_AMY + DEPARTMENT_DESC_AMY + MANAGER_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: invalid department -\u003e rejected */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + INVALID_DEPARTMENT_DESC, Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: invalid manager -\u003e rejected */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + INVALID_MANAGER_DESC, Manager.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_AMY + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different department -\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        rejected */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DEPARTMENT_DESC_AMY + MANAGER_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different manager -\u003e rejected */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 48,
      "-": 279
    }
  }
]
